var store = [{
        "title": "나의 첫번째 중고맥 구입기",
        "excerpt":"Why  최근에 프로그래밍 공부를 시작했다. 그 와중에 맥이 필요한 상황이 되어서 일어나자마자 알아보기 시작했다. 동일 스펙 노트북에 비해 3배는 비싸보이는 가격에 입이 떡하니 벌어졌지만, 어차피 좋은 화질로 뭘 보거나 최신 하드웨어를 쓰는게 목적이 아니라 맥환경을 얻는게 목적이니 중고도 괜찮지 않을까 해서 알아봤다.   중고에서 내가 원하는 규격     디스플레이는 15인치. 해상도는 글쎄? 사진보려고 사는건 아니니까.   메모리 8G   128G SSD   how  일단 15인치라고 하면 맥북프로였다. 그래서 맥북프로를 알아보니 2010~2012년 모델을 기준으로 가격은 50~80만원. 헬로마켓, 번개마켓, 맥커뮤니티를 뒤져봤는데 거기다 대부분 서울에서 거래하는 사람들이라 일단 현재 지방에 거주하는 나와는 안맞았다.   그래서 택배를 해주는 전문업자 물품을 집중적으로 알아보니 65만원쯤에 2010년 물품이 눈에 들어왔다. 혹시 이 모델에 하자는 없나 싶어서 검색을 해봤더니 특정 그래픽카드에 하자가 있어서 수리 프로그램을 진행한 히스토리가 있었다. 내가 살 물건들이 과연 수리 프로그램을 받았는지도 알 수 없는 노릇. 그래서 그 물품은 패스.   이번엔 네이버쇼핑에 검색해보니 70만원-80만원에 전문업자의 레티나 물품이 눈에 들어왔다. 레티나면 2012년부터 출시된 모델이다. 그런데 각종 악세사리가 무조건 강요되는 최근 맥북의 조악함 덕분에 재평가를 받고 있었다. 사람들끼리 거래하는 물품에선 최소 110만원인데 싸게 나온 이유가 있는 물건들이었다. 일단 외장에 스크래치는 기본. 디스플레이 외곽에 찌그러진 것들이며, 화면 중앙에 빛샘이 두군데나 있다던가 디스플레이에 긁힌 자국들이 있다던가. 가장 치명적이라고 느꼈던 빛샘은 익숙해지면 그만이라고 생각하고 사버렸다.    영롱하다  이제 남은 걱정거리는 상기한 하자가 전부인지 확인하는 일이었다. 뭔가 숨긴 건 없는지. 좀 쓰다가 내부에서 뭔가 터지는 건 아닌지 그런 걱정들이 있었다. 그리고 일주일이 지난 지금 완전히 만족하고 있다. 일단 산 뒤로 자는 시간 빼고 계속 키보드를 두들기는 상태인데 하드웨어 측면에서 잘 버티고 있다. 키도 잘 작동하고 하얀색을 출력하지 않는 한 빛샘이 부각되지도 않았다. 다행히 개발을 할 때는 눈의 피로 때문에 다크컬러의 테마를 주로 쓰게 되니 그것 때문에 방해를 받는 일은 없었다.    정말 오래 됐는데 2022년에 다시 반값 정도에 팔았다.  !img   개인적으로 맥에 대해 느낀점.     iTerm을 설치했는데 회사 일을 할 땐 CLI 터미널 환경을 선호했기에 너무 사랑스럽다.   command키에 익숙해지는게 처음 문제였는데 익숙해지니 쓸 만하다.   트랙패드는 완전 신세계다. PC를 쓸 때 태블릿 환경처럼 쓰고 싶었을 때가 종종 있었는데 트랙패드는 그걸 가능하게 해준다. 단축키를 조금씩 외우다 보면 키보드에서 손이 안떨어지고 지속적인 작업이 가능하다.   많은 작업이 이제는 웹과 클라우드로 넘어와서 ‘맥이라 가능하다!’ 라는 느낌은 받지 못했다. 예를 들어 나는 갤럭시노트를 쓰다보니 메모는 구글킵을 도크에 놓고 쓰고 있다. 예전에는 이런 동기화 기능들이 맥의 엄청난 자랑거리였는데 말이다 . 그래도 Mac Notes 자체는 엄청난 퀄리티. 스마트폰에서 확인하지 않을 내용은 Notes에 기록하고 있다.   키보드의 감각이 내 취향에 맞다. 누르는게 즐거운 감각을 준다. 이런게 노트북 키보드로 가능하다니 처음엔 놀랐다.   아이폰을 써야하나? OS 곳곳에 작업 연속성을 배려한 메뉴들이 보이는데 내가 가진 아이폰은 4S라 현재 쓰지도 않는 상태.   윈도우를 정렬하는 데 있어 단축키를 외우거나 소프트웨어를 설치하는일이 조금 있다. 그런데 창들이 내가 원하는 대로 움직이지 않는다는 느낌이 많이 들어서 불만이다.   윈도우는 사용자환경 디렉토리 예를 들어 문서, 비디오 이런 폴더들이 무용지물이라는 느낌이 자주 들었는데 맥은 이걸 활용하게끔 자연스럽게 인도하는 설계가 돋보인다.   ","categories": ["MAC"],
        "tags": ["diary","MAC","Review"],
        "url": "/mac/%EC%A4%91%EA%B3%A0%EB%A7%A5-%EA%B5%AC%EC%9E%85%EA%B8%B0",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "코드스테이츠 PRE 중간 기록",
        "excerpt":"처음 코드스테이츠 과정에 들어갈때 다짐하고 다른 사람에게 말해놓은게 있다. 이 일을 사랑하는 방법을 익히고 싶다. 사랑할 수 있을지 알고 싶다.   사람이 무언가를 사랑하려면 잘해야 하고 잘하려면 희생을 많이 해야 한다고 한다. 아마도 희생할수록 그 가치를 부여하는 심리적 이유 때문인듯하다. 말을 정리해보면 다음과 같은 문장이 나온다. 1) 잘하지 못하면 사랑을 유지하기는 어렵다. 2) 희생 없이는 잘하게 되는 일은 없을 거다.      최근에 전직을 준비하고 있는 나한테 프로그래밍은 아직 잘하는 종류의 일은 아니다. 열정을 느낄 때도 있지만 매몰차게 깨어질 때도 많다는 이야기다. 비유하자면 열심히 구애 중인 남자 같은 거다. 다만 코드스테이츠 PRE 과정에서 문득 내가 그 일을 사랑하게 될 거란 느낌을 받을 때가 있다. 그런 근거들은 다음과 같다.      IT는 잘하는 사람도 또 다른 분야의 라이브러리를 빌려 자신의 목표를 추구하는 곳이다. 오픈소스를 기반으로 한 상호협력의 세계다. 자신이 위계에 구속되기보다는 협력 공동체의 일원임을 느끼게 해준다. 나는 그런 개방성이 너무 좋다.   IT는 타인을 돕는 게 자신의 성장에 도움이 된다고 확신하는 곳이다. 타인이 가진 문제를 자신의 관점에서 해결하면서 자신의 성장을 도모한다. 그렇게 협력하기보다 진입장벽을 높이 세워서 지대를 추구하는 게 다른 전문가들의 일반적 행태였음을 생각하면 엄청난 차이다. 아름다운 마음이 선순환하는 아름다움은 나를 매료시켰다.   IT는 결과물이 정직한 곳이다. 인터프리터는 사람을 구분하지 않는다. 일반 비즈니스에 종사하는 경우 희로애락의 많은 부분이 인간의 비위와 운에 달려있단 걸 생각하면 이곳은 자신을 시험하고 발전시키기 좋은 재료를 가지고 있다. 그 정직성 덕분에 자기가 주도하여 그런 과정을 진행할 수 있다. 그런 자주성의 강조가 나의 가치관과 잘 일치해서 좋다.      지금참여하고 있는 코드스테이츠 PRE는 이러한 경험을 제공한다. 코드스테이츠의 Lesson은 1, 3번의 장점을 아주 강조하여 구성되어 있다. 생태계가 어떻게 되어있는지 설명해주고 그 생태계속에서 자주적으로 살아갈 방법을 익힐 수 있도록 옆에서 Nudge해준다. 딴거 없이 여기서 언급된 것들만 꾸준히 할 수 있다면 어엿한 구성원이 될 수 있을 것 같다는 생각이 든다.   Lesson 만큼이나 시간이 배정되어있는 Pair Programing과정은 2번이 무엇인지 느끼게 해주고 매번 나를 리프레시 시켜준다. 인간은 자신의 사고를 모두를 검증할 수가 없다. 수많은 가정 위에서 아슬아슬한 줄다리기를 하고 있고 어떨 땐 자신의 잘못된 가정 때문에 문제를 찾지 못해서 고생한다. 페어 프로그래밍은 그 가정을 깨트리고 관점을 재정립하도록 하는 과정이다. 일상적인 비유를 한다면 알맹이가 있는 음료를 먹기 전에 흔드는 거다. 처음엔 부담스럽고 부정하고 싶지만 시작하면 새로운 목표와 자신에 대해 알아가는 즐거움이 있고 어디로 가야 할지 명확해지니 동기도 부여된다.      나는 전문가가 되고 싶다. 전문가는 문제를 해결할 수 있어야 하고 비전문가 집단에게 새로운 지평을 열어주는 일을 . 쉽지는 않다. 모르는 걸 자꾸 발견하고 하던 방법에 의지하기보다 더 나은 방법을 고민해야 하니까. 자꾸 도자기를 깨는 장인처럼, 손에 쥔 걸 깨트리는 엄격한 마음이 필요한 것이다.   하지만 그 괴로움을 대면하면 나만의 길을 만들 수 있게 된다. 그리고 언젠가 그런 경험들이 내 삶을 지탱해주는 중요한 정체성이라는 걸 절절하게 느끼게 된다면 나는 도자기를 깨는 게 무섭지도 않게 될 것이다. 그때는 나는 일을 사랑한다고 말할 수 있을 것 같다. 지금은 아직 그런 단계는 아니니까 마음이 조급하고 두렵기도 하지만 코드스테이츠와 함께 그 과정을 계속 해나가고 싶다.   ","categories": ["devlog"],
        "tags": ["Eengineer","General"],
        "url": "/devlog/%EC%BD%94%EB%93%9C%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%B8%A0-PRE-%EC%A4%91%EA%B0%84-%EA%B8%B0%EB%A1%9D",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "프로젝트 파일은 아닌데 오류가 날때 응급처치 방법",
        "excerpt":"React 프로젝트 클론하고 실행만 했는데 오류가 발생했다.   TypeError: Cannot read property 'bool' of undefinedevalnode\\_modules/babel-loader/lib/index.js??ref--6-oneOf-2!/Users/mac/WebstormProjects/Twit/client/node\\_modules/react-inlinesvg/lib/index.js:371 368 | }(\\_react2.default.Component); 369 | 370 | InlineSVG.propTypes = {&gt; 371 | cacheGetRequests: \\_react2.default.PropTypes.bool, 372 | children: \\_react2.default.PropTypes.node, 373 | className: \\_react2.default.PropTypes.string, 374 | onError: \\_react2.default.PropTypes.func   기본적인 오류도 안잡은 상태에서 커밋을 했을리는 없다고 가정. 실행시 컴파일 에러는 없는데 페이지 요청을 했을땐 오류가 나고 있다. 디버깅 모드에서 봐도 별게 없다. ROOT 엘리먼트에 렌더를 요청하고 패키지를 읽다가 callpsed   // 에러나가 나는 지점 ReactDOM.render(&lt;*App */&gt;, document.getElementById('root'));    전체 메시지   그럼 패키지에 문제가 있겠거니 싶어서 뒤져보다가 패키지를 한번 다 최신버전으로 해볼까? 하는 마음에   yarn upgradenpm  npm update --save  패키지를 최신 버전 갱신, 이걸로 해결됬다.  아마 파일이 업로드된 당시의 json.package 와 현재 개발환경의 react 16.8.0 이 호환상태가 좋지는 않았던 모양이다.  ","categories": ["React"],
        "tags": ["React","Debug","javascript"],
        "url": "/react/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8C%8C%EC%9D%BC%EC%9D%80-%EC%95%84%EB%8B%8C%EB%8D%B0-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%82%A0%EB%95%8C-%EC%9D%91%EA%B8%89%EC%B2%98%EC%B9%98-%EB%B0%A9%EB%B2%95",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "자바스크립트 오해풀기 1 편 — SCOPE",
        "excerpt":"   그 동안 자바스크립트 공부를 하면서 명확하게 잡히지 않았던 것들만 골라 경험담과 함께 시리즈로 정리하려한다. 카페트 밑의 먼지 마냥 급하진 않았지만 거슬리는 기본적 개념, 근본적인 동작에 대한 갈망을 이번 시리즈로 해결하고자 한다.  SCOPE   let, const 같은 키워드는 ES의 패러다임 바꾼다. 좋다고 하니까, 일단 let을 쓰라는 가이드만 따르다보니 let을 쓰지 않음으로서 생기는 오류를 접할 기회가 없었다. 결국 [지역, 전역] 그리고 [var, let, const]의 차이와 구체적인 동작을 명확히 모른채 약간 혼란스러운 상태에 있었다. JSLint 를 쓰면 문제를 바로 지적해주니 당장 문제는 회피할 수 있지만 도대체 무슨일이 벌어지는지, 어디에서 어디로 프레임이 옮겨 갔는지 알아야 한다고 생각한다.   분석 Flow   let letInGlobal = 'letInGlobal';  // (1) function test() {   console.log(letInGlobal, 'letInGlobal 입니다'); // (1)    var varInLocal = 'varInLocal 입니다.';         // (2)   const constInLocal = 'localConst 입니다.';     // (2)    noVar = '함수안에서 지역변수가 되지 않고 전역변수가 된 noVar 입니다.'; // (3)   debugger; }; console.log(varInLocal, \"varInLocal 출력!\")       // (2) =&gt; ERROR varInLocal is not defined   (2) console.log(constInLocal, \"constInLocal 출력!\");  // (2) =&gt; ERROR constInLocal is not defined (2)  console.log(noVar);         // =&gt; ERROR noVar is not defined  (3) test();                     // 'letInGlobal 입니다'            (4) console.log(noVar);         // 'noVar 입니다.'                 (4)  // var, let, const 같은 키워드로 선언되지 않고 바로 쓰는 변수들은 항상 전역변수 // 오작동의 원인이기 때문에 이를 방지하기 위한 strict 모드에선 에러를 일으킴  (1) ~ (4) 이슈로 쪼개어서 앞으로 설명   ISSUE (1) 지역변수와 전역변수  let을 만나고 내가 헛갈린건 대다수 언어가 ‘블록단위 스코프’를 쓰기 때문이다. 자바는 전역을 쓰고 싶다면 그냥 static 을 붙인다. 그덕에 ‘JS에서는 var, const가 static 인가?’라고 착각을 했다. 아니다. 지역과 전역은 let 같은 선언 키워드의 문제가 아니다.     ISSUE (2) 함수 스코프의 부연설명   이 자바스크립트의 맹점을 기계적으로 회피하는게 아니라 실제로 이해하려면 결국 글로벌 객체와 실행문맥을 선언 키워드와 연결해서 이해해야한다.      자바스크립트 함수 스코프가 기본이다.   명시되지는 않았지만 작성된 코드는 브라우저의 window객체를 기준으로 실행된다.   즉 브라우저측에서 다루는 전역변수의 실체는 window 객체의 프로퍼티다. (엄밀히 따지면 같은 전역변수라도 var와 let은 다르다. let은 window프로퍼티가 아니다. 아래에서 정리한다.)    window의 자녀들   전역객체와 변수의 관계— 첫 예제의 test 외부에서 선언된건 모두 전역변수다. 다른 실행컨텍스트 즉 다른 함수에서 전역변수를 선언하는 방법은 (3)에서 설명     따라서 예제의 test 함수 안에 선언된것들은 무슨 키워드를 쓰든 지역변수다. 즉 키워드가 아니라 어떤 함수스코프에서 선언이 되었느냐가 변수의 호출범위를 좌지우지한다.   의미가 없다면 선언 키워드 간 차이는?  함수 스코프를 따르고 재선언 및 변수변경이 가능한 &lt; var &gt;  블록 스코프를 사용하고 재선언이 불가능한 공통점을 가진 &lt; let &gt;, &lt; const &gt;   글로벌객체 (또는 실행함수)에 프로퍼티를 형성하는 &lt; var &gt;  글로벌객체 (또는 실행함수)에 프로퍼티를 형성하지 않는 &lt; let &gt;, &lt; const &gt;  &lt; let &gt;과 &lt; const &gt;의 차이점은 값 변경가능여부다.    var는 글로벌 객체에 붙었다. 그럼 let과 const는 어디에 있다가 호출되는걸까!    let 으로 디파인한 변수는 어디에 숨어 있는지 알기 위해. 익명함수를 실행했다. 함수는 실행될때마다 저 자신의 실행문맥을 가진다. (실행문맥은 함수의 argument, scope 등을 가지고 있다) 여기선 함수를 ( ) 으로 래핑함으로서 윈도우와 동떨어진 독립된 스코프가 되었다. 내가 콘솔에서 선언한 testLet은 글로벌객체엔 없지만 실행문맥의 Script Scope 에서 찾을 수 있기에 호출할때 Ref 에러를 발생시키지 않았다.     ISSUE (3) 어떻게 전역을 선언하나?   window.foo = 'hello';       // 윈도우 객체에 직접 입력 window['foo'] = 'hello';    // 위와 동일 var bar = function() {      // var 키워드가 바로 위와 같이 윈도우객체( 다르게 말해 실행중인 함수의 'VariableObject'에 접근하는 것임을 알자.   foo = \"hello\";            // 키워드가 없어도 윈도우에 붙는다. }; Object.defineProperty(window,\"foo\", {value: \"hello\"});    // Obejct에 내장된 함수를 통해서 선언  전역(글로벌객체)에 접근하는것 그게 전역변수를 만드는 방법이다. 그리고 이글은 3번 Line에 대한 긴 설명이었다.   전역(글로벌객체)에 접근하는것 그게 전역변수를 만드는 방법이다. 그리고 이 글은 이 사실에 대한 대한 긴 설명이었다. 그렇다면 첫 예제의 ‘noVar’ 처럼 그냥 키워드 없이 쓰는게 JAVA의 static 에 해당한다는걸 알수 있다. 특별히 정하지 않거나 var를 사용하면 변수가 죄다 전역객체에 붙어버린다. 혼자만 쓰는것도 아닌데 글로벌 객체에 덕지덕지 붙는건 문제를 일으킬것 같다. 때문에 let으로 블럭 스코프를 기준으로 변수를 관리하는 것이 의미가 있다는걸 알 수 있다.    var는 실행중인 함수의 프로퍼티에 접근하는 키워드다. 이게 이번 글의 핵심이다. 익명함수 안에서 실행된 var는 수행이 끝남과 동시에 컨텍스트가 사라져 다시 호출할 수 없다. 로컬변수는 이렇게 사라지고 사라지지 않기 위한 패턴이 클로져다.     ISSUE (4) 함수의 내용은 처음부터 실행되지 않는다.   let, var, function, class, {} 같은 선언(statement)은 코드가 읽힐때 호이스팅된다. 이때 호이스팅은 선언과 실행의 순서가 거꾸로라도 Reference 에러가 나지 않는 차이가 있는거지 내용물을 실행하는건 아니다. 리터럴 형식으로 정의된 함수도 마찬가지다. var에 undefine이 먼저 정의할뿐이지 할당은 순차적인 작업에서 시행된다.      그렇기 처음 noVar의 호출은 에러를 일으키지만 호출후에는 전역변수가 되어서 스코프에 잡혀 호출에도 에러가 발생하지 않는다.   하지만 바로 실행되지 않는다고해서 실시간으로 호출되는 형태에 따라 Scope가 정해진다고 생각하면 안된다. 스코프는 함수가 사용할 준비가 될때 (호이스팅 될때 정해진다.)   var P_tempVar = \"tempVarAtGlobal\";  function foo() {   var P_tempVar = \"tempVarAtLocal\";      function bar() {     console.log(P_tempVar);   }   bar(); }  foo();          // \"tempVarAtLocal\" bar();          // ERROR  foo() 에서 콜 스택은 global, foo, bar 순으로 쌓이겠지만 그렇다고 호출해준 함수의 스코프를 순차적으로 참고하지 않는다. bar() 에서 콜 스택은 global, bar 순으로 쌓이고 전역변수가 호출되는게 자연스러워 보이지만 원래 스코프는 global 밖에 없었다.  스코프는 바뀌지 않는다. 어떻게 호출하든 함수의 위치(글로벌에서 정의했다)만이 영향을 미친다는 거다. 다르게 표현하면 처음 정해진 근본을 따라간다는 이야기다.    로컬에 변수가 없으므로 글로벌을 참조한다. 여기서 함수 bar 는 전역객체 스코프만 가지고 있다. 콜스택은 그저 프로그램 제어순서를 보여줄뿐이다.   var P_tempVar = \"tempVarAtGlobal\";  function foo() {   var P_tempVar = \"tempVarAtLocal\";      function bar() {     console.log(P_tempVar);   }   bar(); }  foo();          // \"tempVarAtLocal\" bar();          // ERROR  bar 함수는 foo(); 를 통해 사용할 준비가 된다. 전과 다르게 foo의 컨텍스트에서 호이스팅되는 bar이므로 로컬변수가 출력된다.  ","categories": ["javascript"],
        "tags": ["javascript","language","Concept"],
        "url": "/javascript/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%98%A4%ED%95%B4%ED%92%80%EA%B8%B0-1-%ED%8E%B8-SCOPE",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "Graph, Tree, Hash Tables, Binary Tree (B-Tree)",
        "excerpt":"자료구조 정리 2편 Binary Tree  Tree         1편에서 알아본 자료구조는 각자 특징이 있었지만 모두 선형적구조를 가지고 있었다.   2편은 그렇지 않은 자료구조의 모임이며 Tree는 그중 Root를 가지고 하위노드를 거느린다는 특징을 가진다.   Tree를 규정하는 가장 중요한 원칙 ‘각 노드가 하나의 부모만을 가진다’   하위노드를 몇 개를 가지는지, 하위노드의 갯수가 불완전해도 되는지, 깊이의 불균등, 데이터를 어떤 순으로 담을지에 따라 여러종류의 Tree를 만들 수 있다.   위아래가 있는 위계적 구조는 관료제도를 떠오르게 하는데 인간의 인지구조에 친화적인 구조이다. (DOM도 이러한 구조로 구성되어 있다)        선형적 구조보다 복잡한 구조인 만큼 노드들이 위치에 따라 호칭을 가진다.객체지향 프로그래밍이나 여러 OS의 파일시스템도 Tree의 모양새이기 때문에 익숙한 단어들이 존재한다. (Root, Child, Parent)       Brother(Sibling Node): 어떤 노드의 같은 레벨에 있는 노드   Leaf Node: 자식 노드가 존재하지 않는 끝단 노드   Branch Node: 자식 노드가 있지만 Root가 아닌 중간노드   Edge: 노드간의 관계를 나타냄   Tree를 관리하기 위해서 Add, Search, Delete, Change 등의 메서드가 필요   class Node {   data;   leftNode;   rightNode;      show() {     return this.data;   }    }  class Tree {   root;   setRoot(node){     this.root = node   }   getRoot(){     return root;   }   //재귀로 트리를 출력   inOrder(node){     if (!(node === null)){     this.inOrder(node.left);     console.log(node.show());     this.inOrder(node.left);   }   find(data) {     let currentNode = this.root;     //이진트리는 data와 currentNode.data와 비교하여 왼쪽 오른쪽을 선택하여 탐색을 할 수 있다.   }   remove(data) {     //자식이 있는 경우와 없는 경우를 나눠처리   }      makeNode(data, leftNode, rightNode){   } }   B-Tree     이진 트리는 각각의 노드가 최대 두 개의 자식 노드를 가지는 트리 자료구조를 말함. 더 많은 자식을 가지면 B트리. B-Tree는 시간복잡도면에선 뛰어남. 데이터베이스에서 많이 사용.     Graph        Graph는 부모를 가지고 자녀를 가지는 면에서 Tree와 비슷하지만 Tree에 있는 몇 가지 제약이 없는 사실상 Tree의 상위호환격 자료구조이다. 몇 개의 자식노드(인접노드)를 가지는지 제약도 없고 root도 없기 때문이다.   Directed Graph, Undirected Graph로 나뉜다. (Tree는 Directed)   트리구조가 질서정연한 관료제도를 떠올리게 한다면 Graph는 현실에 있는 복합적인 구조를 떠올리게 한다. 다차원적으로 얽힌 인간관계, 골목길과 고속도로, 고가도로 등이 복합적으로 존재하는 도로망 이러한 현실은 Graph로 구현하기에 적합하다.   다른 노드에서 오는 엣지의 개수를 In-degree 다른 노드로 가는 엣지의 개수를 Out-degree라 한다. (방향이 있는 Graph에서 표현되는 방식) 트리는 이 degree의 갯수가 트리의 규칙에 예속되어 있었지만 Graph는 제약이 없다.   var Graph = function () {   function Node(key){     //노드의 생성자. 연결된 edge, direct 등 노드의 동작을 규약하는 프로퍼티를 작성한다.     //key는 노드의 관계를 규정하는 매개변수   }   function Edge(data, dest, capacity){     //엣지의 생성자. 다음 노드가 담아야할 정보를 담은 프로퍼티를 작성   }   function Graph() {     //Graph 전반의 특성을 규정하는 생성자. (갯수, direct인 경우 첫째 노드)   }   //노드 및 엣지의 삭제 및    Graph.prototype.insertNode = function (key) {}   Graph.prototype.deleteNode = function (key) {}   Graph.prototype.insertEdge = function (data, fromKey, toKey, capacity) {}   Graph.prototype.deleteEdge = function (fromkey, toKey) {} }     Hash table     Separate chaining 방식 해쉬테이블      배열은 빠른 탐색속도를 보장한다. 하지만 배열에 직접 데이터를 담으면 비용이 커진다. Data가 파일 이라면 더욱더 그러하다. 해시테이블은 이런 문제를 해결하기 위한 자료구조이다.   데이터를 해시함수에 집어넣어서 배열의 인덱스(버켓)로 활용할 수 있는 값을 얻는다. 그리고 그것을 인덱스의 크기로 나눠 나머지로 인덱스를 결정한다. 특정 인덱스에 몰리면 탐색비용이 증가하기 때문에 모든 인덱스에 골고루 분포되도록 해시함수를 만드는게 중요하다.   해수함수가 만들 수 있는 결과값 종류보다 인덱스 사이즈가 작을수록 더 많은 중복이 생기는데 그 때 2차탐색을 처리하는 방식은 인덱스에 Linked List를 할당하는 Separate chaining 아직 사용되지 않은 Hash에 중복되는 값을 넣어버리는 Open addressing   const hash = (string, bucketSize) =&gt; {   // 데이터와 size를 기반으로 인덱스를 반환 }  const HashTable = function(){   size = 100;   add(key, value){     index = hash(key, size);     // hash를 호출해서 값을 얻고 해시테이블에 집어넣는다.   }   remove(key){     index = hash(key, size);     // key를 기준으로 해시테이블을 탐색해서 값을 삭제한다.   }   lookup(key){     index = hash(key, size);     // key를 기준으로 해시테이블을 탐색하여 값을 반환.     return value   } } const testHashTable = new HashTable(); testHashTable.add('Kang', 'Taehun은 노력중.... 그의 일생을 담은 엄청난 데이터'); testHashTable.lookup('Kang'));  ","categories": ["DataStructure"],
        "tags": ["data","Algorithm"],
        "url": "/datastructure/graph-tree,-hash-tables,-binary-tree,-b-tree",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "Stack, Queue, Linked List",
        "excerpt":"자료구조 정리 1편   Stack         LIFO(Last In First Out) 자료구조이다.   가장 최근에 일어난 일을 신경쓰고 빨리 처리하는 점에서 인간의 의식과도 닮아있다. 이때 처리되지 못하고 못한 오래된 ‘A’같은 일은 의식 바닥에 깔려있게 된다.   그 대신 ‘D’나 ‘C’같은 같은 최근 작업은 반응속도를 보장한다는 장점이 있다. 이런 자료구조를 다루기 위해서는 일을 넣는 push, 일을 빼는 pop 그리고 전체적으로 쌓여있는 양을 측정할 peek 같은 메서드가 필요하다.   미로문제를 풀때 가장 최근에 지나온길을 순서대로 기억하고 있는 점을 활용할 수 있다. 인간친화적 아니 물리친화적인 자료구조.   class Stack {   constructor() {     this.stack = [];   }   push(item) {     this.stack.push(item)   }   pop() {     return this.stack.pop();   }   peek() {     return this.stack.length + 1;   } } var stack = new Stack(); stack.push(1); stack.push(2); stack.pop();  // 2 stack.peek(); // 2     Queue         FIFO (First In First Out)의 원칙으로 처리하는 자료구조이다. 은행의 대기열과 비슷하다. 대기열이 짧으면 바로 일을 처리하는 기적도 있을 수 있지만 대개는 줄을 서야한다.   그런 단점이 있지만 모든 작업이 공평하게 처리된다는 점에서 극단적인 대기시간을 가지는 문제는 없다는 장점을 가진다.   이런 Queue를 처리하기 위해선 가장 오래기다린 일, 즉 일들 중 가장 먼저 온 일을 처리하는 Dequeue. 새로 운 일을 대기열에 추가하는 enqueue. 대기열을 측정하는 Qlength가 필요하다.   class Queue {   constructor() {     this.queue = [];   }   dequeue(item) {     this.queue.push(item)   }   enqueue(item) {     return this.queue.shift();   }   qLength(){     return this.queue.length;   } }  var myQueue = new Queue(); myQueue.dequeue(\"A\"); // A myQueue.dequeue(\"B\"); // A B console.log(myQueue.enqueue());  // A; console.log(myQueue.qLength());  // 1;     Linked List         Linked List는 Array같은 단일구조체와 대비되는 자료구조이다.   Data, Next Adress로 구성되고 next가 다음 데이터를 가르킨다. 각 정보가 분리되어 있지만 정보를 찾아낼 연락망은 다 갖추어진 구조이다.   배열이 순차적인 페이지번호가 쓰여진 질서정연한 인명기록부라면 Linked List는 단일인명정보다. 대신 일련된 페이지 번호대신 다음 인명정보가 어디있는지 기록되어있다.   새로운 정보를 기입할 일이 생기면 Array는 전체 페이지번호를 하나하나 변경해야하는 반면 Linked List는 종이 한 장에 있는 Next Adress를 새 Linked List로 고치는 정도로 변경이 끝난다. 그래서 출입력에는 강점을 가진다.   대신 탐색에는 시간이 오래걸린다. 원하는 사람을 찾기 위해서 처음부터 하나하나를 순서대로 다 들춰봐야하기 때문이다.    class LinkedList {   data;   nextNode;    find ( num ){     return dListAddressfinde   }    input (item, 넣고 싶은 인덱스){     // NewList = new LinkedList     // PrevList = find(넣고 싶은 인덱스)     // NewList.nextnode = PrevList.nextnode     // PrevList.nextnode = NewList   }    delete (item){   } }  ","categories": ["DataStructure"],
        "tags": ["data","Algorithm"],
        "url": "/datastructure/stack-queue-linked-list",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "자바스크립트 상속",
        "excerpt":"   ES5 스타일   // 상속할 Human var Human = function (name) {   this.name = name; }; Human.prototype.eat = function (food) {   console.log(this.name + \" eat \", food); }; var kim = new Human('kim'); kim.eat(\"lamen\");  // 상속받을 Worker var Worker = function (name) {   Human.call(this, name); } // Object.create로 프로토타입을 copy Worker.prototype = Object.create(Human.prototype); // 생성자는 달라야하니 Woker 함수로 교체 Worker.prototype.constructor = Worker;  Worker.prototype.working = function () {   console.log(this.name + \" is working\"); };  var lee = new Worker('lee'); lee.eat('pizza'); lee.working();  ES5 style inheritance 자바스크립트가 원래 OOP가 아닌만큼 상속을 구현하는게 상당히 상스럽다.   상속 방법 3가지     부모의 생성자함수 call(this, name)로 실행   Object.create() 를 통해 copy   constructor 교체     ES6 스타일   class Human {   constructor(name) {     this.name = name;   }    eat(food) {     console.log(this.name + \" is eat \" + food)   } }  var kim = new Human(\"kim\"); kim.eat(\"lamen\");  class Worker extends Human {   /*   constructor(name) {     super(name);   }  */   work() {     console.log(this.name + \" is working\");   } }  var lee = new Worker('lee'); lee.eat('pizza'); lee.work();  ES6 style inheritance‘class’로 상속을 구현한 코드다.      ‘extends’ 때문에 상속을 표현하는게 짧아졌다.   생성자를 자동으로 받아서 실행한다. (주석부분)   ‘super’ 키워드로 부모에 접근할 수 있다. (아래에서 소개)   class Parent {   constructor(age) {     this.dayOflived = age * 365;   }    ping() {     return 'ping!';   } }  class Child extends Parent {   constructor(age) {     super(age * 2);   }      pingpong() {     return super.ping() + ' pong!'; // super없이는 부모에 접근할 수 없다.   }  }  var papa = new Child(20); console.log(papa.dayOflived);  // 14600 var kth = new Child(10); console.log(kth.ping());      //ping! console.log(kth.pingpong());  //ping! pong! console.log(kth.dayOflived);   //7300  super exampleSuper의 사용예제     원래 7300일로 나와야할 papa의 dayOflived가 14600이 된것을 볼 수 있다. 자녀의 위치에서 age 변수를 2배로 바꿨다. 별로 좋은 예제는 아닌것 같지만 이상한 만큼. 이상한 동작의 원인이 될 수는 있다.   super.ping()을 통해서 부모의 함수를 호출한 모습을 볼 수 있다. 저 위치에서 super 없이는 부모객체에 접근할 수 없다. pingpong위치에선 this가 child를 보고 있다. super를 통해 부모에 접근하는 것이다.   super()를 constructor에 넣어주면 부모의 생성자를 그대로 실행한다는것을 명시할 수 있다.   ","categories": ["javascript"],
        "tags": ["javascript","language","inheritance"],
        "url": "/javascript/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%83%81%EC%86%8D",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "N-Queens 문제해결하기",
        "excerpt":"페어프로그래밍으로 하는 문제 중 가장 재미있는 시간이었다. 도전적이기도 하고 사실상 답이 정해져있는 다른 방법에 비해 자료구조를 동반하는 알고리즘은 방법에 제한이 없다보니 창의적인 방법을 시도하는 느낌이 드는게 굉장히 즐거웠다. 익숙하지 않은 남이 써놓은 구조체(코드)를 제한된 시간내에 빨리 파악하고 누군가 불친절하게 써놓은 코드를 거꾸로 해석해가는 것도 즐거운 작업이었다.   목표   N-Queens 의 목표는N * N 사이즈의 보드에 rook 와 queen을 놓는 경우의 수와 놓은 모양의 배열을 만드는 것이다. 내가 푼 방식은 비효율적인것 같긴하지만 OOP를 도전적인 문제를 해결하는데 재미있게 사용한 첫 경험을 제공해주었다.     사용한 자료구조   해결 과정  처음엔 절대로 사용하지 않을 자식은 생성하지 않는 구조를 만들다가 보드의 사이즈가 8을 넘기자 메모리 크래시를 경험할 수 있었다. 트리를 리프까지 채우기 위해 만든 메서드가 재귀인 문제의 원인이었다. Look든 Queen 이든 세로(컬럼)은 딱 한개의 말만 존재할 수 있다는 점을 이용해서 문제를 해결했다. 위의 빨간색 X 표시는 사용하지 말아야할 컬럼의 번호를 차일드에게 넘겨주어서 차일드가 재귀함수를 스마트하게 호출하게 한 덕에 만들지 절약한 메모리 공간이라고 볼 수 있다.   리프가 들고 있는 path는 Look의 배치도가 된다. 여기서 리프.path === N사이즈의 보드에서 모든 LOOK 경우의 수라고 보면 된다.   이제 만들어진 리프를 꺼내서 이번 과제가 제시한 목표를 클리어하면 된다. 아무 리프나 꺼내서 배열에 0,1 로 표시를 하면 된다. 이건 자료구조에 비하면 간단하다. 특히나 LODASH에서 제공하는 board Model은 배열에 값을 쉽게 반영하게 해준다. 원래 View, Model 구조를 알려주기 위해서 서비스로 넣은거라 생각했는데 생각보다 더 중요한 구조체였다.   Queens의 경우는 Look보다는 어려웠지만 더 빨리 풀었다. 처음엔 만들어진 path를 수동으로 파싱해서 대각선처리를 하려고 했는데 자신보다 높은 레벨의 대각선을 체크하는 문제에 직면하자 if 문 한 두개로 처리할 규모가 아니게 되었다. 그래서 일단 LOOK의 리프를 2중 배열에 집어넣고 대각선 체크함수를 활용하는 방법으로 우회하게 되었다.   개선할점      대각선 등 배열에서 충돌을 체크하는 함수가 약간 하드코딩된 느낌이 있다. 그래봤자 IF 두개 정도에 배열 사이즈에 영향을 전혀 받지 않을만큼 견고했지만, 배열의 성질을 활용하는 흥미로운 방법을 적용하면 더 흥미로운 코드를 만들 수 있을 것같다.   사이즈 1부터 사이즈 9까지 queens의 모든 가능성을 체크하는데 까지 1초가 걸렸다. (내 맥북이 13년형 인걸 감안하면 감탄스럽지만) 사실 OOP 대신 Queens나 Look가 보드 속에서 나타내는 성질을 활용하면 훨씬더 빠르게 문제를 처리할 수있다. (여기 OOP를 쓴건 닭잡는데 소잡는 칼을 쓴것같다)   ","categories": ["Algorithm"],
        "tags": ["Algorithm"],
        "url": "/algorithm/n-queens",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "React — props, state, life-cycle",
        "excerpt":"목표  리액트를 배울때 가장 많이 언급되는 개념 그중 props, state, life-cycle을 정리하는글이다.   리액트의 존재이유가 뭘까?     동적인 View 구현   그럼에도 코드를 줄인다. 이런 목표를 중심으로 라는 관점에서 위 세가지 키워드를 살펴 보고자 한다. 그전에 리액트의 가장 큰 단위인 컴포넌트를 짚고 넘어가자.   import React from 'react'; import ReactDOM from 'react-dom';  class App extends React.Component {   render() {     return (         &lt;div&gt;           &lt;h3&gt; WELCOME KOREAN MART &lt;/h3&gt;         &lt;/div&gt;     )   } }  ReactDOM.render(&lt;App/&gt;, document.getElementById(\"root\"));  리액트의 할아버지 코드다.      먼저 import  React 구조체 ‘react’ 와 리액트 라이브러리가 몰래 뒤에서 관리하는 가상의 DOM인 ‘react-dom’ 을 가지고 왔다.   class App 상속  App 은 convention 하게 리액트의 최상위 컴포넌트에 할당하는 이름이다. 이 안에 컴포넌트를 계속 nested 하게 구현하여 우리가 원하는 복잡하지만 간단한 코드를 만들수 있게 된다. 컴포넌트는? 간단히 생각하면 사용자가 만드는 HTML 태그이자 리액트 프로젝트를 쌓아가는 블럭이다.   render에선 다음은 우리눈에 보이게될 View를 설명하는 곳이다.  따라서 이곳 밖에선 이 View를 결정할 외적인 넣을 수 있다는 말이다. render 와 return 사이에는 렌더전 로직을 작성할 수 있다. 직접적으로 DOM은 아니지만 라이프사이클을 통해 매번 호출되어 로직을 작성할 수 있다. return 안의 문법은 JSX를 따르게 되는데 바닐라 리액트로 처리할때보다 코드량이 줄어드는 장점이 있다. 대신 Bable이 컴파일 해주는 단계가 추가된다. 디버깅할때 살짝 까다로워질 수 있다.   마지막으로 ReactDOM에 render 명령을 내려준 모습을 볼 수 있다. &lt;App&gt; 블럭만을 대상으로 했지만 실제코드에선 여러가지 블럭이 App에 딸려있으므로 프로젝트가 통째로 렌더링 되는 모습을 볼 수 있다.   Props   Props는 컴포넌트를 사용할때 할당시켜주는 Data다. 코드내에서 수정하거나 임의로 추가하는것이 금지되어 있다. 부모 컴포넌트로 통신할 필요가 있다면 State를 위로 올려주는 방법을 사용한다.   class App extends React.Component {   render() {     return (         &lt;div&gt;           &lt;h3&gt; WELCOME KOREAN MART &lt;/h3&gt;           &lt;OrderList title={\"&lt;&lt; inventory full &gt;&gt; \"} list={['Kimchi', 'Bulgogi', 'Bibimbab']}/&gt;           &lt;OrderList title={\"&lt;&lt; not enough item &gt;&gt;\"} list={['DON CASS', 'Asahi MACJU']}/&gt;         &lt;/div&gt;     )   } }  class OrderList extends React.Component {   constructor(props) {     super(props);     this.state = {done: false}   }    render() {     const mappingLists = this.props.list.map((item) =&gt;         &lt;Item SECRETKEY={this.state.done} key={item + \"key\"} item={item} item2={this.props}/&gt;     );      return (         &lt;div&gt;           &lt;h3&gt; {this.props.title} &lt;/h3&gt;           &lt;ul&gt; {mappingLists} &lt;/ul&gt;         &lt;/div&gt;     )   } }  구체적인 컴포넌트의 구조와 props의 운명   구체적인 컴포넌트의 구조와 props의 운명에서 title과 list라는 이름의 props를 내려줬다. 에선 그 이름을 잘 활용하고 있는 모습을 보여주고 있다. 아까전에 render와 return 사이에서 여러로직을 처리한다고 했는데 이 코드는 list를 map으로 돌려 중복되는 을 한번에 찍어내기위한 준비를 했다. mappingLists를 return 에서 {mappingLists}의 형태로 사용하고 있는 모습이다. 대신 Item에는 key값이 필요하다는 경고를 해준다. 그래서 key라는 props를 일부러 지정해주었다.   State   State는 컴포넌트 단위로 가지는 자료창고다. 자료창고의 자료를 꺼내서 Props로 내려줘도 좋고 이후에 나올 라이프 사이클에서 만들 수 있는 로직을 state에 반영한다거나 여러가지 동작이 가능하다. 다만 this.state로 직접 접근하면 안되고 setstate 로직을 사용하여야 한다.   class Item extends React.Component {   constructor(props) {     super(props);     this.state = {done: false}   }    onListItemClick(e) {     this.setState({done: !this.state.done})     e.preventDefault();   }    render() {     const style = {       textDecoration: this.state.done ? 'line-through' : 'none'     };     return (         &lt;div&gt;           &lt;li style={style} onClick={this.onListItemClick.bind(this)}&gt; {this.props.item} &lt;/li&gt;         &lt;/div&gt;     )   } }   위 코드는 각 done 이라는 state의 키값이 클릭에 의해 토글되는 로직을 구현했다. 일반 자바스크립트라면 동작하지 않을 내용이지만 render는 라이프사이클 또는 setstate가 호출될때마다 동작된다. 매 렌더마다 새로운 스타일을 입은 &lt;li&gt;가 렌더되면서 삭선이 첨가되었다가 사라지는 모습을 볼 수 있다. 토글의 상태. 이것을 관리한다는 의미에서 Satatefull한 컴포넌트라 부른다. state를 선언한 컴포넌트는 각자 이런 관리가 필요하다. 일부러 부모컴포넌트만 state를 가지게하면 자료의 일관성을 유지할 수 있다.   라이프사이클     리액트 컴포넌트 구조가 어떻게 관리받는지를 정리한 표   녹색으로 표시된 지점이 우리가 별도의 로직을 넣을 수 있는 메서드를 구현하 수 있는 곳이다. 렌더 전후, 컴포넌트가 DOM에 등장한 시점이나 사라지기전 여러가지 로직을 집어넣기 쉽게 준비되어 있다. 재미있는 점이 있다면 state changed 뒤에도 업데이트를 하지 않는 케이스가 있다는 점이다. 리액트는 상태변화를 DOM에 반영할지 안할지 판단함으로서 바닐라 DOM보다 우월한 성능을 보장한다. DOM은 조금만 엘리먼츠를 바꿔도 전체를 바꿔야하는 약점을 가지고 있다.   class Content extends React.Component {   constructor(props) {     super(props);   }   componentWillMount() {     console.log('Component WILL MOUNT!')   }   componentDidMount() {     console.log('Component DID MOUNT!')   }   componentWillReceiveProps(nextProps) {     console.log('Component WILL RECIEVE PROPS!')   }   shouldComponentUpdate(nextProps, nextState) {     return true;   }   componentWillUpdate(nextProps, nextState) {     console.log('Component WILL UPDATE!');   }   componentDidUpdate(prevProps, prevState) {     console.log('Component DID UPDATE!')   }   componentWillUnmount() {     console.log('Component WILL UNMOUNT!')   }   render() {     return (         &lt;div&gt;           &lt;h1&gt;{this.props.title}&lt;/h1&gt;         &lt;/div&gt;     );   } }   없는 라이프사이클은 구현해서 쓰면된다. IDE에 따라 자동으로 넣어주기도 한다.   ","categories": ["React"],
        "tags": ["javascript","language","Concept"],
        "url": "/react/react-props,-state,-life-cycle",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "AWS 서비스 S3, EC2",
        "excerpt":"Why AWS  AWS 클라우드 서비스가 빠르게 성장하면서 서비스 제공자가 서버를 소유하지 않는 서버리스 아키텍쳐가 많이 회자되는것 같다. 여기서 물리적 서버는 없을지 언정, 서비스를 제공할 그 무언가는 여전히 있어야 한다. 그 무언가를 볼려면 AWS 같은 곳에서 제공하는 컴퓨팅 제품을 보면 된다.   클라우드 컴퓨팅 제품 - Amazon Web Services  엔터프라이즈 앱, 클라우드 네이티브 앱 또는 모바일 앱을 구축하든, 인간 게놈의 서열을 결정하기 위해 대규모 클러스터를 실행하든, 조직의 구축 및 운영은 컴퓨팅으로 시작됩니다. AWS에서는 포괄적인 컴퓨팅 서비스…aws.amazon.com    레거시 환경에서 클라우드로   클라우드 사업자들은 레거시 인프라 패러다임에서 낭비되던 자원을 클라우드를 통해 묶는다. (서버든 네트워크 장비든) 그리고 그걸 1) 쪼개고 2) 사용자들에게 터미널과 3) 접근을 관리하는 도구를 만들어 제공한다. 이 그림은 클라우드란 말이 워낙 광범위해서 모두에게 적용시킬 수 또는 클라우드만의 개념은 아니다. 단지 VM 이후 고도화된 가상화 서비스들은 이렇게 동작한다고 보면 된다.   사진만 보면 OS단이 사라진것 처럼 보이지만 사실 클라우드전용 OS가 있다. 이를 통해 자원을 효율적으로 쓰게 해준다. CPU를 예로 들었지만 HDD 저장공간도 서비스의 대상이다. 10만원 주고 사서 언제 고장날지 모르는 1TB를 10% 정도만 쓰던 시대가 끝난것이다   이런 하드웨어적인 관점에서 이야기를 했는데 AWS가 제공하는게 이게 전부는 아니다. 멀리 떨어져있는 가상의 자원들을 잘 다루기 위한 도구들도 있다. 구글 Function, 람다AWS같은 서비스를 위한 서비스들은 서비스와 서비스 사이에서 교통정리를 할 수 있게 도와준다. 아주 컴퓨터 자원을 잘라서 나눠서 쓰는게 PaaS라면 직접적인 서비스를 제공하는건 SaaS다.   그럼 클라우드에서 사용할 수 있는 서비스는 뭐가 있을까. 친숙해 보이고 흔한 3가지를 조사해봤다.   S3   정적인 자원을 관리하기 위한 제품인 S3는 버킷과 키라는 개념을 단위로 자원을 표현한다. 예전에 블로그에 사진을 올리고 사진의 URL을 커뮤니티 홈페이지에서 링크로 올렸던 시절을 기억하는 사람이 있을것같다. (나중에 CORS 때문인지 안되긴 했지만) 아마존이 그 시절은 기억하는건 아니겠지만 저장된 자원을 원하는 형태로 노출시키고 사용할 수 있는 서비스를 S3로 만들었다. 이걸로 정적인 웹서비스를 할 수 있다. 아직도 어떤 게시판에서 이미지 업로드를 지원하지 않는다면 S3에 이미지를 올리고 링크를 걸어보는것도 한번 시도해보고 싶다.    S3를 활용하면 이렇게 자원을 요청하고 받을 수 있다. 지금은 없는 URI라 실패했지만   EC2   EC2는 S3보다는 이해하기 쉬운 서비스다. 기존에 많이 VMware같은걸로 윈도우에서도 많이 활용했었기 때문이다. EC2 인스턴스를 생성해보면 단순하게 OS에 접속할 수 있는 터미널을 제공한다. 들어가면 그냥 평소에 보던 CLI 가 보일것이다. 컴퓨터를 빌려쓴다는 초입부의 설명에 가장 일치하는 서비스는 바로 EC2일것이다.    스케일업, 스케일아웃을 지원하는 EC2. DB를 설치해서 쓰기도 한다.약간 IT덕후들만 알것같은 VMware가 아니라도 블루스택 같은 프로그램에서 가상화 OS에 자원을 할당하는건 이제 익숙한 풍경이 되었다. 최적의 CPU, 램, 렌더링 옵션 조합을 연구하는 게이머들 cheers!   RDS     자원을 객체처럼 찍어내고 할당하는 클라우드 시대의 풍경   RDS는 EC2에서 나머지를 모두 빼버리고 특정 RDBMS 만 사용할 수 있는 터미널과 부가적인 컨트롤을 제공받을 수 있는 서비스라고 보면 될것같다. 이른바 Managed Service다. 디비 뿐만 아니라 여러가지 서비스를 아마존은 자신들이 감싼다음 손쉽게 쓸 수 있도록 서비스를 제공해준다. 따라서 우리가 돌아가는 환경에 대해 전혀 신경쓰지 않아도 이미 RDS 인스턴스가 생성될때 설치 및 유지관리를 위한 셋팅이 다 되어 있다. 사용자는 RDS의 주소와 계정정보만 알면 RDBMS를 쓸 수 있게 된다. DB를 보통 서버에 설치하고 관리할때 온갖 이슈가 터져나오는걸 회상해볼때 정말 편리하다. 암호, 보안, 백업, 이중화처리 등에 대한 Best Practice를 GUI에서 클릭으로 하게 됬으니 말이다. 스토리지 크기 또한 스케일링 된다. 머리아프게 리소스예측하는것도 이젠 그만 ( 대신 AWS Billing 계산 )   ","categories": ["AWS"],
        "tags": ["PaaS","Concept"],
        "url": "/aws/aws-s3,-ec2",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 8월 26일 TIL",
        "excerpt":" 손그림      프로젝트에 바로 참여할 수 있을지 평가하는 날이었다. 재밌어서 ‘이런거 매주에 한번 하면 좋겠는데?’란 생각도 들었지만 정성적 평가를 못하는 경쟁을 하게되면 대외적으로 보이는것만 신경쓰는 문제가 생긴다. 좋은 설계나 데이터의 확보 보단 요구되는 스펙만 맞추는것이나 뭔가를 복사하는데 끌리게 된다.   js의 exports 를 잘 활용하지 못했다. module.exports.*의 패턴으로 사용하라고 권장이 되어있길래 그것만 쓰다가 대응을 바로 못했다. 어떻게 돌아가는지는 아는데 거기로 집어넣는 과정에서 헤매니 환장.   Http에서 클라이언트로 파일 내려주는 작업을 하는데 40분 정도 소모했다. JSON만 쓰다가 적응을 못했다. Buffer를 쓰는걸로 해결은 했지만 그게 뭔지 아직도 정확히 모르겠다. 그리고 다시 확인해보니 Buffer를 안써고 response에 바로 담아도 된다. 환장. 파일을 반환시켜주면 Content-Lenth 헤더를 Http가 당연히 써주겠지라고 생각한게 오착.   file-system 을 활용하는데 Path를 지정하는데서 환경변화에 대응을 잘 못해서 20분 정도 낭비를 했다. 경로의존적인 것엔 \\_\\_dirname 쓰면 된다.   CORS 처리를 서버에서 해도 브라우저단에서 막는 문제가 있다. 확장앱을 안켜고 크롬 Security 모드도 안끄고 처리해보려고 fetch에 mode:no-cors 옵션을 활용하려다가 이렇게 쓸 경우 다른 종류의 응답이 오고 프로미스단에서 에러가 난다. 다르게 처리를 해야한다는 사실을 좀 늦게 깨달았다.   React-Router를 처음 썼는데 설계의 패러다임이 또 바뀌는것 같다.   이미 써본것도 깔끔하게 한 큐에 안되고 한 두번 정도 버벅거리는게 전체적으로 작업진행속도를 늦췄다. 빠르게 제대로 하는 방법이 어디에 있지 않을까 고민은 해보지만 왕도는 없는것 같다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/TIL-number-1",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 8월 27일 TIL",
        "excerpt":"Dev     메일 서비스로 서버를 구성하는 방법에 대한 글을 읽었다. SES라는 이름으로 AWS에서도 사용할 수 있다. 메일 서버를 운영하는 곳에 메일 포맷의 데이터를 전송하는 nodemailer로 토큰을 발행하고 토큰이 인증 URL로 요청되면 값을 검증해서 사용자의 가입을 승인하는 구조다.   Atom 에디터를 마크다운 전용 에디터로 쓰기로 했다. 기존 Notes에 있던 내용을 전부 .md파일로 옮기고 커밋도 해가면서 .md로 리팩토링하면서 쉬었다. 내용도 읽으면서 다시 복습도 했다. 필요없는 내용이 추려지면 md파일을 퍼블릭한 github에 올리려고 한다.   개발자로서 삶과 사이드프로젝트, 창업 이런 키워드로 세션을 하나 들었는데 중요하다. 지금당장보다는 지금 부트캠프가 끝나면 훨씬 더 중요한 정보다. 여기서 기억에 남는 문장 ‘크고 부실한 프로젝트보다는 작고 단단한 프로젝트가 더 의미있다’   Culture      ‘청춘돼지는 꿈꾸는 소녀의 꿈을 꾸지 않는다’ 영화를 봤다. 이 픽션은 스케일이 굉장히 크다. 상대성이론을 운운하면서 시간여행도 하고 양자역학적인 아이디어를 거시세계에 적용한 걸 소재로 한다. 예를 들면 인간을 양자처럼 취급해서 관측하는 시점에 존재가 확정된다. 한마디로 이해하기가 힘든 ‘큰’ 이야기다. 그래서 잘 소화시키기가 힘든 이야기였는데 실패한 영화였다. (자세히 설명할 공간이 있는 소설은 훨씬 좋으리라고 생각한다)   그렇게 보고 집에 오면서 오늘 들은 세션이 떠올라서 다짐했다. “단단하고 작은 프로젝트를 해야겠다. 쓰레기를 만들면 안되겠다”  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/TIL-number-2",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "자바스크립트 오해풀기 — Object",
        "excerpt":"그 동안 자바스크립트 공부를 하면서 명확하게 잡히지 않았던 것들만 골라 경험담과 함께 시리즈로 정리하려한다. 카페트 밑의 먼지 마냥 급하진 않았지만 거슬리는 기본적 개념, 근본적인 동작의 이해에 대한 갈망을 이번 시리즈로 해결하고자 한다.   자바스크립트는 Object가 알파가 오메가다. 그리고 그 옆에는 프로토타입이 따른다. 그런데 가끔 &lt; — .prototype&gt; 에 메소드를 구현해 인스턴트를 취미에 맞게 쓰거나 메서드와 argument의 위치를 바꾸는 정도로만 쓰는 정도다. 그리고 그 원리에 대해선 __proto__를 타고 chain으로 호출에 반응한다는 정도다. 그 이외에 안에서 벌어지는 일은 내게 흐릿하다. 특히 다이어그램에서 나오는 생성자나 이란 프로퍼티를 보면 더 그렇다. 그리고 자바 스크립트의 많은것들이 함수로 되어 있다는 점은 더 그렇다.   Object는 함수..? 이것을 중심으로 자바스크립트 의 구조를 이해해보자String, Number, Array 내가 자료타입으로 알고 있는건 모두 함수로 나온다.   construct클래스 언어는 상속받은 내용을 각 객체가 다 자기만의 버전으로 들고 있다. 프로토타입 기반 언어는 prototype의 내용을 모든 상속받은 객체들이 공유한다. __proto__ 체인을 통해서 말이다.   String 은 내장객체이므로 이미 구현된 메서드들이 보인다. Person 함수를 통해 String 같은 수준의 객체원형을 만들어 냈다. 아무것도 없고 new 때문에 실행된 constructor만 보인다.   console.dir(Person)Person 함수를 분해해보자&lt;__proto__&gt;가 f() 를 가르키고 있다. 이건 즉 Person은 function 키워드를 받으면서 자신의 조상으로 태초의 함수 f()를 지정받았는 이야기다. 그 증거로 모든 함수가 다 들고 있는 arguments, caller가 보인다.    그리고 눈에 띄는게 바로 &lt; prototype &gt; 프로퍼티다. prototype는 설계도에 해당한다. 설계도인 prototype은 Object를 자신의 조상으로 고백하고 있다. 즉 끝까지가면 다 Object다.   자신의 출생지 신고서자바스크립트에서 constructor는 객체는 뼈와 살을 가르킨다.   Person은 함수였지만 객체지향처럼 사용한다. 어디서 console.dir을 찍든 &lt; __proto__&gt; 로 고백받는, 모든 객체들의 어머니라는 Object가 함수인게 이제는 이해가 간다. 이게 자연스러운거다. 자바스크립트는 모든것이 함수를 형태를 한 최초의 유전자(?) Object의 유지를 이어받은 Object 부족인것이다. 이 부족원들의 직접적인 출생증명은 &lt; prototype &gt; 프로퍼티에 적혀있다. kth의 출생증명서인 prototype 또한 Object 이니 만물이 Object다.   이야기로 다시 풀어보자.   Person의 인스턴스로 태어난 kim. 이름만 가진 홀몸으로 태어나 __proto__ 쪽지 하나만 믿고 쭉쭉 따라가니 Person이라는 prototype(조상)님이 기다리고 계셨다. 조상님도 프로퍼티 하나 없는 청렴한 native 느낌의 객체였지만 중간에 주름시술을 받아서 myjosangnim이란 프로퍼티가 생겼다.   그렇다고 kim이 시술을 받은건 아니였지만 그 소식을 듣고 다시 자신을 조상을 찾아가보니 프로퍼티가 생긴걸 보게된다. 물론 자기는여전히 빈털털이 였지만 조상님의 비밀에 접근하게 된건 쓸만하다.   ","categories": [],
        "tags": [],
        "url": "/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%98%A4%ED%95%B4%ED%92%80%EA%B8%B0-Object",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 8월 28일 TIL",
        "excerpt":"#Code      redux 입문  전역에서 사용가능한 state를 얻었다는 기분이 드는데 이 state는 업데이트를 해도 리액트의 렌더는 일어나지 않는것 같다. Mount, State도 관련이 없는 독자적인 일이니까 당연한 일이다. (그런데 이건 react 기준이고 또 react-redux를 쓰는 지금은 자동으로 뭘 하고 있을지도 모르겠다. 구독같은 기능으로 독자적으로 처리를 하고 있다.) 그래서 나름 뭔가 바꿨는데도 업데이트가 되지 않는 문제가 발생했다. 강제 렌더링 명령이 있다는데 ‘강제’라고 하니 쓰기 싫고 자바스크립트로 수동으로 DOM을 조작하지 않고 바꿔보려고 하다가 오늘은 일단 작업끝.   React router, redux를 함께 쓴다면 어떤 설계를 해볼 수 있을까. 그렇게 될 경우의 수가 복잡해지는것 같다. 이전에 그냥 데이터를 흘려보낼것만 생각해서 컴포넌트를 짤 때는 코드는 복잡해도 설계는 단순했던것 같은데. 그렇다면 router가 최우선이 되어야 할것같다. URL로 사용자가 원하는 데이터가 보이는게 보장이 되어야 하니까 말이다.   redux는 DOM을 한번에 render하는 한다고 하는데 그러면 리액트의 장점. 최대한 DOM렌더를 억제하는 기능과 대치하는것 아닐까? 검색해보니 리듀서에서 퓨어함수를 강조하는 이유가 바로 render 이슈 때문이다. 그리고 그렇게 성능에 영향을 미치지도 않고 디버깅이나 구조개선에는 너무나 압도적 이득을 주기 때문에 안쓸이유가 없는듯하다. 하나의 기능을 위해 몇 단계의 추상화를 거치는게 번거로울뿐.        직접 수정을 하면 안되는 객체들을 다루는 방법으로 object.assign를 시도 했는데 뭔가 익숙하지 않아서 한시간 정도 헤매다가 결국 비구조할당으로 돌아왔다. 내일은 immutable.js를 시도해볼 예정이다. Nested 한 구조에선 쓸 수 밖에 없을 것같다. #Life       한달넘게 엄청 푸시하면서 공부하다보니 요즘 낮에 체력이 바닥이 되어가는 기분이 점점든다. 오늘부터 7시간 잘거고 질펀하게 운동도 한번   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/TIL-number-3",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 8월 29일 TIL",
        "excerpt":"DEV     Redux Todo를 완성했다. UI도 항상 손수 CSS를 하다가 오늘은 ant-design을 적용시켜봤다. 리액트 컴포넌트를 준비해서 주니까 퀄리티도 속도도 엄청나게 개선됬다. 처음으로 볼만한 UI를 완성시킨것같아서 기분좋았다.   버그가 많은 경우 props나 액션의 이름에서 나는것 같다. 잘못 지정을 해줘도 에러가 나지 않고 그냥 반쯤 동작을 하다가 말뿐이고 뭘 찍어봐도 undefined가 뜰뿐이니 원인을 찾기가 쉽지가 않다. 디버깅을 용이하게 할 네이밍방법이나 코드습관도 중요하겠지만 아마 이런 문제를 해결하기 위한 방법이 있을것같다. (내가 모를뿐)   사실 아직 익숙하지 않아서 그런거고 또 하루 정도만 익숙해지면 속도가 나니 반복하면 좋아질것 같다.   처음엔 CSS가 너무 불편하고 그랬는데 반나절 정도 붙잡고 씨름하는걸 3–4번 정도 하고 나니 대충 어떤 문제가 생겼을때 원인을 추적하고 적당한 솔루션을 찾는 속도가 빨리 붙는것 같다. CSS를 하면서 제일 답답한게 뭘 바꿔도 아무것도 바뀌지 않을때가 참 많다는 건데 그 안되는 이유를 하나하나 예측할 수 있게 된것 같다. 여러가지 베스트 케이스를 눈여겨봐놨다가 나중에 재치있게 짜는것도 조금씩 하기 시작했다. padding, margin, border-radius, flex 하나씩 유연하게 쓸 수 있게 되었다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/TIL-number-4",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 8월 30일 TIL",
        "excerpt":"Dev     MergeSort 알고리즘을 풀었는데 예상보다 잘 풀렸다. 처음에 재귀함수를 접할때 어쩔 줄 몰라했던걸 생각하면 큰 진전이다.   오늘 처음으로 팀프로젝트를 시작했다. 프로젝트를 하기 전에 해야할 많은 설계들과 팀원들이 가진 아이디어를 통합하고 팀이 지향하는 바를 합의하는데 많은 시간이 들어갔다. 설계한 대로 제대로 될지는 미지수지만 실패를 해도 이런 과정 속에서 제대로 협업을 하는 것이 어떤것인지 알아가는 과정이 될 수 있으리라 기대한다.   지금까지 배운것들을 잘 활용하는걸 프로젝트의 뼈대를 삼았고 거기에 챌린지한 요소로 서버에서 데이터를 가공하고 스케쥴을 돌리는것과 타입스크립트를 적용하는걸 계획했다. 익숙한걸 조금씩 다르게 복습하는게 중요하다는 생각이 든다.   기술스택을 조사하다가 ElasticSearch, Redis, TypeScript, GraphSQL 같은 이름들이 많이 보였다 .백엔드에 데이터 과학적인 관점을 요구하는 구인들도 많이 있었고 앞으로 많이 많이 배울것도 있고 해볼수 있는것도 많아서 기대된다.   life     목이 급격하게 아프기 시작해서 노트북 스탠드도 사고 트랙패드, 기계식키보드도 마련을 했다. 비싼 액세서리이다 보니 이 컴포넌트들을 잘 활용하려면 다음은 아이맥이 필요하겠다는 생각이 든다. 미리 샀으면 좋았을걸. 건강에는 미리 투자해야겠다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL3",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 8월 31일 TIL",
        "excerpt":"Dev     프로젝트 2일째, 업무를 분담하고 Server/Client의 기본적인 프레임을 짰다. API문서를 좀 더 치밀하게 짜야할것 같긴한데 하다보면 또 내용이 바뀔것 같기도 하고 어느게 적정선을 찾기가 힘들다. 각자 의견을 존중해 프론트랑 백을 구분하지 않는데, 분업경험을 유지하기 위해 자신이 서버로직을 만들고 자신이 요청하지는 않도록 과업을 배분했다.   React Router를 사용하니까 분업의 그림이 그려졌다. 이게 없으면 어떻게 했을까 걱정이 된다. redux가 컨플릭트를 예방해줄 수 있을거란 생각이 들었었는데 (이번에 도입은 안했다) 이렇게 하나씩하나씩 쓰다가 SAGA같은것도 쓰게 되는걸까.   원래는 TYPEscript를 쓰고 싶었는데 이번에는 아는 기술을 견고하게 단련하고 협업경험을 쌓는다는 목적에 집중하기위해 포기했다.   뭔가 코드를 계속 치고 싶은데 이것저것 설정하고 한번에 처리할 방법을 고민하는게 나는 살짝 마음에 안들었다. 필요한 비즈니스 로직만 계속 칠 방법은 없을까. PM일도 살짝 싫다. 관리가 재미를 주는 지점도 있긴하지만 역시 뭔가 두들기고 있을때가 확실하게 즐겁다.   Life  목이 뻐근하던게 이제는 어깨로 내려오기 시작한다. 그래도 택배로 도착한 장비들로 디스플레이 눈높이도 맞고 꾸준히 스트레칭도 하고 일단 고개를 들고 있는 시간을 좀 줄이면서 차후를 봐야겠다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL4",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 3일 TIL",
        "excerpt":"Dev     프로젝트는 상상한대로만 굴러가지 않는다. 그럼 해야할건 뭘까. 상상대로 굴러가지 않아도 괜찮은 방법을 선택해야 한다. 어떻게 하면 상상대로 굴러가지 않아도 조급하지 않은 마음으로 지치지 않는 마음으로 목적을 달성할 수 있을까.   일단은 중요한 일을 구분지어서 전체적인 흐름을 달성시키고 목적을 달성가능한 수준으로 다시 재설정하는게 첫 단계일것같다. 초조해지고 절망에 빠지지 않도록.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL5",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 4일 TIL",
        "excerpt":"Dev     과업을 선정할때 사용자가 필요한 부분부터 하는게 먼저라는 원칙을 다시 또 배웠다. 어제는 NAMSE 개발자분, 오늘은 박근핵닷컴 서버 이야기를 들으며 든 생각이다. 그래야 만드는 사람도 즐겁고 쓰는 사람도 즐거울 수 있는것같다. 이 원칙에서 어긋나는 것들은 대부분 있어보이고 싶다는 생각이거나 내가 배운걸 실전에서 써먹어야 겠다는 생으로 오버 엔지니어링하면서 생겨났었다.   같이 일하게 무섭다. 일심동체가 되어서 서로의 작업 영역을 건들지 않아야 하는데 그런게 가능한건지. 기준을 혼자서 높게 잡은건가.   충돌을 내지 않고 또 PR을 했을때 알아보기 보기좋고 남들이 유지보수하거나 고쳐쓰기 좋은 디자인 패턴을 찾아내야할것 같다. diff를 볼때 파악이 안되서 리뷰를 하기가 힘들다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL6",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 7일 TIL",
        "excerpt":"Dev     회사협업 이야기를 들었다. SCM 관련 프로젝트를 맡긴다는 이야기를 듣는순간 살짝 갸우뚱   오늘은 이 코드 때문에 애를 많이 먹었다.     let list = [\"태훈\"]; let result = {}; list.forEach(ele =&gt; {result[\"\" + ele] = (Math.random() * 100).toFixed(2)}); console.log(result);           프로젝트를 할때는 적당한 러닝커브가 있어야 한다고 생각한다. 당장 돈 받는것도 아닌데 너무 보수적으로 하다간 피본다. 그래서 따지고 보면 그래서 지금은 지겨울 정도로 잘하냐?라고 물어보면 그것도 아닌데. 익숙하기만 하고 못하는 상태를 견뎌내는것도 노력이고 투자라고 생각해야겠다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL7",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 9일 TIL",
        "excerpt":"Dev     오늘은 다사다난했다. 격렬하게 스프린트 회고도 하고 5시간 정도 같이 모여서 배포랑 디버깅, 포스트맨의 활용을 연구하면서 쿠키공부도 하고. 이런 시간들이 그냥 코드치는것보단 재미있는것 같다.   포스트맨을 연구했다. 포스트맨의 테스트모드로 들어가서 셋팅해놓은 쿠키를 사용하지 않음으로 체크해놓으면 가입부터 서비스 그리고 로그아웃까지 모든 API를 돌려보면 다 테스트를 해볼 수 있어서 참 보기도 좋다. API문서로 출력도 된다. 셋팅해놓은 쿠키를 쓰는것도 개별 기능에서 세션ID를 가정하고 테스트하기에 유용하다. 설정해놓은 리퀘스트를 공유할 수도 있으므로 필수적인것같다.   쿠키흐름에 대해 공부해봤다. 서버가 판단하기에 쿠키를 내려주기에 적당하다고 생각되면 set을 키로 가지는 쿠키 객체가 내려간다. 그럼 다음 통신에서 클라는 그 쿠키를 그대로 들고간다. 물론 그 쿠키를 들고갈지는 클라이언트 단에서 결정할 수 있다. credential 옵션으로. 이런 흐름은 철저히 CORS와도 연관이 되어 있어서 언제든지 통신환경이 변할때마다 언제든지 튀어나 올 수 있다는 점이 흥미롭다. (까다롭다)   SQL쿼리를 짜는데 오늘 시간을 좀 썼다. MYSQL의 경우 지원해주지 않는 함수가 꽤나 되다보니 그걸 억지로 구현하면 쿼리가 금방 지저분해진다. 오늘은 3개 테이블을 풀조인해야하는 일이 생겼는데 좀 처럼 감이 오지 않았다. 나는 풀조인이 익숙하다. 풀조인은 포기하고 느낌가는 방향으로 3개를 조인해놓고 WHERE로 하나씩 소거해가면서 내가 원하는 결과값만 나오는 방식으로 만들어보는 방향으로 진행을 했다가 실패. 결국 차분하게 말로 수두코드마냥 문장으로 쓴다음 문장을 SQL로 옮겨쓰는 전략을 해봤는데 그게 통했다.   사실 ORM을 쓰고 있는데 일부러 쿼리를 짜게 된건 ORM DDL이 잘 셋팅이 안되서다. 쿼리를 다 짜놓고 나니 호기심이 생겨서 다시 ORM 셋팅을 뒤집어보고 붙여보고 질문도 하고 하다가 이게 처음에 DDL을 실행할 순서가 꼬여있다는 결론에 이르렀다. exports할때 Association할 대상들이 제대로 캐쉬에 올라와있지 않아서 에러가 발생 했었던것. 더군다나 그런 문제를 회피하기 위한 모듈실행 패턴들이 있었는데 제대로 구현을 안해놔서 지금까지 그냥 놀고 먹고만 있었던 코드들을 발견했다.   프로그래밍을 계속 고생하면서 감을 유지켜야하는 영역을 만나게 되는것 같다. 어설프게 여기저기서 익히고 잊고 배우고 잊고 하면 나도 괴롭고 현실도 괴롭다. 결국 어딘가 구멍을 깊게 파야할 시점이 오는것같다. 그래서 풀스택이란 말이 참 멀게 느껴진다. 나는 뭘까..?   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL8",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2주 프로젝트 회고",
        "excerpt":"반성           처음엔 아이디어가 재미있었고 내가 의미있다고 생각했었다. 엄청나게 많은 기획을 하고 여러가지 기능들을 상상해냈다. 그렇지만 3만에 현실적으로 무엇을 할 수 있는지 측정하고 청사진을 수정해나가는 작업을 시작했다.            그러다 중간부터 작업이 지루하게 느껴졌다. 지금 하는 작업을 어떤 참고문서도 안보고 버그도 없이 진행할 정도로 내것이 된건 아니지만 클라이언트에서 요청하고 서버에서 요청을 컨트롤하고 DB가 상태를 관리한 구조가 틀이 잡히자 뻔하다는 생각이 들었다. 내 프로젝트는 그냥 CRUD 노가다 프로젝트인가. 다른 팀은 AWS에서 새로 서비스를 프로젝트에 붙이거나 SSL같은 이슈들을 접하고 고민하는게 보일때마다 마음이 복잡했다.            그냥 복습하는 프로젝트란 말을 곧이 곧대로 받아들여서 정말 새로운 스택하나 없이 들어온게 후회가 됐다. 냉정하게 보면 여기서 뭘 넣든 오버엔지니어링이다. 그러나 억지로라도 그런걸 하는게 학습프로젝트의 의미 아닐까 생각이 든다. **프로젝트를 하면서 각자가 만족할 수 있는 새로운 학습과제들을 선정할 수 있어야 한다는 결론을 내렸다. **(그러나 실제로 서비스를 하는데 집중하다보면 오버엔지니어링도 할 틈이 없을것이다. 우리팀을 포함해서 여러 팀들이 토큰을 쓰긴했지만 주고 받기만 했지 엄격한 보안을 구현하진 않았다. 가시적이지 않아서 그랬던것 같다.)            내가 만족하는게 쉽지가 않은것같다. 프로젝트가 사용 가능한 궤도에 오르자 왜 그렇게 이걸 만들고 싶었을까 생각이 들었다. 그러나 시간이 지나면서 점점 애정이 들고 이런건 다른곳에서 본적이 없고 특이한 구석이 많다는 확신이 드니까 괜찮아졌다. 이머시브 과정이 끝나면 나의 사이드 프로젝트로 이어나가야겠다는 계획이 섰다. 저작권은..(?)            프로젝트를 시작하기 전에 내가 마일스톤으로 삼은게 있다. 바로 데모가 지루하지 않고 발표하는 사람들이 생기가 있었으면 좋겠다는 것이었다. 그래서 그런 느낌을 목표로 PT를 준비했는데 2주 프로젝트 서비스 자체가 사람의 재치를 발휘할 수 있는 서비스라서 나름 재미있게 발표를 한것같다. 나 혼자 재밌었는지는 모르겠지만 (팀원들이 재치있는 글을 준비했다)            마음이 괴롭고 그래도 어떻게 추스려서 멈추지 않고 잘 달린 프로젝트였다. 뭔가 나에 대해 배운게 있다면 1) 별 수 없는 자책을 한다. 2) 제대로 하지도 못하면서도 지금하는게 뻔하다는 마음을 품는다. 그런게 내 심리적 약점이란걸 알 수 있었다. 이미 이건 잘 알고 있긴 했다. 남들과 다른 길을 걷고 싶다면 그게 남이 감동할 수준이 되어야한다. 쉬운게 아니다.         4주 프로젝트를 시작하며   다짐          프로젝트 구성원들이 만약 지루하다고 느낀다면 인위적으로 오버엔지니어링을 해야겠다. 물론 때 이른 걱정이다 . 어차피 이번에는 새로운 스택들이 들어간다. 리액트 네이티브부터 타입스크립트, 파이썬, AWS, d3.js 지루할일은 거의 없을것 같다. 이번에 사용자 있는 프로젝트를 하겠다고 큰소리를 쳐 놓은 상태에서 새로운 스택을 쓰는게 약간 불안하긴 하지만 하지만 일정이 늦어지더라도 학습 프로젝트의 성격은 지키는게 맞다고 판단한다.            문서를 잘 써야 한다. 구성원들이 동의한 합의점이 무결성을 유지하면서 쉽게 조회할 수 있는 문서체계를 갖추어야한다. 끝없이 프로젝트의 비전에 대해 팀들과 잡담을 나누면서 조금만한것까지도 고민할 볼필요가 있다. 어차피 코드만 너무 짜는것도 프로젝트 전체를 볼때 의미가 크게 없다. 코드를 10% 더 많이 적는것보다 10% 더 프로젝트 방향과 깊이에 대해 고민하는게 더 큰 도움이 될것 같다.            이번에도 재미있고 활기있는 PT를 하고 싶다. 왜 그런 목표에 끌리는지 모르겠는데 4주 프로젝트 발표하는 사람들이 항상 장례식에 온 표정을 하고 있어서 늘 불쾌했다. 그런 컨디션으로 코드를 어떻게 짜는걸까?       ","categories": ["devlog"],
        "tags": ["retrospectives","Diary"],
        "url": "/devlog/2%EC%A3%BC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 16일 TIL",
        "excerpt":"Dev     4주 프로젝트가 시작했다. 오늘은 팀이랑 첫 오프라인 미팅을 했다. 어떻게 협업을 할지 툴을 공유하고, 프로젝트의 서비스 플로우에 대한 비전을 맞춰나가고 문서로 작성해나가는 작업을 하루종일 했다.   스택이 정해졌다. 사용자가 임의의 형태로 지정한 자료를 업로드하는 서비스를 구상했는데 어떻게 변화무쌍한 자료를 처리할지 고민이 생겼고 NOSQL이 채택되었다. 리액트 네이티브를 일단 쓰되 모바일만 고려해서 심도 있게 짤지 웹뷰를 통해 Desktop을 지원하는 범용적 서비스를 만들지 고민했고 웹뷰를 선택했다. 그 외에 인프라쪽에서도 Route53, CDN, AWS-Recognize 등 프로젝트 성격에 맞는 서비스들을 도입하기로 했다.   life     집이 단수가 되어서 어제 오늘 씻지도 못하고.. 급한대로 변기뚜껑안에 저장된 물을 쓰는 해프닝이 있었다. 아까전에 고쳐졌다는 연락이 왔는데 기적이라고 밖에 볼 수 없는 문명의 혜택을 다시금 회고하는 시간이었다. (피터슨은 문명 인프라의 기적성을 제대로 볼 줄 알고 감사해야한다고 강조하는데 나도 이제 체화가 되었다.)  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL9",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 18일 TIL",
        "excerpt":"Dev     프로젝트 구현에 필요한 학습량을 약간 줄였다. 뭐 지금 쓰는것도 잘 못하는걸 상기하면서 반성하면서 한달을 진행해야겠다.   Django, Rest-Framework를 자료를 봐가면서 구현했다. secret 정보를 네임드스페이스에 집어넣고 나중에 꺼내쓰는것도 구현했다. 모든게 익숙하지 않아서 한단계 넘어갈때마다 재밌다.   원래 Atlas에 DB를 빌려쓰려다가 TLS를 요구해서 EC2에 설치해서 쓰기로 했다. 설치가 제대로 안되서 mongod.conf에 집어넣은 설정을 제대로 못읽는 문제가 있긴한데 이래저래 부딪치면서 결국 돌아가게 하는데는 성공했다.   RestFramework 앱안에 여러가지 앱이 있을 수 있는 점에서 특이했다. 폴더구조가 어플리케이션의 설계에 크게 영향을 미친다는게 약간 깝깝하기도 하다. 아직 로직이 안들어갔지만 S3에 업로드하고 자원의 주소를 DB에 넣는 작업을 하려고 했는데 어떻게해야할지 감이 안온다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL10",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 19일 TIL",
        "excerpt":"Dev     장고 갈아엎고 플라스크로 다시 시작했다. 장고에서 rest-framework와 mongoenine이 묶여있는걸 사용했었는데 나중에 알고보니 3년동안 갱신이 없었던 프로젝트였다. 그래서 마음이 불안불안하던차에 django에서 만든 모델들이 반영이 안되는데 특정 필드이름만 인식되는 문제가 생겼는데 해결책이 안보여서 좀더 직관적이고 하이코드에 가까운 flask로 바꿔탔다. 3시간만에 장고로 헤매면서 구현한곳까지 구현했다. node.js에 익숙하다면 첫 웹서버는 flask다.   무척 피곤해졌다. 그 동안은 11시 반까지 하면 오래한거라 생각하고 집에갔다. 바로 잠은 안자더라도 쉬는 시간이 있었다. 지금은 12시 30분까지 거의 한계까지 몰아붙이고 해서 집에가면 그냥 씻고 불을 꺼놓고 선풍기로 바람으로 말리다가 마르면 잔다. 이렇게 일주일을 하니 머리가 약간 뇌졸증이 올것마냥 살짝 지끈거린다. 아무래도 이런 라이프스타일은 오래할게 못되나보다. 구로등대에서 과로사하는 사람의 컨디션이 이런걸까하고 뭔가 졸리는건 아닌데 머리가 멍하다. 컨디션 회복될때까지 9시10분에 땡치고 집에가서 영화나 봐야겠다. 번아웃오기전에 회복해야지.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL11",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 20일 TIL",
        "excerpt":"Dev     OAuth 를 구현하려고 여러가지를 알아봤다. 토큰을 가지고 여러가지를 해볼 수 있는거라 간단한 작업만 하려고 한다면 쉽게 사용할 용도로 만들어진 라이브러리를 써서 한없이 쉽고, 그런 것에 의존하지 않고 모든 절차를 다 직접하려 한다면 어렵다면 한없이 시간이 오래 걸리는 이슈였다.   파이선 모듈과 패키지, 동작환경에 대한 이해가 부족해서 폴더구조가 깔끔하지 못하고 코드가 깔끔하게 보이지 않는게 불만이다. 지금 당장은 기능이 급해서 무시하지만 점점 익숙해지면 처리할 기회가 생길것같다. 실행환경이 꼬였을때 생기는 에러는 정말 불편하다. 개인적으로 코드스타일은 파이썬이 마음에 들지만 pip은 npm처럼 package.json만큼 편리하지 않은것 같다.   life     몇 일 연속으로 늦게까지 남아서 작업을 하다보니 엄청 피곤해져서 오늘 낮엔 도저히 안되겠다 싶어서 낮잠을 잤다. 잠자는 양은 똑같았는데 문제가 생긴걸 보면 아무래도 집에서 긴장을 풀고 있는 시간이 필요한것 같다. 오늘은 3시간 빨리 집에가서 맥주라도 먹고 영화라도 봐야지.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL12",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 21일 TIL",
        "excerpt":"Dev     실수로 깃이 꼬여서 origin에 있는걸로 다시 시작하려고 하다가 깃에 ignore 해놓고 쓰던 secret.json을 지워버렸다. 따로 백업할 방법도 생각하지 않고 쓰다 보니 삭제 되버렸다. 여기저기서 복사해서 쓰던 토큰키들을 다시받는건 어려운건 아니지만 rm을 이제는 쓰지 말아야겠다. 다짐한다. 무조건 백업한다. 조금 안깔끔해도 괜찮아.   이번 프로젝트는 S3에 파일을 쓴다. 처음에 서버에서 다 처리하려고 하던걸 클라이언트에서도 하는걸로 로직을 변경했다. 처음에 안 알아보고 다 서버에서 하는게 안전하다고 생각하던게 착오였다. 처음에 공부하는 시간을 30분씩 가지면서 소프트웨어 스택을 구성할걸 그랬다. 그냥 당연히 상식이란걸 믿고 하다가 작은 삽질을 했다.   파이선은 모듈관리가 너무 불편하다. requirement에 내가 써주지 않으면 관리도 안된다. 자동화 하도록 스크립트를 짜야하나. 뭐 날릴때 마다 빨간게 두렵다.   #life     어제 두시간 반 정도 일찍 들어가서 맥주 먹고 좀 긴장을 풀다가 잠들었는데 훨씬 몸상태가 좋다. 아무래도 잠보다도 뭔가 긴장을 푸는게 필요한것 같다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL13",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 23일 TIL",
        "excerpt":"Dev     인증키를 통해서 클라이언트단에서도 S3로 파일을 올리고 서버에서도 S3와 통신을 하게되었다. OAUTH를 통해서 여러가지 인터넷 사업자들의 정보가 손쉽게 연동이 되는걸 보면 그럼 도대체 나는 어떤 개발자가 되어야하는걸까 두려워진다. AWS congnito로하면 훨씬 단단하고 범용성있는 모듈을 안쓰는 대신 돈을 끼려고 자체적인 서버로직을 만드는 사람인걸까. 아니면 오픈소스로 나와있는걸 가져다가 조립하는 사람일까. 개발자의 미래는 높은 분들이 만든 논리를 조립하는 사람이 되는건가. 비참하지 않고 즐길 수 있고 스스로 만족할 수 있는 일이기를.   AWS는 자원을 관리하는 기술이다. 그리고 그게 하나하나가 다 돈이다. 그리고 전문가가 아닌 입장에선 그걸 깊게 이해하는데 한계가 있다. 때문에 이것도 Oracle 엔지니어링처럼 사용자에 맞게 고쳐주는 서비스의 수요가 있을것같다. 오랫동안 살아남을 기술이고 전문화되면 꽤나 괜찮지 않을까. 마치 회계처럼 말이다. 그 원리와 필요성은 이미 아주 단단하게 잡혔지만 그 컨트롤은 아주 사람들마다 숙련이 달라서 계속 재밌게 도전할 수 있는 기술. 나도 흥미롭긴 하지만 아직은 이머시브가 끝나지 않은 입장에서 자신의 가능성을 쳐내는건 두렵다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary","회계"],
        "url": "/til/P1-TIL14",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 25일 TIL",
        "excerpt":"Dev     Spint2 가 끝났다. 6일을 했는데 너무 길었다. 도대체 우리가 뭘하고 있는건지 어디로 가는지 합의된 목표의식이 팀에 있어야 했는데 그냥 기계적으로 코드만 짜고 있었던것 같다. 이제 스프린트는 무조건 4일 단위로 하기로 했다. 처음에 생각한 목표가 흐려지더라도 다시 붙잡을 수 있도록! 이게 중요한것 같다.   CORS문제가 또 발목을 잡는다.   OAuth를 한다는건 단순히 로그인만 하는게 아니었다. 대형회사들의 체계에 편입되는 것이기도 한것같다. 과연 나는 어떤 개발자가 되어가는 건지 많은 생각이 들었다. 벽돌을 조립하고 있는게 개발자인건가? NAMSE 님이 개발자를 요리사에 비교한것이 자꾸 생각난다. 나는 사람들에게 요리를 해주는 요리사가 되고 싶은 걸까. 요리사를 위한 작물을 만드는 농부가 되고 싶은걸까. 둘다 마음에는 있다. 하나는 단단한 벽돌로 가는 길이고 하나는 화려한 표현가가 되는 일인것 같은데 말이다.   life     지금 당장 큰 문제는 낮에 100% 컨디션이 안나온다는 점이다. 사람이 문제를 잘 해결하려면 같은 방식으로만 문제를 자꾸 풀려고 해서는 안된다. 지금 문제를 푸는 방식이 제대로 된건지 스스로 메타적 사고를 할 수 있어야 하는데 피곤하면 이게 안되고 자꾸 안되는 방법을 자꾸 시도하게 되는것 같다. 컨디션을 최상으로 끌어올릴 필요가 있다.   밤이되면 약간 좋아지고 작업이 몰입되기 시작해서 늦게까지 하는게 반복된다. 이제는 이 악순환을 진짜 끊어야될때가 왔다. 11시 되면 슬랙에 이제 작업 그만하라고 다음날 술취한 기분으로 작업하는 일없어야 한다고 질리게 말할 예정이다. 이런 강행군도 부트캠프니까 할 수 있는거니까. 재밌게 즐겨봐야지.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL15",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 26일 TIL",
        "excerpt":"Dev     그냥 아무생각 없이 잘하겠거려니 하고 생각하고 있다가 팀원이 기대한거랑 다른걸 들고와서 쪼매 화가 났다. 코드 리뷰하면서 뭔가 안풀리는거 있으면 같이 풀고 잘 보이지도 않는 코드 설명이나 하다가 정작 중요한 개발 방향에 대한 검증은 하나도 못했다고 생각하니 삽질한 기분이다.   그래서 대안은 매일 5분이라도 완성된 솔루션을 보면서 지금 안된게 뭔지 해야될게 뭔지 방향성을 공유하는 작업을 하는것인것같다. 매일 아침에 해야지.   사람은 각자가 생각하는게 다르다. 서로간의 코드가 다르면 코스트를 지불해서 맞춰야 한다. 다양성이 제공하는 통찰의 힘도 있지만- 공짜는 없는 셈이다. 코드가 다르면 누군가는 그 다른 코드를 맞추기 위해 비용을 지불하지 않으면 목표달성에 실패할 수 밖에 없다. 그 지불의 대상이 그게 내가 되야할 수도 있고 다른 사람일수도 있고. 아무도 지불하지 않으면 팀이 망할것이니 양쪽 다 지불하는게 최상일것이다. 그래서 부부는 서로가 끝없이 서로에게 억울하지 않기위해 노력해야할 의무가 있다고 말하는것 같다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL16",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 27일 TIL",
        "excerpt":"Dev     오늘은 컨디션이 너무 안좋았다. 원래 벌떡 일어나는데 오늘은 일어날 수 없을것만 같은 기분에 알람을 15초는 듣고 있었던것 같다. 스트레스를 너무 받아서 그런가. 스트레스 때문에 금방 잠도 못들고 낮에 집중도 안되고. 스트레스를 조절할 방법을 찾아야겠다. 오늘은 차분하게 보냈다. 집에가서 잘 잘것같다. 장기전으로 가면 퍼포먼스는 멘탈과 컨디션관리에 달린것 같다.   불면증 같은거 모르고 살았는데 그때는 그냥 인생에 큰 기대를 안걸고 살아서 그랬던것 같다. 지금은 열심히 하고 싶은데.   망가지기 전에 미리 쉬어야겠다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL17",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 28일 TIL",
        "excerpt":"Dev     오늘은 커디션 굿. 스트레스만 안받으면 다음날은 괜찮은거 같다. 스트레스가 문제지 생활은 문제가 없다.   파이선 DB코드가 너무 더럽다. 특히나 데이터 구조가 너무 네스티드하게 짜여진 것들은 파이선 상에서 일괄처리가 너무 힘들다. 절대로 이렇게 스키마를 짜면 안되겠다. 컬렉션 갯수가 늘어나더라도 코드를 한번 알아보기 쉽고 코드 인덴트가 적도록 짜는게 훨씬 더 생산성이 높은것 같다.   JSON버그가 났다. 자바스크립트 의 객체유형을 그대로 반영해서 JSON을 만들어주지 않아서 갑자기 데이터가 증발하는 문제였다. 자바스크립트에서 데이터를 입력하고 출력은 되긴되지만 배열이기 때문에 일반 프로퍼티였던 answer는 JSON이 되지 않은 것이다    이래서 GraphQL이다  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL18",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 9월 30일 TIL",
        "excerpt":"Dev     IAM을 최대한 활용해보려다보니 비용을 조금 지불하고 있다. IAM유저들이 루트의 시크릿키를 공유해서 쓰는 줄 알고 시도하고 있었는데 알고보니 유저를 생성할때 지급받는 시크릿키가 각 개발자 입장에서 유효한거고 그걸 분실하면 유저입장에선 자발적으로 회복할 방법이 없었다.   한 동안 정신적으로 힘들었는데 지금 힘든 과정을 극복하는게 큰 자산이 될거라고 생각하니까 마음이 한결 편해졌다. 그리고 조금더 관리활동에 내 자원을 할당해야겠다고 다짐했다.   혼돈에 빠져있을때 잘 돌아오는 방법을 익혀야겠다. 똑같은 문제를 경험한 선배들의 이야기를 듣거나 읽는게 참 도움이 된다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL19",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 10월 1일 TIL",
        "excerpt":"Dev     SPINRT3가 끝나고 프로젝트는 이제 사용할 수 있는 서비스가 되었다. Bare-minimum이지만 말이다. 처음에는 화려한 스택을 사용해서 뭔가 그럴사한걸 하고 싶었는데, 점점 서비스를 써보게끔 디테일한 예외처리나 사용자 편의적인 목표들이 점점 우선순위가 높아지고 있다. 발표할때는 볼품없을것같기도 하지만 사용자들한테 내 서비스를 보여준다고 생각하니 점점 더 디테일하게 하고 싶어진다.   어제부터 느낌이 좋다. 팀원들도 협조적이고 이제는 달려가기만 하면 된다. 컨디션 올그린   자신을 명확하게 표현하는걸 더 의식해서 연습 해야겠다. 마치 내말을 다른 사람이 꼭 들어야 한다고 자기주장을 해야한다. 지금은 사실 그렇게 말할때 내 스스로가 나를 위협적으로 느껴서 주저할때가 너무 많다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL20",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 10월 2일 TIL",
        "excerpt":"Dev     오늘은 배포 문제 때문에 완전히 진을 뺐다. 클라우드 프론트를 쓰는 와중에 https로 클라이언트가 서비스되는 바람에 통째로 꼬였다. 서버를 다 거부하는 통에 문제가 생겼다.   또 aixos가 자기마음대로 baseURL을 설정하는 문제가 있었다. 로컬 테스트는 괜찮았는데 배포할때는 URL 환경변수가 꼬이는 문제가 발생했다. 메서드를 통째로 고쳐쓰는 방법이 있었지만 깔끔하게 해결할 방법을 찾고 적용하는데 시간이 걸렸다.   Cloud-front에 올려놓은 코드를 테스트하는게 좀 고역이었다. 테스트용 서버를 만들지 않아서 정식 도메인에 올려놓은 디플로이에 테스트를 올려놓고 했는데 캐시가 빠르게 사라지지 않아서 계속 무효화요청을 하고 TTL도 건들이고 그랬다. 이런 삽질을 해놓고도 결국엔 HTTPS 이슈 때문에 CDS를 뺐다.   맥환경에서는 생기지 않았던게 리눅스 배포환경에서 자꾸 에러를 일으켰다. 정말 테스트서버의 필요성을 느낀다. 하지만 프로젝트 초반에 이건 고려하지 않아서 9일 남은 지금와서 도입하기도 그래서 강행하기로 했다.   인프라쪽에서 씨름하다 보니 거의 코드를 못쳤다. 하루종일 AWS와 리눅스 터미널에서 직접 코드 수정하면서 버그 술래찾기를 했다. Axios가 제일 고생이었다. 어떤 요청을 받아들이고 거부하는지 Fetch 보다 불투명하다. Fetch는 상대적으로 명시적이다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary","Test"],
        "url": "/til/P1-TIL21",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 10월 8일 TIL",
        "excerpt":"Dev     버그만 줄창고치고 디테일을 손보는 스프린트가 끝났다. 개인적으로 이렇게 있어도 되나 생각이 들었다. 너무 노가다만 하다가 시간을 보내는건 아닌지. 어쨌든 이제 배포가 됐고 사용자 트래픽을 볼 차례가 왔다.   디버깅과 CSS를 보는 순서가 되다보니크게 이슈가 될게 없다. CSS작업이 굉장히 고되다보니 이 작업을 더 효율적으로 할 방법이 없을까 연구해보고 싶긴한데. 스프린트로 시간을 쪼는 방식으로 일과를 보내다보니 그게 안된다. 앞으로 뭔가 배우는 프로젝트를 할 기회가 있다면 절대로 이렇게 보내면 안될것같다.   life     밤에는 잘 자야지 피곤하다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL22",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2019년 10월 10일 TIL",
        "excerpt":"Dev     팀 프로젝트의 마지막 스프린트가 끝났다. 계속되는 버그와의 싸움. 이상한 동작을 찾아내고 고치고 또 고치고 우리팀은 다른 팀에 비해서 배포와 실제 서비스 사용성에 중점을 두고 하다보니 이 싸움이 길었다. 그 덕에 Stack에 번지르한 아이콘 하나 둘 더 넣진 못했지만 그래도 서비스를 써주는 사람이 생겼다. 처음으로 배포를 하고 홍보를 해서 디비에 사람들이 들어왔을때 너무 긴장되서 숨이 막힐것 같았다.   사용자의 다양한 인터렉션(여러 입력폼, 같은 정보를 다양한 방식으로 보여주기, 파일을 이곳 저곳에서 다루기)을 처리하는 플랫폼 프로젝트는 예외처리와 리팩토링(사용자의 엉뚱한 사용, 불편한 UI 뜯어고치기)와의 싸움이다. 학습 프로젝트로는 사실 맞지 않는 점이 있는것 같다. 소중한 시간인데 그걸 기능이 늘어갈수록 기하급수적으로 늘어나는 예외처리에 쏟는다니. 팀워크를 다지고 실제 서비스를 가정하고 만든다는 측면에서는 배운게 있지만 뭔가 아쉽지 않다고 한다면 거짓말이다. 더욱히 서버위주로 클라이언트는 거의작성하지 않은 팀들이 서버에서 새로운 태스크를 해냈다는걸 보면 왜 그렇게 남의 떡이 커보이는지.   그래도 자기가 해낸걸 부정하면 안된다. 프로젝트에는 시간때문에 하지 못하고 넘긴게 너무 많이 쌓여있고 Imersive 과정이 끝나면 꼭 처리해서 자랑스러운 내 프로젝트로 보여줄 프로젝트다. 딱 두가지만 더 고치면.. 평생 쓸만한 프로젝트가 될거라 확신한다.   life     체력은 코딩의 지대본 그걸 깨닫는 스프린트였다. 4주 정도까지는 버티겠지 했었는데 아무래도 이때는 한계가 많이 느껴졌다. 사실 첫주에는 이 정도 1년동안 할 수 있지 않을까 했는데. 선배 엔지니어님께서 말씀하신대로 이 정도 텐션으로 평생 살수는 없는것 같다. 이제 조금은 시간을 쪼개서 운동이나 사람만나고 메인말고도 사이드 공부도 하는 시간을 가져야할 시간이 왔다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P1-TIL23",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "4주 프로젝트 회고",
        "excerpt":"      프로젝트를 하면서 제일 잘 배웠다고 생각하는건 팀장으로서 잘 맞지 않는 팀원들과 이끌어나가는 방법이다. 이번 팀을 경험하고 나니 이전에 내가 대학교든 회사든 인연이 되었던 팀원들은 나랑 핏이 많이 잘 맞았었다고 지금은 평가할 수 있을것 같다. 이번은 프로젝트기간이 길어서 였을까. 아니면 정말로 핏이 안맞아서 그랬을까 충돌이 잦았다. 충돌이 나도 어찌하랴 그래도 프로젝트는 계속가야하고 포기는 있을 수 없다. 마음대로 풀지지 않고 마음이 억한 감정이 쌓이고 있을 즈음. 고통의 가치를 오히려 더 긍정적으로 활용할 수 있다는 조언을 들었고 그때 한번에 해소되는 감정을 느꼈다. 무너지지 않는 스킬을 배웠다. 처음엔 괴로웠지만 오히려 지금은 운이 좋았다고 생각한다.   하지만 그런 좋은 결과에 도달하기 전엔 후회했다. 이런 느낌이 사실 이게 처음은 아니다. 내가 하고 싶은게 있으니까 팀장을 자꾸 하게는 되지만 그게 관리적으로 부담이 커질때는 후회하게 된다. 나는 일상 생활 평소에 팔로잉을 하는편이냐 팔로워를 하는편이냐 물으면 팔로워라고 말을 한다. 실제로도 그렇다. 항상 따라간다. 왜 그런가 따져보면 일상적인 일에 별로 관심이 없다. 뭘 먹을지 어디로 여행을 갈지. 아이템보단 그냥 같이 가는게 중요하다고 생각해서 그렇다. 그런데 일의 측면에 들어가면 내가 하고 싶은게 확실하다. 그렇다보니 팔로잉 하는걸 답답하게 여기는게 되는게 사실이니까. 그냥 팔자려니 하고 앞으로도 계속 이끌어가는 입장의 무게를 담담하게 받아들여야겠다.   인프라 셋팅의 순서가 중요하다. 깔끔하고 배려깊은 셋팅은 전반적인 관리코스트를 줄여주는 역할을 톡톡히한다. 처음에 길을 뚫는데 전념해야 한다. 처음에 집부터 짓고 도로를 지으면 안된다. 할 수 있다면 최상의 시나리오는 다음과 같다. 인프라 &gt; 백엔드 &gt; 프론트엔드. 이렇게 할 수 없다면 독립적인 부분부터 작업을 해야한다.   잘못쓰여진 코드는 아무런 도움이 안된다. 후속작업을 하는 사람이 똑같은 내용을 또 만들어야한다. 최악이다.   오버커뮤니케이션을 하면 못해도 미스가 나도 화가 나지는 않는다. 그래서 팀원들이 그렇게 하게끔했다. 그러고나니 조금 팀관리가 쉬워졌다. 다니던 회사 차장 님이 생각났다. 왜 그렇게 작업관리를 할때 화를 내시는지. 작업의 효용성을 떠나 통제가 안된다는 주관적 감각에 너무나 스트레스를 받으셨을것같다.   어디 유튜브에서 최단시간 클론 프로젝트를 하거나 반복적으로 숙달된 작업을 단축하는 용도가 아니라면 2차 라이브러리에 처음부터 의존하면 안된다. 나중에 자신의 작업이 어떤 단계에 있고 어떤 기능으로 확장할 수 있는지 가늠할 수 없는 문제에 봉착하게 된다. 예를 들어 ‘React-google-login’ 보다 구글의 JS클라이언트 SDK를 쓰자.   마지막으로 배포부터 하고 시작한다   ","categories": ["devlog"],
        "tags": ["retrospectives","Diary","Engineer"],
        "url": "/devlog/4%EC%A3%BC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "나는 왜 개발자가 됐나?",
        "excerpt":" 나도 이책을 공부했었다.  나의 이력을 먼저 이야기해야할것 같다. 나는 대학교 초반부터 전공에 대해 깊은 회의감을 가지고 딴맘을 품었다. 그래서 대학생활에서 전공은 뒷단, 창업동아리나 창업활동에 틈만 나면 참가했었다. 기본적으로 할 공부만 하면서 심리학, 게임기획이니 여러감을 쑤시던 날의 연속이었다. 그리고 그렇게 쑤시던 감중에 IT가 있었다. 이때 필요해서 만들어본 프로그램은 주기적으로 통신하지 않으면 인터넷을 끊어버리는 교내인터넷망의 동작을 와해하는 프로그램이었다. (어뷰징이니 혼자만 썼지만) 이 시절에 정해진건 하나다. 나는 경영보다는 기술을 배우겠다는 정책. 배우는게 재밌고 세상에도 필요로 하니까.    밥먹듯이 인사한 녀석  졸업을 앞둔 2월, 나는 서버실 반짝이는 LED와 보안이라는 단어에 이끌려 직업학교에 들어갔고 거기서 리눅스와 DB, 보안관련 베이스 공부에 심취해서 살았다. 모든게 새로웠고 배울건 산더미 같았다. 그리고 졸업프로젝트를 마치고 금방 취직을 했다. 회사와 사람들은 참 좋았지만 회사솔루션을 관리하는 내 포지션의 성장의 가능성은 낮았다. 회사선배님들도 그냥 일을 하기만 해선 남는게 없다고 계속 조언할때 마다 왜 그렇게 기운이 빠지는지. 일에서 주인공이 되고 싶다는 마음이 계속 커졌다. 일에서 주인공이 되는것. 그때는 ‘내가 없으면 안되는게 주인공’이라 생각했다. 하지만 그런일이 어디있는지도 모르겠고 그때 믿어주는 팀장 님께 미안해서 자꾸만 퇴사를 미루고 미루었던게 기억난다.    실제로 보면 아파트만한 엔진이다.  퇴사를 하고 찾아낸것이 선박기관사였다. 누구도 대체할 수 없는 책임감을 가지는 포지션이고 내 마음을 채워줄거라 기대가 내 맘을 사로 잡았었다. 그리고 오랜 준비기간을 거쳐 배에 올랐다. 태평양 한가운데 외로이 움직이는 300m가 넘는 벌크선, 집채만한 메인엔진은 굉음을 내고 600bar정도의 압력을 받는 파이프가 꿈틀꿈틀거리는게 가슴을 서늘하게 만들었다. 전기시스템은 매일 어딘가는 고장나서 온라인 상태에서 고쳐야했다. 이런 위험은 괜찮았지만 드라마에서나 볼법한 수직적 조직문화에 내 마음은 빠르게 식어버렸다. 반성하건데 내가 일할 문화에 대해 너무 무지했었다. 조직의 문화는 사람의 마음을 결정하고 사람의 마음이 곧 삶이다. 실물인지 IT인지 육지인지 바다인지가 중요한게 아니었다. 중요한건 문화였다.    새로 부여받은 무기. 사실 언어보단 문화가 더 중요하다.  배에서 내리자 마자 내 운명은 정해져있었다. 다시 IT로 돌아가야 했다. 내 마음을 받아줬었고 내가 잘 할 수 있고 익숙한곳. 내게는 챌린징한게 필요했었고 그렇다면 개발을 하면 된다고 생각하니 답이 깔끔했다. 개발을 하면 많은 부분에서 내 마음의 문제가 해결될것 같았다. 가장 빨리 개발자가 될 수 있는 코스를 찾았고 그 과정이 쉬웠다고는 못하지만 의미있었고 내게 자신감을 주었다. 그리고 이제 구직 전 마무리를 작업을 하고 있다. 미래는 어떨지 모르지만 어딜가도 배 보단 더 좋은 환경일거라 기대하고 훨씬 잘 적응할수 있으리라 확신하고 있다. 하루빨리 나와 같이 일할 팀을 찾고 싶다.   ","categories": ["devlog"],
        "tags": ["diary","Engineer"],
        "url": "/devlog/%EB%82%98%EB%8A%94-%EC%99%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%90%EB%82%98",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "파이선 웹서버 뭐가 좋을까? Django vs Flask",
        "excerpt":"배경      지난주 데모데이를 마쳤던 퀴즈플랫폼  Duckhoogosa🔗 프로젝트는 누구나 쉽게 자신이 좋아하는 분야에 대한 퀴즈를 만들고 풀고 그 결과를 공유할 수 있는 플랫폼이다. 컴포넌트는 레트로한 분위기의 nes.css를 사용했고 레이아웃은 flex로 직접 작성했다. 클라이언트와 서버 양쪽에서 AWS S3에 접근하여 유저들의 업로드를 처리했다. 또 어뷰징을 막고 유저를 구분하기 위한 인증은 OAuth 토큰과 AWS Cognito를 활용했다.      이 프로젝트 설계에서 첨예했던 주제는 API와 AWS 인프라를 컨트롤할 파이선 웹서버의 스택선택이었다. Flask와 Django 둘중에 하난데 뭘 결정해야할지에 대한 정보가 많이 부족했다. 인터넷에 검색하면 막연히 이런 정보는 많이 나온다.      Django는 딱딱하다. Flask는 가볍다    그런데 아직 경험이 없는 나로서는 이 문장이 도대체 어떤 맥락인지 이해가 안됐다. 나는 먼저 Django를 선택해서 부딪쳐보기로 했고 적응할만한 즈음 Django-rest-framework-mongoengine에 버그가 있어 뒤집어서 최종적으로 Flask와 pymongo를 사용하기로 했다. 그 과정을 이번 글에서 정리하고자 한다.   데이터베이스 설정  Django는?  Django 를 설치하고 튜토리얼을 따라가다보면 장고의 특징이 드러나기 시작한다. Skeleton 프로젝트를 생성하면 덩달아 따라오는 빽빽한 setting.py가 바로 그것이다. 그리고 데이터베이스 파트는 이렇게 생겼다.   DATABASES = {     'default': {         'ENGINE': 'django.db.backends.mysql',         'NAME': 'name',         'USER': 'user',         'PASSWORD': 'password'     }  이 부분에 장고에서 지원하는 DB Engine과 접속정보를 기입하면 장고는 로드할 때 여기있는 정보를 기반으로 자체적인 백엔드 로직을 구성하여 돌려준다. 여기서 백엔드로직이라 함은 대표적으로 admin 페이지나 회원가입, 읽고 쓰는 기능이다.    Django Admin Page   Django는 이런 기능을 내장하고 있고 API 리소스 별로 테스트할 수있는 html-UI도 제공한다. 다만 이것들을 사용하기 위해선 위의 Database 항목을 잘 관리해야한다. 이걸 공백으로 두면 에러가 떠서 서버가 켜지지 않는다. 그리고 이걸 지원하는 않는 모듈을 별도로 쓴다면 더미모듈을 설정해줘야한다. Python에서 MongoDB를 쓴다고 하면 Djongo, Mongo-engine,  django-rest-framework-mongoengine , pymongo 등의 옵션이 있는데 Djongo를 빼면 (적확하게 말하자면 Django가 지정한 방식대로 쓰지 않으면) 이런 어드민기능을 지원하지 않는다. 즉 까다롭게 설정하는대신 덕은 못본다는 것이다. 그래서 Django는 딱딱하다. 자기기능을 다 쓸게 아니라면 사용자를 답답하게 만든다.   Flask는?  from pymongo import MongoClient  connection = MongoClient(host,                          username=user,                          password=password)  db = connection[Database_name] commentsCollections = db.comments  위 코드는 pymongo를 사용해서 컬렉션을 준비시킨 모습이다.   플라스크엔 setting.py가 없다. 그냥 텅텅비어있다. app.py를 읽을때 명시적으로 디비를 지정해놓고 필요할때 유저가 명시적으로 지정해서 사용한다. 유저가 지정할 수 있기 때문에 어디서 무엇이 이루어지는지 확실하게 알 수 있다. 그 대신 Flask가 임의로 만들어주는 로직은 없다고 봐도된다.   서버 사이드 데이터 플로우  Django는?     Django  created the skeleton project을 실행했을 때 생성되는 서버사이드 MVC(MTC) 모델인데 이미 쓰여진 파일명대로 따라서 Django가 읽어서 플로우를 진행한다.  urls.py → views.py ← template.html 의 구조로 진행한다.     urls.py : 어떤 view로 보낼지 결정 (라우팅)   views.py : 최종 Return ( 컨트롤러)   template : html 문서 껍데기   from .models import Book # models에서 들고오는 데이터베이스 ORM객체    def index(request):     Books = Book.objects.all()     # 쿼리가 된 결과가 담긴다.     context = {'Books':Books}     # template에 넘겨주기위해 딕셔너리형태로 바꾼다.     return render(request, 'store/index.html', context)     # index.html에 딕셔너리 데이터가 들어가고 그걸 기반으로 렌더된 문서가 클라이언트로 반환된다.  views.py   이 코드를 이해하기 위해선 index 함수가 urls.py에 등록되어 있기 때문에 라우팅 흐름을 타고 작동하는 관계를 알아야한다. 이런건 코드에 안쓰여져 있다. 고생해서 익혀야 한다.   Flask는?   @app.route('/', methods=['GET', 'POST']) def home():   return flask.render_template('filename.html')   플라스크를 어떤 기능을 어떤 파일명에서 어떤 이름으로 구현하라는 약속이 없다. 필요에 따라 구현하고 구현한 만큼 기능한다. 플라스크는 @view_decorator로 처리하는 로직이 많다. 덕분에 명시적인 성향이 강해서 한눈에 어떤 로직이 관계되는지 파악할 수 있다. 위는 app 객체에 route를 등록하고 바로 아래에 Response를 반환하는 예제다.   미들웨어  Django는?   MIDDLEWARE = [     'django.middleware.security.SecurityMiddleware',     'django.contrib.sessions.middleware.SessionMiddleware'     'my_middleware_directory.MyCheckTokenClass', ]  setting.py   setting.py에서 미들웨어를 등록해놓으면 request할때는 위에서부터 밑으로 적용시키고 response 할때는 아래부터 밑으로 적용해나간다.      다음은 Django에서 미들웨어를 구현한 모습이다. 위에 있는 MIDDLEWARE = [… my_middleware_directory.MyCheckTokenClass] 의 연장으로 보면 이해하기 쉽다. 쓰겠다고 했으니 구현한거다.   class MyCheckTokenClass:     METHOD = ('GET', 'POST', 'PUT', 'DELETE')      def __init__(self, get_response):         self.get_response = get_response         self.API_URLS = [             re.compile(r'^(.*)/api'),             re.compile(r'^api'),         ]         # 메인 로직에서 사용할 미들웨어의 프로퍼티를 지정하는 생성자 __init__       def __call__(self, request):         response = None         if not response:             response = self.get_response(request)         if hasattr(self, 'process_response'):             response = self.process_response(request, response)         return response                  # 클래스가 호출되면 함수처럼 실행되는 __call__         # 여기서는 REQ객체로부터 RES객체를 생성하고 한다.         # process_response 함수를 통해 전처리가 된 response를 다음 미들웨어로 보낸다.       def process_response(self, request, response):         path = request.path_info.lstrip('/')         valid_urls = (url.match(path) for url in self.API_URLS)                  # url과 메서드를 검사해서 적용 케이스를 분기한다.         if request.method in self.METHOD and any(valid_urls):             response.isCheck = True         else:             response.isCheck = False          return response   어떤 요청에 대해 위의 미들웨어 로직을 적용 할지에 대해서는 객체를 직접검사하고 리턴을 돌려주는 방식으로 구현된다.   Flask는?   다음 코드에서 보여주면서 설명  from flask import Flask from flask_cors import CORS  # 방법 1 미들웨어를 import하고 감싸주면 적용. app = Flask(__name__) cors = CORS(app, resources={r\"/api/*\": {\"origins\": \"*\"}})  # 방법 2 전통적인 방법으로 미들웨어 만들기 from werkzeug.wrappers import Request  class Middleware:     def __init__(self, app):         self.app = app      def __call__(self, environ, start_response):         request = Request(environ)         print('path: %s, url: %s' % (request.path, request.url))         return self.app(environ, start_response)  app.wsgi_app = Middleware(app.wsgi_app)  # 방법 3 데코레이터 사용 from functools import wraps  def login_required():     def _decorated_function(f):         @wraps(f)         def __decorated_function(*args, **kwargs):             if 'logged_in' in session:                 print(session['email'], \"session pass\")                 return f(*args, **kwargs)             else:                 print(\"️ ___no session___\")                 return \"NO SESSION ERROR\"          return __decorated_function      return _decorated_function   @app.route('/home') @login_required() def home():     return 'Hello'   이것 말고도 다양한 방법이 지원되지만 세가지를 예로 들었다.     app을 래핑하는 미들웨어   전통적 (명시적) 미들웨어   decorator를 통해 미리 명시적으로 보여주는 방법. 이때 @app.route 가 상단에 있어야한다. Flask의 방법은 Node — express 와 비슷하다는걸 알 수 있다.   정리  이렇게 보면 Flask는 @decorator로 상당히 많은것을 하는것처럼 보이지만  flask_restful 을 활용하면 Django처럼 별도의 장소에서 라우팅을 정리하고 적용할 함수형 리소스, 클래스형 리소스을 지정하여서 코드를 깔끔하게 관리할 수도 있다.   from flask_restful import Api, Resource  app = Flask(__name__) api = Api(app)  class AccountImg(Resource):     def post(self):         pic = request.get_json()         img = pic['img']         usersCollections.update_one({'email': session['email']},                                     {'$set': {\"img\": img}})         return 'ok'          api.add_resource(AccountImg, '/account/img')  flask_restful 기반 API.  내가 경험한것을 요약하면 두 프레임워크의 선택기준은 다음과 같다.       Reference     https://tutorial.djangogirls.org/ko/django_start_project/   how-to-create-a-custom-django-middleware   https://oz123.github.io/advanced-python/book/middlewares.html   DJANGO 커스텀 미들웨어 만들기   https://github.com/jadetypehoon/duckhoogosa-server-kth   https://developer.mozilla.org/ko/docs/Learn/Server-side/Django  ","categories": ["Python"],
        "tags": ["Language","Framework","Web","Flask","Django"],
        "url": "/python/%ED%8C%8C%EC%9D%B4%EC%84%A0-%EC%9B%B9%EC%84%9C%EB%B2%84-%EB%AD%90%EA%B0%80-%EC%A2%8B%EC%9D%84%EA%B9%8C-Django-vs-Flask",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "CRA .env 지정해서 쓰는법(env-cmd)",
        "excerpt":"      .env 파일은 버전별로 다른 환경변수를 지원하기 위해서 Create React App(이하CRA)가 읽어오는 파일이다.   npm start 명령어 시행시 시스템 변수를 읽어와서 프로젝트 내의 .env.[$NODE\\_ENV]을 적용한다.   (현재 내 개발환경에선 $NODE_ENV 에 development가 설정되어 있다.)   그리고 build를 할때는 그것 대신 .env.production 파일을 읽어 빌드를 진행한다.   이걸 임의로 컨트롤할 필요가 있을때를 위한 방법을 이 글에서 소개하고자 한다. 나의 경우엔 test 버전을 빌드하기 위함이다.      Install ‘env-cmd’ for set several environment in ‘Create React App’      $ yarn add env-cmd2.       Add root DIR ‘.test.env’ and vi .test.env            REACT\\_APP\\_MODE=\"test\"            Set build option at ‘package.json’, This way NODE\\_ENV should assigned .test.env.     // package.json scripts: {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"build:test\": \"env-cmd -f .env.test react-scripts build\",   }           Build and verify the way you set      yarn build:test    yarn run v1.16.0   $ env-cmd -f .env.test react-scripts build   Creating an optimized production build...!        hosting client console.log  ","categories": ["React"],
        "tags": ["framework","env-cmd"],
        "url": "/react/CRA-.env-%EC%A7%80%EC%A0%95%ED%95%B4%EC%84%9C-%EC%93%B0%EB%8A%94%EB%B2%95(env-cmd)",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "CloudFront 배포 후 Access-Denied 증상",
        "excerpt":"AWS DOC - Amazon S3 객체에 대한 액세스 권한을 관리하는 방법을 설명합니다   S3 객체를 만들때 allow 해야할 항목이 워낙 많다보니 확인해볼 체크리스트를 만들었다.      S3 버킷 정책, get-object 항목   S3 액세스리스트   AWS 계정 레벨의 S3 권한 체크 (개별 버킷보다 우선한다)   버킷에 담긴 오브젝트 권한 체크   Cloud-Front General → Default Root Object → Add ‘index.html’   ","categories": ["AWS"],
        "tags": ["S3","Checklist"],
        "url": "/aws/cloudfront-access-denied",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "EC2 HTTP 웹서버를 HTTPS로 바꾸기",
        "excerpt":"  EC2 HTTP 웹서버를 HTTPS로 바꾸기  개요  현재 HTTP로 서비스 되고 있는 내 플라스크 서버를 SSL을 적용한 HTTPS 서비스로 바꾸고 적용하는 과정을 정리했다.   글쓴이의 사용 환경  EC2(linux AMI), EIP, Route53, 정식도메인, cert-bot, S3 호스팅, Cloud Front   절차     무료 인증서 프로젝트인 Letsencript는 정식도메인에서 서비스되는 서버에만 인증서를 발급한다.   현재 가비아로부터 duckhoo.site를 구매해서 Route53을 이용해 도메인서버를 운영하고 있다.   infra.duckhoo.site 의 이름으로 현재 elastic IP로 서비스되고 있는 EC2서버에 정식도메인을 부여   HTTPS로 서버가 운영되고   최종적으로 duckhoo.site 클라이언트가 HTTPS 서비스를 지원하는게 최종적 목적지다. (꼭 HTTPS를 해야하는건 아니다. ELB를 활용하면 VPC단에서 HTTPS서비스를 제공할 수 있다.)     Route53 설정    route53 console   Route53에서 소유중인 도메인의 하위 도메인으로 infra 레코드 세트를 만들었었다. 아래에 입력되는 아이피는 탄력적아이피이며 (Elastic IP) 는 AWS 프리티어에 1개 제공된다.     local terminal, 만든 레코드에 대한 통신확인 완료   CERT 발급     SSH EC2 접속   certbot-auto 다운로드 및 실행  $ wget  https://dl.eff.org/certbot-auto$  $ chmod a+x certbot-auto   오토봇을 실행한다. 마지막에 정식도메인을 입력해줘야한다.  $ sudo ./certbot-auto —debug -v —server https://acme-v01.api.letsencrypt.org/directory certonly -d infra.duckhoo.site   옵션을 다 안지정해줘서 정보를 2개 물어본다. 첫번째는 email 두번째는 서비스할 webroot다. flask 내장서버를 쓰고 있어서 뭘 입력해줘야하나 고민하다가 프로젝트 폴더에 cert폴더를 만들어서 입력했다.  Input the webroot for infra.duckhoo.site: (Enter ‘c’ to cancel): /home/ec2-user/DuckhooGosa-server/cert/   인증서가 발급된 모습     Server Side HTTPS  이제 인증서를 들고 서비스를 하도록 코드를 짤 차례다. SSL모듈을 사용하려고 pip install ssl 을 하니 SyntaxError: Missing parentheses in call to ‘print’. Did you mean print(‘looking for’, f)? 이런 에러가 뜨는데, 알아보니 현재 내 flask는 내장웹서버를 쓰기 때문에 별도의 설치가 필요 없었다. (권장 사항은 아니다 나중에 WSGI 를 붙일예정. 파이선 웹서버를 프로덕션 레벨에서 쓸때는 내장 WSGI를 쓰면 안된다.)  개발환경에서 먼저 확인을 해보고 싶어서 로컬부터 openssl로 만든 pem으로 서비스해보기로 했다.  $ pip install pyopenssl $ openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 36500  이렇게하면 100년 유효기간의 키가 생겼다. 제3자의 증명을 위한 cert 지만 이렇게 만드는건 자기 스스로가 증명하고 자기가 사용하는 꼴이라  브라우저에서 접근하면 경고창이 보이지만 (브라우저는 인정하는 CA 인증과정을 거친 CERT만을 보증하도록 로직을 갖추고 있다) 어쨌든 일단 형식은 갖추었다.   if __name__ == '__main__':     pemTuple = (app.config['CERT_PEM'], app.config['PRIVATE_KEY_PEM'])     app.run(port=app.config['PORT'], host=app.config['SERVER_HOST'], ssl_context=pemTuple)  app.py   flask-app에 인증서를 등록시킨다. app.config의 내용은 각자 프로젝트 환경변수 설정방법에 따라 다르므로 자세한 설명은 생략한다.   개발환경의 API서버는 이제 https 서비스를 시작했다. CRA의 내장서버도 옵션을 켜면 자기가 사인한 허술한 인증서로 https 서비스로 시작된다.🔗참고 링크: CRA using-https-in-development    한쪽만 Https가 되면 Mixed Contents 에러가 난다. 개발환경에서 충분히 준비가 되었는지 확인하고 이제 배포 테스트용 클라이언트, 배포 테스트 서버 브랜치를 업데이트시킨다.   실행을 시켜보니 에러가 뜬다.  File “/usr/lib64/python3.6/ssl.py”, line 750, in __init__self._context.load_cert_chain(certfile, keyfile)PermissionError: [Errno 13] Permission denied  넘겨준 인증서를 읽는데 실패한 에러다. 인증서 경로를 가면 경로의 파일은 넘겨받은 파일은 Soft 카피(Soft-Link)다. 원본과 복사본에 실행권한을 주면 된다. 이때 chmod 777 같은 every 레벨로 줘도 동작은 하지만 보안적으로 권장하지는 않는다. Server를 실행할 유저 및 그룹을 만들어서 그 그룹한테 1(+x)의 권한만 주는 방법을 권장하고 있다.   🔗 참고자료: Let’s encrypt SSL couldn’t start by “Error: EACCES: permission denied, open…  🔗 참고자료: lets-encrypt-ssl-couldnt-start-by-error-eacces-permission-denied-open-et  —   Client Side HTTPS  이제 서버를 동작시켜보니 서명을 기반으로 통신은 잘되는데 크롬에서는 NOT Secure 경고를 하고 있다.      원인을 찾아보니 버킷이름 SSL 프로토콜 약속을 위반한것 같다. 다음과 같은 내용을 찾았다.     Secure Sockets Layer(SSL)와 함께 가상 호스팅 방식의 버킷을 사용할 경우, SSL 와일드카드 인증서는 마침표가 포함되지 않은 버킷에만 연결됩니다. 이 문제를 해결하려면 HTTP를 사용하거나, 인증서 확인 로직을 직접 작성해야 합니다. 가상 호스팅 방식의 버킷을 사용할 경우, 버킷 이름에 마침표(“.”)를 사용하지 않는 것이 좋다.    버킷이름을 test.duckhoo.site 로 설정해두었는데 SSL 프로토콜에 위배된것같다. 버킷이름을 바꿀 방법은 없을까. 찾아봤는데 AWS CLI로 버킷을 복사하고 동기화하는 방법만 보이길래 새로 만들었다.     다시 CloudFront 설정을했다. {: .caption}..   오리진 도메인만 새로운 버킷으로 고쳐주면 Distribution을 새로 만드는 번거로움을 피할 수 있다. 중간에 SSL통신을 크롬이 인증서를 invalid로 판단해서 Not Secure를 보여주는 문제가 있었는데 이걸 해결한 우여곡절을 확인하고 싶다면  🔗 다른 포스트 링크   SSL은 클라이언트나 서버 혼자 하는게 아니므로 어느 쪽이든 클라이언트와 서버가 요구하는 원칙을 위배한 통신을 하면 Not secure가 뜨게되므로 주의.      검증된 오리진(제3자가 인정한 인증서를 가진 호스트)들이 검증된 통신(SSL)을 지키고 있으면 크롬이 Secure 하다고 인정한다. SSL을 사용하면 통신의 오버헤드는 미미하게 증가 하지만 암호화된 통신을 구현할 수 있다. 자세한 원리는 비대칭 공개키를 검색.  ","categories": ["Web"],
        "tags": ["AWS","EC2","HTTP","PaaS"],
        "url": "/web/ec2-http-to-https",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "HTTPS- Not Secure 디버깅",
        "excerpt":"알고나면 크게 어려운건 아닌데 어디서 봐야할지, 그것도 아니면 어떤 키워드로 검색해야할지 감이 안와서 조금 헤매서 정리하고자한다.   문제내 서비스는 Cloudfront에서 HTTPS로 서비스되고 있다. (인증서를 발급해서 등록했다) 그런데 서비스는 NOT Secure하다고 뜬다. IDE의 콘솔도 아니고 AWS에서 로그를 찍어 주는 것도 아니고 어디가면 이문제를 해결할 수 있을까?   정답은 개발자도구의 Security 탭이다.   이곳에서 SSL통신 규격을 점검해서 리포트해준다. 이런 서비스를 해주는 웹사이트들도 있지만 (전체 웹페이지를 봇으로 돌면서 점검해준다.) 개발자도구를 쓴다면 소규모에선 굳이 필요없어보인다.   나같은 경우는 이런 에러였다. 분명 infra.duckhoo.site는 AWS에서 인증해준 인증서로 서비스 되고 있었는데 not trust다. 메시지를 읽어보니 Client에서 API서버를 DNS주소가 아니라 직접 IP로 호출하고 있는점이 문제였다. 그것을 invalid 증명으로 판단하고 있었다. 서명된 host와 실제 사용되는 host가 다르면 not trust하는듯하다. 클라이언트에서 DNS주소(infra.duckhoo.site)를 호출하도록 수정하니 문제해결.   ","categories": [],
        "tags": [],
        "url": "/https-not-secure",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "SATA 먼지로 인한 성능저하",
        "excerpt":"dairy  이사 이후에 CPU 쪽에서 별 부하가 없는데도 성능이 부족한것처럼 화면이 끊기는 문제가 발생하였다. 이번에 이사를 하면서 특별히 하드웨어를 탈부착한건 아니었으나 하드웨어 쪽에서 간섭이 예상되서 SATA 케이블을 다 빼서먼지를 제거해주니 정상으로 돌아왔다. 아마 이사하는 도중에 먼지가 대량으로 떨어지면서 접촉면에 붙었고 불필요한 인터럽션이 주기적으로 발생한것으로 보인다.  ","categories": ["TroubleShotting"],
        "tags": ["Hardware","Infra"],
        "url": "/troubleshotting/sata",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "나는 여기서 왜 이 일을 하는가? 사용설명서",
        "excerpt":"   ‘삶은 가지치기’  이건 내가 좋아하는 비유다. 새로운 가능성을 탐구하지 않는 나무, 즉 새로운 가지를 뻗지 않는 나무는 죽은 나무. 가지치기를 하지 않는 나무는 무질서하고 쓸모를 잃는다. 그렇다고 무턱대고 자르다간 큰 고통이 뒤따른다. 그런데 따지고 보면 가지치기를 하는 사람의 마음이 제일 중요하다. 어떤 가지가 가치가 있는지 바라보는 건 사람의 마음이니까.   오랫동안 방황함  나는 이 가지치기를 솔직히 잘하지 못했고 많이 헤맸다. 그러다 보니 가지치기란 개념으로 인생을 반성하게 된 것이고 말이다.      “독하게 산다고 성공하는게 아니다.” — 카카오 CEO 김범수    엔지니어의 길을 걷는 초반 나는 긴장되고 위축된 마음과 마음대로 컨트롤 되지 않는 내 행동에 대해 “어쩔 수 없다” “참아야 한다” “이길 밖에 없다” “이게 내 한계인가? 하지만 더 해보자”라는 마음가짐으로 무조건 버티면서 살았다. 돌이켜보니 그런 마음가짐으로는 오랫동안, 그리고 영리하게 싸울 수 없었다. 난 마음을 컨트롤하는 방법을 배우기 위해 오랜 시간을 투자하게 된다. 다른 멀리 태평양에 떠다니는 배에서 엔지니어 일을 하기도 했고 야간에만 고요하게 근무하는 직장을 택하기도 했다.   고맙게도 전 직장의 CTO분은 나의 마인드 컨트롤을 도와주시려고 노력하셨지만, 이성과 가슴의 거리는 너무 멀었다. 그리고 2022년 3월이 되어서야 깨닫게 되었다. 나는 강철의 전사가 아니었다. 그리고 생각보다 섬세했다.   유연함이 너무나 간절하게 필요했다. 그러기 위해선 뭐든지 할 수 있다는 각오가 섰다. 그러자 쓸모없다고 믿었던 가지에 있었던 가능성이 보이기 시작했다. 자세한 이야기는 다른 글에서 다루겠다.      그렇게 여기까지 살아왔고 이제 나라는 사람의 매뉴얼 (2022.06.05)   내가 엔지니어가 된건 다음의 이유에서다.     끝없이 배우기 위해서   세상과 소통하는 좋은 도구를 얻기 위해서   내가 배우는걸 좋아하는 이유  몰입에 대한 갈망과 호기심을 충족시키고자 하는 갈망 때문이다. 지금도 몰입하지 못할 때, 호기심이 없는 환경에서 살아갈 때 고통이 크다. 내 삶에 대한 의사결정에 60%를 차지한다고 해도 과장이 아니다. 좀 더 나이를 먹고 나면 변할지 모르겠지만 처음 이 글을 썼던 2019년에도 저널을 업데이트 중인 2022년에도 그렇다.   소통의 도구를 얻고 싶어하는 이유  인정받기 위해서다. 아무도 골방의 현자를 인정받지 못한다. 세상과 소통하고 기여해야 한다. 그런데 나는 아무도 인정하지 않고 나 스스로도 흥미가 없고 타율이 떨어지는 관점과 도구로 세상과 싸우고 싶진 않았다. 나는 엔지니어에 흥미도 있었고 타율도 좋아 보였다.  최소한의 경제적 안정을 얻기 위해서다. 사람들마다 불안을 느끼는 요소가 다른데, 경제활동이 인류사의 핵심을 이루고 있다고 보고 나 또한 참여자로서 경제적인 해자가 없다고 느낄 때 불안을 느낀다. 해자가 있다고 확신할 때 현실의 불안을 가볍게 넘기고 시간을 벌고 더 많이 관계에 투자할 수 있다. 때문에 경쟁력 있는 도구를 얻고 싶다는 갈망이 크고 엔지니어의 길은 그걸 제공해준다.  평생을 안고 갈 수 있는 정체성을 얻기 위해서다. 어떤 사람은 가정이란 정체성으로 자신을 채우겠지만 나는 그럴 계획이 없고 그렇게 남은 인생의 여유 공간에서 쾌락과 예술적 만족만 쫒으면서 살기엔 인생이 너무 길다. 그것도 너무 😇      내 커리어의 롤모델  내 인생에 영향을 준 사람은 참 많지만, 짧게 한 사람만 언급하고 싶다. 내 첫 직장은 주력인 ICT 리소스 모니터링 솔루션을 100개가 넘는 사이트에 납품했었고 규모가 커지면서 회사는 유지보수 사업을 전담할 새로운 법인을 고민하던 시점이었다.   그런 시점에 주력 제품의 프로덕트 매니저가 있었다. 그 사람은 제품에 코어 컴포넌트의 담당하는 팀의 리더였고 코딩도 했다. 거의 다른 컴포넌트의 로직과 연관이 있었기에 문제가 터질 때마다 콜을 받았었다. 업무 관리로 사용했던 Redmine에 그 사람의 이름이 언급되지 않는 날이 없었던 것으로 기억난다. (그렇게 굴러갔던 조직이나 제품은 문제가 있는 거겠지만)   그의 얼굴을 보러 갈 때마다 언제나 열정이 느껴졌고 바쁜 일정에도 침착함과 Warm 한 느낌을 잃지 않았다. 당시의 나는 필드 엔지니어로서 다른 부서였지만 그 사람과 나눈 모든 대화는 좋은 기억으로 남아있다. 대화에서 나를 발전시켜주기 위한 배려심과 자신의 제품에 대한 확고한 이해를 느낄 수 있었기 때문이다. 그 당시엔 그 단어를 몰랐지만, 그는 확실히 소프트웨어 장인이었다.   시간이 꽤 지난 지금 생각해보면 이건 존중을 넘어 사랑인가 동경인가? 😅 남자였는데… 어쨌든 나는 오늘도 집을 나서며 그 사람을 닮을 수 있도록 있기를 다짐한다. 그리고 새롭게 적응할 조직에서 그런 사람과 만날 수 있기를 기도하고 있습니다.  ","categories": ["devlog"],
        "tags": ["devlog","essay"],
        "url": "/devlog/%EB%82%98%EB%8A%94-%EC%97%AC%EA%B8%B0%EC%84%9C-%EC%99%9C-%EC%9D%B4-%EC%9D%BC%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80-%EC%82%AC%EC%9A%A9%EC%84%A4%EB%AA%85%EC%84%9C",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "Spring has come and I'm starting my blog again.",
        "excerpt":"  I’m back  Spring has come to my life and I’m back to blogging again. And I bought a good MacBook as a souvenir. Previously, I had a 2013 MacBook. I won’t talk much. Cuz the best way to tell me is by posting. Sat, Jun 4, 2022   ","categories": ["devlog"],
        "tags": ["devlog, diary, about"],
        "url": "/devlog/I_came_back",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "소프트웨어 장인 (Feat 삶의 방정식)",
        "excerpt":"   배경  이 책을 산건 2019년 6월이었다. 뜨거운 여름, 양산도서관에서 프로그래머가 되기 위해 프로그래머스에서 알고리즘 문제도 풀고 코드스테이츠의 Pre 코스를 밟던 시절이다. 알고리즘 말고도 좋은 프로그래머가 되기 위한 조건은 많을 것 같아 샀던 것 같다.  하지만 이 책을 사놓고도 24시간 알고리즘이나 문법에 대한 생각과 불안뿐이었기에 책을 읽을 수가 없었다. 그래도 실제로 일을 시작한 다음이라도 읽었어야 했는데 그러지 못했다. 한 페이지 한 페이지에 통렬한 반성을 요구하는 이 책이 읽기가 두려웠던 걸까.  결국 책을 읽은 건 2022년 5월, 모든 내 불안이 해소되고 세상 밖으로 나아가도 되겠다고 마음을 편하게 먹은 뒤다. 심지어 이때 같이 산책들도 모두 최근에 다 읽었다 (미안해 제레미 다이아몬드) 읽고보니 옛날에 그 시절에 읽었으면 참 좋았을 텐데라는 생각이 들었다. 이렇게 보면 소프트웨어 장인이 되기 이전에 심리적으로 스스로를 잘 케어해줄 수 있는 사람이 되는 게 먼저인 건가? 😔   내용 요약  책의 내용은 광범위하다. 소프트웨어 장인정신의 정의, 애자일, 익스트림 프로그래밍, 페어 프로그래밍, TDD, 휴식 방법(!?), 성공적인 소프트웨어의 조건, 프로페셔널의 조건, 조직 내에서 만나는 다양한 개발자 및 아키텍처 인간군상과 그들에게 장인정신을 불어넣기 위한 시도들, 글쓴이가 프로그래머가 된 과정과 성숙하게 된 에피소드, 채용문화와 면접, 조직문화와 소프트웨어 프로젝트 성패, 마지막으로 장인으로서의 커리어 관리방법 책을 읽을까 말까 고민하는 사람들을 위해 그 내용들의 엑기스를 내 언어로 정리하면 다음의 내용으로 요약할 수 있다.     장인들은 더 많은 공장식 프로그래머들보다 보다 질 좋은 소프트웨어를 만들고 성공적인 프로젝트를 견인한다. - 그걸 모르는 회사들도 많지만 앞서 나가는 회사들은 안다. 회사와 정직한 관계를 맺어라.   장인은 지식으로 완성되는 게 아니라 한 가지 개념에 대해 몇 년 또는 평생의 실천을 통해 완성되는 과정이다. 장인은 로직을 잘 구현하는 사람이 아니라 고객의 문제를 해결하는 사람이다. 고객의 목적을 위해 솔직하게 조직 내 수많은 사람들과 커뮤니케이션을 할 줄 알아야 한다. ⭐️⭐️⭐️   장인은 싸운다. 드라마 속 직장인처럼 굴지 말고 준비가 되었다면 아니오라고 말해라. 그 대상이 아키텍터, PM, 프로정신이 없는 동료일 수도 있다. 이들을 포섭하고 장인정신에 믿음을 주는 것도 장인이 할 일이다. 안된다고 포기하지 마라.   장인에게 필요한 건 열정이다. 그 열정으로 팀에 활기를 불어넣고 소프트웨어를 똑바로 만들게 된다. 팀의 퍼포먼스는 약한 고리에서 결정된다. 그러니 아무나 뽑지 말고 아무 데나 지원하지도 마라. 장인정신을 지향하는 조직인지 꼼꼼하게 따져라. ⭐️⭐️   이 내용을 더 요약하면 “열정적으로 임하고 그리고 프로답게 굴어라” 라고 할 수 있겠다. 이외의 패러다임, 실행 관례 등 세부적인 사항은 책을 직접 보면서 글쓴이가 겪었던 사례를 통해 더 실감 나게 통감할 수 있을 것 같다.   내 삶의 방정식의 해  이 책 마지막에 이런 문구가 나온다.     소프트웨어 장인은 매일 출근할 때마다 ‘급여를 받는 그 이상을 생각하고 … 사회 진화의 사명감을 느낀다’    그 말에 감명을 받았다. 이건 끙끙 헤매고 있던 내 삶의 방정식의 해였다.  비슷한 정답은 여태껏 많이 있지 않았던가. 열정을 가지고 일하라는 멘토들. 그런 게 현실에서 동작하는 건가? 에 대해선 의문이 언제나 문제였다. 현실의 조직은 열정보단 상사의 기분에 따라 목적도 성과도 일하는 방법도 움직이는 것 같았으니 말이다.   (이건 냉소적으로 일에 임하는 주변 사람의 일부 사례로 세상을 평가한 내 잘못도 크다. 세상엔 냉소적으로 직업에 응하는 사람들도 있겠지만 아닌 장인도 있는 건데.. 나는 냉소적인 사람들이 있을 땐 절망했고 뜨거운 사람들이 있을 당시엔 소화를 못했다.)  그러나 이 책에서 소개된 장인정신을 가지고 행동한 사례들과 일어난 충돌과 열정을 가지고 회사에서 솔직하게 일을 하는 게 잘못된 게 아니라고 말해준다. 만약 개발자의 장인정신을 인정하지 않는 조직이 있다면 서로 헤어지는 게 나를 위해서도, 채용하는 회사에게도 좋다는 글쓴이의 주장도 있는데 그걸 보니 나니 속이 시원해졌다.  더 성능이 좋은 알고리즘, 더 최신의 더 많은 솔루션에 대한 이해, 나아가 성공하려면 누군가랑 알랑 방귀 뀌는 게 중요한 건가라고 괴로워하던 내게 장인정신은 말해준다. “정확한 방법으로 더 솔직하게 일하는 게 더 중요하다.” 큰 위안이다. 😭   난 부끄럽다.  이 책에는 저자가 무언가를 시도하려는데 반대하는 사람들의 이야기가 참 많다. 그런 걸 보다 보면 아 반대하는 저게 내 모습은 아니었을까.라고 급히 반성 모드로 괴로운 마음으로 책을 읽게 되었다. 그런데 그럼 어떠랴. 장인 정신은 완벽한 지식이 아니라 실천 지향적 이데올로기다. 실행 관례로 한다고 다 잘되는 것도 아니다. 그 당시엔 합리적인 반대였을 수도 있다. 하지만 저자의 확고한 믿음을 미리 접했다면 난 더 많은 리스크를 감수할 수 있었을 테고 반대하지 않았을 텐데. 지금 와서 보니 과거에 같이 일했던 동료들에게 미안하다.   그래도 드는 의구심 1g  이 책에는 크로스펑셔널, 애자일 등을 실행하다가 체하는 사례(행오버) 이야기가 반복해서 나온다. 그리고 근거를 단다 ‘잘하는 사람들이 제대로 해야 효과가 있는 거다.’  필자는 이쯤 오면 장인정신과 애자일을 통해 소프트웨어의 품질이 좋아진 게 아니라 없어도 품질은 좋았을 건 아닐지 의문이 든다 🤨 인과관계를 잘못 파악한 건 아닐까? 물론 이데올로기가 소프트웨어를 만드는 게 아니라 장인정신을 믿는 사람이 소프트웨어를 만드는 거니까, 틀린 말은 아니란 건 알면서도 의문이 드는 것이다. 장인정신을 믿고 누가 봐도 제대로 실천하고 있다고 보이는 (열정이 있는) 사람이 잘못할 확률은 거의 없으니까.   그런데 이게 만능 지팡이는 아니야 그래도..  이 저자는 장인정신이 소개하는 방법들이 만능 지팡이처럼 여겨질까 봐 밑밥을 깔아 놓았다. 특히나 TDD에 대해 저자는 많은 지면을 설득하는데 할당했다. 그러면서도 여러 단서는 달았다. 정확한 문구는 아니지만 내가 느낀 바대로 요약하면 다음과 같다.   “TDD를 처음 해보는 개발자는 방법에 익숙 해지는데 수년의 시간이 필요하다. 잘 안될 수도 있다. 그런데 그건 제대로 안 해서 그렇다. 테스트 커버리지의 숫자 자체가 목적이라 완성된 프로젝트에 테스트만 외주를 주는 프로젝트도 있었다. 그런 건 노카운트다. 내가 해봤는데 매번 좋았다. 그런데 당장에 변경에 집착해서 해 이걸 안 하다고? 명백히 좋은 건데 품질에 관심 없이 하던 대로 하려는 당신이 잘못된 거다. 올바른 방법으로 일하도록 PM을 설득 못한 당신 잘못이다. 다 품질을 높이자고 하는 거다. 결국은 이게 더 빠르다! 그러니 Try it!”   난 특히나 커버리지의 숫자를 높히려고 하는것에 염려를 많이 하는 편이였지만, 필자의 간곡한 설득 끝에 나는 믿기로 했다. 고로 앞으로 하는 펫 프로젝트도 테스트 코드를 먼저 적기로 했다. 실행 강령 1호다. 혹여나 저를 만난다면 정말로 그렇게 하고 있는지 꼭 물어봐주길 바랍니다. 😉  ","categories": ["devlog"],
        "tags": ["diary","Software","Work","Review"],
        "url": "/devlog/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "Devops 교육을 들으며 중간 정리",
        "excerpt":"Devops 교육을 들으며 중간 정리  MAC notes 에다 모든 걸 적는 게 습관이 되다 보니 블로그 형식으로 내 생각을 담아 길게 정리할 기회가 없어서 교육의 절반을 넘은 시점에 써보고자 하여 글을 쓴다.    멈추고 실행시켜보고 다시 보고 하느라 시간이 배는 들어간 것 같다.   일단 교육 커리큘럼의 내용은 다음과 같다.     Devops 문화 개론과 방법론, 목표 이해   AWS에 배포에 관련된 거의 모든 서비스 및 CICD, IaC, 쿠버 네티스, 모니터링, 보안까지 스타트업에 들어가서 클라우드만으로 서비스를 운영한다면 사용할 모든 도구들   위 서비스 플로우를 종합하여 개발자들과 소통하기 위한 기본적인 DDD, Micro Service Architect, 개발경험이 없는 사람을 위한 초급 백엔드 및 메시지큐   나는 테라폼이나 AWS, 젠킨스, 백엔드, 메시지큐는 익숙했기 때문에 사실 콘셉트만 이해시키려고 간단하게 짚고 넘어갈 것처럼 보이는 이 강의를 고르는데 고민이 많았다. 하지만 그때그때 필요에 따라 외부의 요구 또는 내 필요에 따라 그냥 무작정 써댔던 내 위태한 과거를 생각해볼 때, 난 기초부터 그리고 넓게 맥락을 훑어서 내가 알고 있는 게 뭐고 모르는 게 뭔지 파악하는 게 우선이다 싶어 이걸 골랐다.   공부하면서 든 부끄러운 생각  이미 너무 익숙해서 지겨웠던 부분은 빠르게 넘기고 대충 뭔지는 알고 있었지만 다른 부서 사람들의 힘에 기대서(?) 대충 넘어갔던 부분들은 자세히 보면서 무슨 콘셉트인지 어디서 어디로 흘러가는지 중심으로 주의 깊게 강의를 진행했다.    종이에 남은 커피자국 마냥 끔찍한 기술부채.. 오 하늘이시여 제게 그것을 미리 알아차릴 지혜를 주소서   공부를 진행하다 보니 ‘아 내가 개발을 할 때 사용하던 컨테이너들에 이런 옵션이 있었구나! 그래서 이렇게 우리 팀에 온 거구나!’ JIRA나 Repository 너머로만 보던 블랙박스의 실마리가 풀리면서 무릎을 치기도 하고 그때 테스트하던 환경이 정말 바보 같아서 불편했었는데 좀 더 인프라 쪽에서 이렇게 해줬으면 훨씬 더 테스트 환경이 유연했을 텐데!’ 하고 옛날의 고통들이 떠오르기도 했다. 동시에 개발자 입장에서 인프라팀이 일을 하기 쉽도록 좀 더 배려하면 훨씬 생산성이 올라갈 수 있는 부분(예를 들어 DML 코드인데.. 회상해보니 이건 당시엔 개발쪽에서 배려를 하려다가 업무분담을 확실하게 하자는 지침에 따라 짤렸다. 당시엔 인프라가 DB 스키마에 대한 오너십을 가지고 있었다.)도 보이니 정말 이불 하이킥이다. 😓   하지만 그것도 도구들이 굉장히 고도화된 지금에서 보니 할 수 있는 말들이라는 생각이 든다. Ansible까지 강의를 진행한 시점에서 회상해보건대, 클라우드가 대중화되면서 운영환경의 변화는 개발환경의 변화보다 훨씬 더 빠르게 변화한 것 같다. 내가 처음 인프라를 공부할 때는 물리환경에서 공부를 했었고 떠오르던 VMware는 오버헤드를 많이 잡아먹는 의심스러운 기술이었는데 말이다. 반면 백엔드 개발은 여전히 예전이나 지금이나 같은걸 요구하고 있지 않은가.    바쁜 벌꿀은 슬퍼할 시간도 없다   한편으론 개발자들의 생산성을 올리고 좀 더 제품을 견고하게 만드는데 필요한 방법들이 내 눈에 계속 보인다는 것은 개발과 운영이 이젠 더 이상 다른 부서가 아니라 거의 한 몸이 되어가고 있고 Devops가 필요한 이유를 잘 보여준다고 느낀다.   더 확장 해볼 지점  할 이야기는 많지만 구체적인 기술의 사용방법 이야기는 다른 글에서 별도의 주제로 다루도록 하고 내가 많이 부족하다고 느낀 점. 배운 것에서 좀 더 확장해볼 포인트를 짚고자 한다.      마이크로 서비스 환경에서 테스트를 좀 더 세련되게 만들고 커버리지를 올릴 방법이 간절하다.  1) DML 코드가 추가될 때 git 훅을 걸고 DB 컨테이너 만들고 및 데이터까지 이관하면 좋지 않을까?  2) 추가로 테스트에 필요한 데이터들도 코드로 관리해야 하지 않을까? (반성하건대 개별 개발자들이 매번 컨테이너 내부를 만지는건 바보같다)   Terraform, Packer 들은 새로운 서비스가 만들어질 때 그 개발 비용이 상당히 높지만 일단 적용하고 돌아가는 상태, 그 틀만 갖추어지면 그 뒤로는 유지 보수하기는 점차 편해질 듯한데.   Ansible은 그 기능의 범위가 너무나 넓고 실제로 사용빈도도 높아 보인다. 더군다나 Terraform, Packer 보다는 운영 중인 서버를 컨트롤하는 특수성이 짙다.  1) Playbook들을 중복하지 않고 효율적으로 관리하여 협업 시 맹점이 생기지 않도록 하는 방법  2) 수백 개의 호스트를 대상으로 한 실행결과가 코드는 물론 변경의도와 일치한다는 것을 명시적으로 증명할 방법이 필요하다.   최근에 내가 사용하는 리소스는 AWS에서는 얼마나 하는지 궁금해서 AWS Calculator를 돌려보는데 많은걸 AWS의 로직에 맡기는 서비스일수록 (한마디로 클릭만 몇 번해도 많은걸 해주는 서비스) 가격이 급격하게 오른다. (eg. API-Gateway, Fargate).   따라서 이런 기능들을 효과적으로 대체하거나 절약할 수 있는 부분이 있다면 절약하는 게 중요한 포인트로 보인다.  1) 예를 들어 프로덕션 단계가 아닌 회사라면 낮시간 이외에 인프라를 다 내려버리고 알아서 올리도록 세팅할 수도 있고  2) CICD툴과 Ansible을 연동하면 Fargate를 안 쓰고도 마치 Fargate를 쓰는 것과 같은 인텔리전트 한 서비스를 제공할 수 있을 것 같아 보인다.  3) 또 강의에선 다루지 않았지만 KrakenD 서비스를 잘 알아두고 싶었다. (nginx도 대체품이 될 수도 있겠지만 눈여겨볼만한 확장적 기능들이 라이선스를 요구해서 피하고 싶다는 인식이 내게 있다.)  ","categories": ["devlog"],
        "tags": ["devlog","Devops","retrospectives"],
        "url": "/devlog/Devops-%EA%B5%90%EC%9C%A1%EC%9D%84-%EB%93%A4%EC%9C%BC%EB%A9%B0-%EC%A4%91%EA%B0%84-%EC%A0%95%EB%A6%AC",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  Java generic 문법, 운용중인 pom.xml 파서 코드해석   Devops  운용중인 CICD 파이프라인 로직 분석하는 일에 집중함.   Shell  trap, getopts, shift, /dev/null 리다이렉션 , read, 확장치환, expr, 닷 env, pv, dialog, \\033, tty, dd, read   지금 보는 쉘 책은 좀 사치적이라(?) 사실 이렇게 쓸모가 있을까 싶기도 하지만 지금 일하는 환경이 쉘을 워낙 많이 쓰다보니 욕심이 나서 완독해보려고 한다. 저번 금요일부터 틈틈히 읽는데 당장 급해서 넘어갔던 부분들이 조금씩 이해가 되는게 보람차다.   Philosophy  거대한 전환 1시간 소개영상   Life     운동 1hr   생체배터리 60% → 20% 일단 하루를 마무리 하는 시점에 TIL과 다이어리를 써보기로 했다. 말이 길어지면 지는대로 할말이 없으면 없는대로 써보려고 한다. 너무 부담스러우면 안쓰게 되니까 짧게 일단 핵심만.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-1",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  다음의 이유로 사이드 프로젝트를 시작할것 같다. (1) 내 노트의 diff를 보고 싶다는 열망 (2) 수치를 내보고 싶은 갈망 (3) Mac notes의 내장 기능이 너무 약해서 Bear 노트로의 이전을 고려 중(코드 표현이든 타임스탬프를 찍는거든 노트간 이동이든 되는게 없음)  베어 노트가 sqlite 로 저장된다는 사실을 알아내고 어떻게 좀 예쁘게 뽑아낸 다음 보기좋게 Git으로 관리하려고 알아보는 중 대충 각 노트의 export까지는 파이선으로 짜놓은 레포지터리를 발견.  bear의 마크다운 문법이 다르고 github markdown에서도 지원안되는 형식이 많다보니 예쁘게 볼 수 있게 파싱 및 replace 기능을 하는 코드 + 주기적으로 레포지터리에 푸시하고 diff history, 통계수치를 저장하는 코드를 짜면 되겠다는 큰 그림을 그리는 중 이거하다가 하루가 다 갔다. 이상하게도 기록을 남기는 것에 대해선 열정이 끓어올라.   Devops  wget 쪽에서 hangup 을 일으키는 코드 발견. 당연히 실패하면 1이고 성공하면 0이겠거니 생각하지 말고 매번 timeout을 고려해야함.   Diary  오늘 야근해서 책 한줄도 못보고 TIL만 쓰고 그냥 잠.   Shell  sed, eval, 그레이브를 활용한 확장치환은 오작동을 일으킬 확률이 매우 높다, 변수를 참조에 실패하면 null로 반환되는데 이걸 쉘이 그대로 실행하다가 오작동을 일으킬 수 있다. 이를 예방하기 위해 활용할 수 있는 쉘 옵션(set -u -f) 실행전 참조가 끝난 문장을 보여주는 (-x)   Life     운동 시간 0hr   생체배터리 50% → 15%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-2",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language     Bear export 관련된 프로젝트 포크하고 함수작성시작. 옛날에 이런거 만들다가 recursive 함수를 썼던게 생각나서 설마 그런걸 해야하나 걱정했었는데 regex를 쓰면 금방 끝날것으로 보임. 바꿀 패턴도 뻔하니까. 그렇게 작성하다가 TDD를 해야한다는게 생각나서 unittest 패키지를 알아보는 중.   bool 함수 이름을 어떻게 짓다가 관련 글을 읽었는데 3인칭 단수 동사는 -s를 붙인다는걸 오랜만에 환기함.. 그냥 대충 막 쓰다보니 까먹고 산게 너무 많았다.     Devops       Svn import 와 copy의 차이점에 대해서 30분은 검색해본거 같은데 api doc을 봐도 뭔 그렇게 큰 차이가 있는것 같지도 않음. 둘다 커밋을 남기는것 점도 같다.   옛날 코드를 읽다보면 쓰지 않는 코드를 남겨두는 경우를 보게된다. 열심히 읽었는데 뭔가 애초에 실행도 되지 않게 해놓은 코드인걸 뒤늦게 깨닫는 경험을 했다. if [ 0 -eq 1] 이런 느낌. 지우려면 지우던가(아니면 주석이라도!) 소프트웨어 장인 책에서 “언제나 처음 왔을 때보다 깨끗하게 해놓고 캠프장을 떠날 것” 이라는 원칙이 생각났다.   왜 그럴까. 자신이 무엇을 하는지 정확하게 알기 어려워 리스크 처리하는 에너지가 커지면 뭐든지 더러워 지는것같다. (감정장애로 온갖 물건을 주워오고 나아가 쓰레기 마저도 안버리는 사람들이 생각난다)   냉정하게 생각해서 그게 업무에 큰 영향을 미쳤느냐? 그건 아니다. 그걸로 날린 내 시간도 그렇게 큰건 아니었다. 다만 문제는 내가 접하고 있는 환경이 그런 망신창이라는걸 꺠닫는 순간 사기가 떨어지는 문제가 제일 큰것 같다. 내가 왔을때 보다 더 깨끗한 환경을 남겨주는 것은 문화와 사기의 문제다.   Diary  지금 출퇴근에 하루에 4시간씩 쓰는 중인데 어떨땐 괜찮은것 같다가도 정말로 지칠때도 있다 2주일만 더 참자. 운동늘 날엔 샤워를 하고 화장품 바르고 설거지하고 조금이라도 좀 누워서 긴장이 풀려서 30분 정도 어정쩡 거리면 잘 시간이다. 책을 30분이라도 봤어야 했는데… 대신 일찍 일어나니 출근전에 아침에 1시간 정도 책을 볼 시간이 나긴하는데 보통 아침엔 그냥 책 보단 코드가 보고 싶어져서 안본다. 정말 에너지를 끝까지 뽑아내려면 눕는것만 2주만 참아봐야겠다.   Life     운동 시간 1시간   생체배터리( 50% → 15%)   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-3",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language     Bear-Auto-Publish 다시 함수를 작성, github PR 체크리스트 템플릿 만듬. Angular.js 프로젝트꺼 가져와서 절반은 내 취향에 맞게. 나 혼자라도 지켜가면서 하나하나 지켜가는 재미를 찾아보려고함(시간이 지나 내가 봐도 모르면 남이 보면 더 모른다. 이 부채가 없도록 잘 처리하는게 고수인듯). Issue 메뉴 활성화해서 프로젝트 목표를 적은 이슈작성, 테스트에 필요한 기본구조 짜서 병합.   화면보호 안걸리게 하는 프로그램이 필요해서 배치 하나 작성.   Shell  HERE STRING, touch(오래 전부터 이게 왜 있나했는데. 타임스탬프를 조정하는게 원래 기능이었다. 그런데 타임스탬프를 일부러 조정할 케이스가 있나? 테스트 환경 구축?) , besename(이 커맨드가 왜 있는가 했는데 오늘 읽다보니 실행환경에서 자유로운 쉘을 만드는데 유용했다), : 널커맨드(이게 파일의 내용을 비우는데 가장 적합한 방법이다. 생성할 때도 echo “” &gt; file , touch file 이런거 하지 말고 : &gt; file 이 제일 짧다. ‘( )’ 서브쉘을 값을 가져오기 위해서 뿐만 아니라 cd 같이 실행환경을 바꿀 수 있는 명령어로 부터 독립적으로 실행하는데 쓸 수가 있다.   cd “${0%/*}” program=${0$$*/}— **확장쉘 **파일의 디렉토리만 추출하거나 파일이름만 추출할 수도 있다. 이건 처음봐서 신기했는데 실용성이 있는지는 모르겠다. 가독성도 떨어지는데 신선해서 메모는함.   Philosophy  Regex 사용에 비판적인 예전에 팟캐스트에서 자주 듣던 포프님의 의견이 담긴 유튜브한편. (그럼 확장쉘은 더욱더 쓰면 안되겠네)   Diary  다이어트 한다고 잡곡양 절반으로 줄인게 슬슬 영향이 오는듯. 퇴근길에 술이 생각남. 이번주 일요일엔 리피딩 데이다.   Life     운동 시간 0 hr   생체배터리 45% → 20% Â  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-4",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  도커 및 쿠버네티스 셋팅. 도커 기본에 대해 다시 정리하는 과정진행.  Philosophy  해외에서 물건을 사는데 입금을 해보려니 뭔가 수수료가 만원은 나올거 같아서 옆에 비트코인 결제가 있길래. 요즘 비트코인 싸니까 괜찮을려나 하고 비트코인 구매까지 해서 송금하려니 수수료가 2만 5천원 나왔다. 유시민이나 버핏, 게이츠의 팩트폭력이 대중의 광기는 잠재울 수 없어도 역시 결국 현실은 진리에 수렴하는 걸까.  Finance     장기국채인버스레버리지(TTT) 진입  진입 근거 1) 물가가 잡히기 전까지 최소 3개월에서 2년 동안은 금리렐리가 예상 2) 그래프를 보니 장기적으로 금리가 오른다는 예상이 올초부터 확고했음에도 이게 반영되는건 상당히 늦었음. 확고한 사실이라도 장기적 흐름에 대한 시장의 반응은 느리다고 보는게 맞는것 같다. 따라서 3개월에서 1년 동안 보유할 가치가 있어 보임. 3) 푸틴이 건재하고 석유 증산의 속도는 굉장히 느릴것으로 예상됨. 이전 고유가 흐름에서 얻은 경험으로 인해 셰일가스 및 플랜트 산업의 의사결정은 굉장히 보수적으로 이뤄질것으로 예상되고 있음. (미국 대통령이 구걸을 하는걸 보니 증산이 안될것같다.   고배당 ETF(HYD) 아웃.  진입근거와 포지션을 뺸 이유. 1) 주요 성장주들의 주가가 코로나 전까지 떨어짐에 따라 유동성에 의한 거품이 걷어졌다고 판단함. 그런데~ 유동성의 거품은 08년부터 쌓인거라 아직 더 남았다. 그 거품의 부채가 금리가 올라가면서 진짜로 꺼지는 중인 상태로 진입했다. 2) 인플레가 거의 잡혀간다는 생각을 했고 따라서 주식자산을 매입해도 된다고 생각했음. 인플레가 있고 자산가치가 요동치는 지금 가장 논리적으로 옳은 주식은 현금을 생산해내는 배당주겠거니 하고 삼. 그런데 다 떨어지네🤬 시장은 패닉에 빠져서 비정상적으로 더 떨어질것이 뻔해서 exit     Diary      오늘은 본격적으로 베어 프로 결제하고 제대로 쓰기 시작 정말 예쁘고 맘에 든다. 도대체 어떻게 Notes를 참고 썼나모르겠다.      Life       운동 시간 1hr   생체배터리 60% -&gt; 20%  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-5",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  도커복습 마무리. 쿠버네티스 개요 진입.   Philosophy  지금은 연재가 끝나버린 진보신학 팟캐스트를 3년째 듣고 있는데 질리지가 않는다. 이 방송의 기획자는 보수와 진보라는 양극을 오가는 학문 사조의 파도같은 변화를 잘 설명해주고 동시에 현실과 신학의 접목에 하기 위해 완벽한 답보단 애매한 고민을 강조한다. 덕분에 어디서나 쓸 수 있는 만능 프레임은 잘 주지 않는 대신 직면한 문제를 해결하기 위해선 어떤 프레임으로 해석하는게 좋은지 고민하게끔 장려한다. 그덕인지, 이게 질리지가 않는다. 어쩌면 이게 인생의 묘미. 질리지 않는 삶의 비법일지도 모르곘다.  이건 나름대로 재미가 있지만, 경제나 세상 돌아가는 이야기도 알고 싶다보니 새로운 팟캐스트를 찾는중. 오늘 이런 회사가 좋네, 누가 막말을 했네 그런 이야기보단 산업 단위의 인사이트, 다양한 자산군의 성격에 대한 소개, 역사적 흐름에 대한 나름의 추측과 근거를 대는 방송을 찾고 싶다. 내가 모든걸 할 수가 없으니 그걸 대신 연구해주고 설명해줄 수 있는 방송이 있으면 좋겠다.  Diary  안하던 짓을 다 해보고 해보고 싶다는 결의 아래 화장품도 많이 사고 있다. 비싼건 아니어도 종류나 아이템은 다양하게 사보는중(MTS 같은). 기초화장품만 따지면 어머니보다 더 많이 산것 같기도 하고. 나름 꼼꼼하게 바르고 의자에 앉아있으면 기분이 묘하게 좋단말이지.  Life     운동 시간 1시간   생체배터리70% → 30%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-6",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  MS에서 만든 SQL CE(Compect)라는게 있던데 성능이 Sqlite보다 월등히 좋다. (지우기 같은 작업만 SQL 라이트가 미소하게 좋다) 그런데이 지식이 쓸모가 있을까?   쿠버네티스 — Control Plane, Node, API resource 개념, Imperative Declarative 작업방식, Pod, ReplicaSet, Deployment, Service( ClusterIP, NodePort, LoadBalancer, External), ConfigMap, Secret, Namespace, 자원할당 및 제한, Job, CronJob, DaemonSet, Ingress   이 학습과정에서 본격적으로 익숙하지 않은 영역에 들어섰다. 예전에 회의시간에 이름을 간간히 듣던거나 뭔가 우리팀이 가지고 있던 문제를 해결하기 위해서 다른 팀이 제공했던 리소스들이 보이는데 그때 이걸 이렇게 처리한거였구나 하고 깨닫고.. 사실은 돌아가는 플로우 전체를 알고 있어야 했는데 하루하루가 당장 내 앞에 놓인 일만 하느라 마음을 다독이느라 다른걸 흡수할 여력이 없었던 그날들이 아쉽다.   Shell  tree   Life     운동시간0.25hr   생체배터리(50% → 25%), 밖에 한번 나가볼까 했었는데 아침 5시 30분에 일어나서 할일도 없어서 공부하다가 불이 붙을때면 나가기가 싫어진다. 옛날에 하지 못한 공부에 대한 아쉬움의 망령들. 행복한 나날이다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-7",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "짜잘 짜잘스 맥팁 1) 영어+한글 스펠링 체크 문제 (2) 베어 그레이브 문자 입력 불가",
        "excerpt":" 거창하게 정성스레 쓰긴 귀찮아서 메모장에 적어놓은 것들을 신속하게 업로드하는 컨셉의 #patty 태그 시리즈. 2~3개씩 내가 발견해낸것들을 올릴예정           예를 들어 “Node에’ ← 이런식으로 영어에 한글조사를 붙이면 맥의 맞춤법 검사가 틀린다고 판단하는 문제. 보통 맞춤법 검사를 끄라는 조언이 검색에 먼저 보이는데 내 입장에선 중요한건 영어니까, 맞춤법 검사를 끄긴 싫다. 그럴땐 keyboard 설정에 들어가 체크할 언어에서 한국어만 끄면 빨간줄이 사라지고 영어 스펠링 체크를 다 꺼야하는 참사도 피할 수 있다.            Bear app 을 쓰다보면 가끔 그레이브(`)가 입력 안될때가 있다.  원인 첫번째, system preference 류의 창에서 인풋박스를 화성화 시켜놓고 탭으로 이동해 베어앱에서 노트를 쓰는 경우이다. (system-keyboard-text 에서 자주 쓰는 명령어, 용어 들을 매일 단축어로 등록하다보니 자꾸 삐걱거려서 알게되었다)  원인 두번째, 첫번째가 아닌 경우 그냥 버그다. 다른 창을 활성화 시켰다가 다시 베어앱을 포커스하면 입력이 된다. 아무래도 그레이브 문자가 문서를 전체적으로 파싱하게 만들다보니 어디선가 꼬이는가 보다.       ","categories": ["MAC"],
        "tags": ["Tip","Mac","patty"],
        "url": "/mac/mac-tip",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Diary  좋지 않은 일이 벌어지는 날이 있을 수도 있다. 그때 너무 무너지지 않고 평온하게 몰입할 수 있는 날이 오기를 믿는 수밖에. 기분이 안좋아도 꾸준히 하는건 포기하지 않음으로서 그런 자신을 사랑할 수 있다면 가장 좋을것 같다. 『콜레트는 죽기로 했다』라는 만화책을 요즘 보는데 명계의 왕을 섬기는 재봉사가 있다. 150년 동안 그의 주인은 외출을 안해서 자신이 만든 옷이 쓸모가 없어지자 굉장히 힘든 시간을 보내게 된다. 하지만 그럼에도 불구하고 재봉사인 자신이 무언가를 만들지 않으면 무슨 의미가 있을까하고 재봉을 놓지 않았다는 이야기가 나온다. 결국은 명계의 왕이 외출을 하면서 그 노력이 열매를 맺는데…  열매를 맺고 안맺고를 떠나 인생은 너무 길고 제정신을 지키기 위해선 그런 부단한 노력이 필요한것 같다. 진정으로 객관적으로 삶을 바라보고 살기엔 인간의 정신은 너무 여리다. 때로는 앞뒤가 안맞더라도 꾸준히 하는 자신을 사랑하는 수밖에 없을지도 모르겠다. 기분이 안좋은 날은 그냥 놓아주고 가치판단, 장기적은 판단은 미뤄둠으로서 슬픔에 삶의 관점이 침몰하지 않도록 해야지. 그런 믿음에서 운동도 하고 일기도 쓴다. 뭐 술먹고 그냥 비디오를 보고 소셜미디어에서 좋아요 누르면서 관심을 호소하는 것보단 나았을려나?   Life     운동 시간 1시간   생체배터리 60% -&gt; 10%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-8",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  오랜만에 js 로 지긋하게 현재 사용중인 툴을 좀 더 편하고 휴먼에러 없이 쓸 수 있도록 개선하는 스크립트를 짰다. 어제는 하나도 뭔가에 집중하지 못하고 자꾸 외부적인 일을 신경쓰느라 화가 나있었는데. 오늘은 평온했고 너무 재밌었다. 그러니까 걱정이 된다. 어떤 자극이 오든 아~무 렇지도 않게 덤덤하게 넘기면 좋겠는데이런 외부 자극에 따라 하루를 마무리는 하는 기분이 왔다갔다해서야 😢… (물건너 사람들은 점심시간 이후에 명상까지라도 해가면서 이걸 소화한다던데)  정말 하루에 수십통 전화받으면서 일정이 엎어지고 감정이 오고가는 케이스를 소화해내고 그걸 저녁에 술 우왁하고 먹으면 잘 풀린다고 주장하는 사람(인지 아니면 드라마속 인물들인지)들이 신비롭다.   Devops  배포과정에 중간에 문제가 생겼는지 아닌지 그걸 일일이 사람이 판별해야 한다면 CICD 의미가 있을까? 말도 안되는 상황을 말이 되게 하는게 사람이 할일이구나 하고 노력해야지   Philosophy  사놓고 한동안 방치하고 있었던 종이책 변화하는 세계질서를 읽었다. 주중에는 시간이 안나고 (e북이 아니면 책을 못읽겠다) 주말에는 진득하게 IT 공부를 하고 싶은 욕망이 앞서다 보니 못읽다. 옛날에 제레미 다이아몬드 책도 그렇지만 내가 항상 고르는 책들은 통섭적 관점에서 인간사를 해석해보려는 책들이 많은것 같다.   Life     운동 시간 0hr 오늘부로 헬스장 기간이 끝났다. 3개월 동안 일을 쉴때는 뭐 일주일에 5번은 나갔고 일하고 나서는 일주일에 3 – 4번씩 나갔다. 어떤 이유가 있어도 이게 가장 좋은 투자이자 공부인것 같아서. 덕분에 살에 탄력도 붙고 무게도 처음에 비하면 2배는 드는 상태라. 만족감은 있는데 관절 쪽에 통증이 올때면 마음대로 되지 않는게 슬프다. 처음 운동을 할때 최대자극을 주기위해 악을 쓸때가 참 재밌었는데 점차 어떻게 하면 안아프게 운동을 하지? 고민을 하다보니 뭔가 목적의식도 흐릿해져 재미가 없어지는 부분이 있다.   생체배터리( 60% → 30%)  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-9",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  대충 흉내만 내던 정규식으로 제대로 일의 효율을 낼 수 있도록 고치기 시작하니까 너무 재밌어서 딴거 안하고 이것만 하고 있다. 가장 동기부여가 되는건 미래의 내 시간을 아껴줄거란, 인적 실수를 없애줄거란 기대감. 이제 어느정도 손에 익어서 작업 속도도 나고 한참 재미있는 시절을 보내고 있다.   Devops  쿠버네티스 파드 배치전략 중 Node Affinity를 활용한 방법   Diary  이번주 월요일을 나락을 찍고 점점 에너지를 회복해서 점점 불안감 없이 목표를 향해 돌진하고 있다. 업무시간 중에 집중도도 점점 좋아져서 스크린타임을 보면 폰을 보는 횟수도 확연히 줄어들고 좋다.   Life     운동 시간 1hr 오랜만에 빌리의 부트캠프 한방 땡겼다. 운동을 꾸준히 했음에도 여전히 힘들었다. 아무래도 웨이트중심으로 하다보니 유산소는 거의 못해서 지구력은 꽝인가 보다.   생체배터리 70% → 30%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-10",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  어이없게 시간을 날렸다. js에서 regex는 console로 찍어보면 //g 이렇게 아무 값이 없어도 하나의 오브젝트인데 그렇게 써야하는걸 모르고 “//g” 이렇게 문자열로 만들어버리고 그걸 자꾸 정규식 arg로 넣고 있었다. 왜 이게 matching이 안되지 하고 삽질을 했다. (어제까진 잘하다가 오늘..) 또 null을 자꾸 함수에 집어넣고 그걸 눈치못채고 시간을 많이 낭비했다. 단절된 망이라 개발환경이 제한되어 타입스크립트를 못쓰는게 한이다. 매번 함수마다 타입검사를 하는게 시간 버는 길이다. 오랜만에 js 쓰다보니 타입을 몰라서 하루종일 시간을 낭비했던 추억이 새록새록.   Philosophy  기존에 써놓은 노트와 예전에 찍은 사진들을 정리하는 가졌다. 기록을 어떻게 태깅하고 분류하느냐에 계속 고민을 하게 되는데. 단순히 심미적인 이유가 아니라 이런 분류 활동들이 사고 및 행동을 반성하는데 큰 도움이 되기 때문이다. 기록의 총량을 꾸준히 다이어트 해가면서 새로운 기억들이 들어올 공간들을 만들어야 하는데. 이런 이유로 지울때 마다 **인생에서 무엇이 소중한지 무엇에 애정을 가지고 만족하게 되는지 적나라하게 드러난다.    **(아이디어야 나보다 더 좋은 생각을 하는 사람들도 많아서 미련이 없고 시간이 한참 지난 지금 다시 읽을때 영민함이 느껴 지지 않는다면 아이디어로서 생명력이 없는거니 과감하게 지우는데 그래도 아쉬운 것들은 특히 사진, S3 Glacier 에 집어넣는 느낌으로 외장하드나 네이버마이박스에 집어넣는다.)   Life     운동 시간 0 hr   생체배터리 40% → 15%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-11",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  너무 많히 찍히는 로그에 대해 딱히 필터링 하는 기능이 없어서 자바스크립트 정규식으로 직접편집하는 잘라서 보는 방법을 실행해보고 있는데, 오픈소스 모니터링 도구에선 일반적으로 익숙한 로그레벨이나 호스트 등 어트리뷰트를 필터하는거 말고 좀 더 편리하게 하는 방법이 생겼는지 궁금해졌다. 공부하다보면 배우게 되겠지   Shell  sed를 소프트링크까지 반영하는 옵션 (그런데 이걸 왜 책에서 다뤘을까? 소프트링크로 관리하는 테크닉이 생각나는게 없어서 의문), unixtime이라고 불렀던거 원래 이름은 epoch라고 한다. 쉘을 동시에 여러번 실행하는 상황에 대비한 파일 네이밍 테크닉 ( $$, mktemp), od hexdump, 바이너리를 읽는데 쓰는 strings, comm, umask, 압축 중간과정을 빼는 커맨드 연결방법, tar archieve를 이용해 로컬파일시스템을 거치지 않고 원격지에 바로 압축을 하거나 압축파일을 로컬에 바로 푸는 방법, rsync, xargs를 이용해 너무 많은 명령행 에러 회피하기   Diary  맨난 잘 오던 버스가 안와서 당혹스러웠다. 1시간 마다 오는 버스인데다 출근시간이 2시간인데.. 😇 다음 생엔 꼭 새로 태어나게 해주세요.   Life     운동 시간 0hr   생체배터리 80% → 15%  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-12",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  쿠버네티스 파트 완료, 쿠버네티스 운영에 사용하는 툴들 Lens, k9s, kubefwd, kail, kubectx 사용방법 정리함. 커맨드라인 하나 안보고도 모니터링 툴을 선택적으로 셋팅하고 웬만한 작업들을 바로 지시가능한 Lens를 보고 깜짝놀랐다. 미래엔 깃파일만 줘도 알아서 배포전략과 매니페스토까지 AI가 제시해서 okay 누르면 끝나는 세상이 오지 않을까?  인프라의 사용은 돈과 직결되니 결국 사람이 결제는 하겠지만 나는 뭐해(?) 종장엔 개발로 가야한단걸까. 긍정적으로 생각하면 컴퓨터한테 지시내리는 과정에 신경쓰기 보단 운영의 대상이 되는 사람들과 접촉에 더 집중하는 시대가 오게되는걸까.   Diary  많이 시도하는 만큼 많이 다 칠 수도 있다. 이상하게 꼬아 생각하지 말고 갈길을 가는게 스킬이야.   Life  운동 시간(이사준비하느라 집안일만 3시간) 생체배터리(50% → 30%)   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-13",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  큰 일이 끝나서 Bear-Auto-Publish 다시 시작했다. 확실히 테스트를 해놓으니 뭔가 체계적으로 코드를 신뢰를 할 수 있다는게 기분이 좋다. 만족감 때문이라도 습관을 유지할듯하다.   Diary  메슬로의 인간의 욕망을 옛날에는 터무니 없다라고 생각했었는데 요즘은 잘 이해가 간다. 겁에 질린 상태에서 안정만 찾는 상태에서는 진취적인 계획도 관계에 대한 갈망도 보이지가 않았다. 공포에서 벗어나고 무언가 한발씩 내딛는 발전이 시작되자, 관계속에서 인정받고 싶다는 갈망도 증폭되는것 같다. 그렇게 점차 외로움과 소외를 인식하게 되는게 살짝 피곤하다. 참 오랜만에 느끼는 감정이다.   Life     운동 시간: 이사준비 하느라 2시간 정도 파머 워크 운동 (?)   생체배터리: 60% → 30%, 요즘 아침에 너무 일찍 깨지 않고 적당히 출근시간에 맞춰서 일어나지는 듯해서 좋다. 저녁에 극단적으로 피곤한것도 줄어서 힘들지도 않아서 기분이 좋았다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-14",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  모든 방면에서 불확실성을 제거해야한다는걸 배웠다. 특히 뭘했는지 알 수 없는 작업들은 더 그렇다. (예를 들어 입력값이 블락된채 손으로 하는 패스워드 변경) 가시적으로 그리고 작업을 똑같이 재현할 수 있게 내가 뭘 했는지 다시 확인 할 수 있는 방식으로 작업을 해야한다.  사소한 일이라도 신속하고 편리한 방법보다 계획되고 가시적인 작업 방법을 믿어야 한다.   Life     오늘도 당근마켓 물건보러 오신분 접대하고 땀 뻘뻘 흘리면서 짐싸다가 쉬면서 교양 유튜브 보다가 밤을 다 보냈다. 에어컨도 팔아서 이제 에어컨이 없다.   생체배터리( 40% → 15%) 거의 2년만에 흰우유를 아침에 마셨는데 탈이 나서 하루종일 힘들었다. 내가 우유 소화를 못하는걸 처음 알았다. 자주 마실때는 적응을 해서 몰랐나보다.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-15",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "Linux — 정확하고 신속하게 패스워드 바꾸고 흔적 지워버리기 (Change passwords and erase traces accurately and quickly)",
        "excerpt":"매니페스토를 이용하지 않고, 손으로 하는 환경에서 사용하기 위한 스크립트. 실수를 예방할 수 있는 대신 평문으로 입력되는 만큼 히스토리를 없애기 위한 작업도 포함한다. (Scripts for use in hand-to-hand environments without using manifestos. Instead of preventing mistakes, there are processing tasks to eliminate history as they are entered in plain text)   command  $ echo \"CurrentPW1\\nNewpassWord2\\nNewpassWord2\" | passwd   $ for i in {1..3} ; do history -d $(expr $(history 1| awk '{print $1}') - 3);   ","categories": ["Unix-Linux"],
        "tags": ["tip","bash"],
        "url": "/unix-linux/linux-change-passwords-and-erase-traces-accurately-and-quickly",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  젠킨스의 파이프라인을 이용한 CICD 파이프라인 구축 및 딜리버리.   내게 익숙한 HTML 인풋 폼으로 하나하나 수정하는 방법대신 git으로 파이프라인의 내용을 관리하고 스테이지와 스탭으로 절차를 나눠서 관리할 수 있는게 새로웠다. 그런데 여기까지 보고 나니 쿠버네티스로 관리를 하게 되면 CICD툴의 역할은 어디까지로 정해야할지 고민이 들었다. 많은 툴들이 중복된 기능을 가지고 있다는게 점차 느껴지면서 어떤게 베스트일까. 그런 고민이 깊어진다.   Philosophy  쿠션어에 대한 글을 브런치에 적었는데 뭔가 가슴속에 끙끙앓던 이야기들을 적고나면 참 재미있다. 스스로 뽕에 찬다고 해야하나.. 뭔가 살아있는 기분도 들고 기분이 좋아진다.   Diary  오늘 아침부로 거의 이사를 다 마무리 지었다. 화장실 대청소와 필요한 수납장들을 택배 박스로 만드는 작업만 하면 새로 주문한 가구들이 오는대로 정리작업이 끝난다. 모든게 다 맘에 들어서 충족감이 너무 크다.   Life     운동 시간 0hr, 이삿날 고생을 해서 전완근만 오버트레이닝된 상태다. 조만간 헬스장에 가서 다시 운동을 시작할 예정. 집에 가까운 헬스장이 상태가 마음에 들면 좋겠다.   생체배터리 70% → 40%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-16",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  AWS Code build, deploy, Pipeline 을 젠킨스와 연동시켜 빌드파이프라인 구성. Github Actions, CircleCI 즉 SaaS를 이용한 CICD 관리. Kubernetes Agro를 이용한 CICD 중 초반부까지 내용을 진행했다.   manifest 기반의 솔루션들이 제공하는 기능들이 워낙 넓다보니 여태껏 강의를 들은걸 보면 보면 같은 작업을 다른 선언 문법, 다른 이벤트 소스에서 진행하는 방법이었다. 개인적으론 빌드랑 배포를 어떻게 하든 결국 서버를 관리한다면 쿠버네티스를 볼 수 밖에 없고 쿠버네티스와 엮여 있는 방법으로 관리하는 방법이 가장 낫지 않을까 그런 생각. 또 쿠버네티스 클러스터에 바로 올라가 서비스의 빌드 배포를 모두 가시적으로 보여주는 Argo의 위력에 감탄   Diary  이사한 기념 다이소가서 물건 잔뜩사고 집을 물건 꾸미며 가성비 폭발하는 하루를 보냈다. 그런데 사람 힘을 감당해야하는 물건은 다이소 물건이 별로 안좋은거 같다. 플라스틱소재 밀대가 쓴지 3분만에 완파되버렸다. 밀대 만큼은 철재소재로 제대로된 물건을 주고 사자.   그런건 크게 중요하진 않고 다이소에서도 무인계산을 도입한걸 봤다. 양산에서도 보긴 했었는데 남부터미널 점은 훨씬 힘을 준듯한 인상을 받았다. (카카오페이 할인까지 하는걸보니) 이게 미래인가 하는 기분을 느꼈다. 이런 하급품을 취급하는 자본주의의 후미진 골목에선 고객이 저렴하게 물건을 살 수 있기만 한다면 도둑질 빼고 다 하게 될것같은 미래가 보였다. 가까운날 다이소에서도 공짜로 물건을 사고 싶을땐 앱에서 지시하는 대로 5분 정도 물건을 재배치하고 물건을 대신 받아가는 geek 일자리가 생기지 않을까. (지금도 당근마켓의 용달사업은 그렇게 영업을 하는것 같다)   Life     운동 시간 0.5hr 아직도 전완근이 아프다.   생체배터리 40% → 15%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-17",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  잘 안될때 1) 일단 멈춘다. 2) 문제의 원인을 직관적으로 찾기는 시도를 멈추고 3) 차분히 하나하나 집어 가는게 더 빨리 문제를 해결하게 된다. 그것보다도 더 중요한건 평소에 문제가 발생하면 가능성이 하나만 남도록 트래킹 가능하게 짜는 준비성이 필요하다.   Devops  Argo rbac, Argo SSO 구성, Git Actions가 드라이브하는 Argo CICD 파이프라인 구성.   Git Actions에 대한 인상이 점차 좋아지는 중. 다른 CICD툴에서 관리자가 CLI 나 웹서비스를 통해 Apply하는것보다 가시적이고 다양한 정보 속에서 히스토리와 버전을 하나하나 남겨가면서 작업할 수 있다는게 굉장히 매력적이다. 뭔가 잘못 됐을때 history와 상태 정보를 로컬에서 명령어로 하나하나 뒤져가면서 한다고 생각하면 정말 많은 숙련이 필요할것 같은데 Argo와 함께하는 GitOps는 작업의 안정감을 극적으로 올려줄 수 있는것 같다.   Shell  awk , host, paste, csv 다루기, md5su, env, rev, cat 파이프를 활용한 원격 스크립트 실행, 통신성능 테스트, FTP 히어 도큐먼트 패턴, nc, arp -an  많이 익숙한 내용이 많아 금방금방 넘어갈 수도 있는데 뭔가 강박적으로 하나하나 보고 싶단 생각에 시간을 낭비하는것 같기도 하고 과연 어디서 이런걸 활용할 수 있을까 의문도 든다. 책에 가끔 내가 잘 모르던 운영에 대한 가이드가 있어 그거 보는 재미로 보는중.   Finance (리밸런스 데이)     TTT 팔기로함. 처음 들어갔던 근거인 장기간 금리 상승에 대한 기대가 깨졌다. 경기침체에 대한 우려가 급격하게 진행되면서 굳이 금리를 올리지 않아도 수요가 파괴되서 물가가 잡혀가는 그림이 그려지고 있다.   CWEB 진입: 근거1. 역사적 저평가 시점 아직도 S&amp;P 평균 PER에 미치지 않는 미국보다괜찮음 2. 1~3개월 기준 모멘텀 투자의 근거가 다져짐. 3. 미국이 스스로 물가를 컨트롤 할 수 없다는 확신이 강해짐. 4. 미국이 받는거 없이 중국 관세가 풀어주는 그림이 나오고 있다. 5. 중국이 저렴한 러시아 원유를 수입하면서 중국인들의 구매력을 유지하는 그림이 유지되면 미국의 경제침체를 중국은 피해갈 수 있음.   GLD 진입: 근거1. 실제로 경기침체에 대한 보고들이 2분기 실적 시즌부터 시작될텐데 경기침체 시즌 GLD 수입이 역사적으로 높음.   SQQQ 진입: 근거1. 경기침체에 대한 헷지 배팅   기타: 테슬라 1주 애완주식으로 삼. 상하이 봉쇄에도 가이던스 만큼 출하량 내는거 보면 굉장히 생산적인 문화가 있는듯함. 약점이 없는 회사. 그런데 개별주식을 사는건 별로 내키지 않아서 1주만 응원하는 마음에서 샀다.   Life     운동시간 20분   생체배터리: 40% → 10%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-18",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  EKS 환경에서 Argo를 구축하여 운영하는 실습 (로컬 쿠버네티스를 외부 SaaS와 연결하기위해 Ngrok을 사용했다면 EKS와 외부 SaaS를 연결하기 위해 LB를 클러스터 앞단에 연결하고 인그레스를 생성하는게 핵심), yq-jq 명령어를 통해 텍스트를 조작하여 커밋하는 방법, CloudWatch 에이전트를 EC2에 설치하고 위자드를 통해 config를 생성, 대시보드 셋팅, EC2 서버 및 App Load Balancer 에서의 로깅을 CloudWatch 또는 S3에 저장한 다음 Athena로 처리하여 모니터링하는 방법   Shell  HTML 헤드를 조작하는 공격방법에 대한 이야기와 감지방법에 대해, awk 액션과 액션의 조건식 사용   Diary  운동하러 갔다가 폭우를 엄청 맞았는데 초등학생때 롤러브레이드 타고 멀리 갔다가 비가 와서 비맞으면서 집에 오던 추억이 떠올랐다. 기분이 좋았다.   Life     운동시간: 1시간 30분, 집근처 헬스장 12개월을 끊어버렸다. 원래는 적당히 하다가 격투기 특히 풀컨택트룰에 아주 든든해보이는 머리보호구를 하는 쿠도가 정말 하고 싶은데 신촌까지 매일 갈수도 없고 일단 하다가 회원권을 이전하려면 할 수 있다길래 12개월을 끊었다. 정 안되면 크로스핏을 해야지.   습관: 매일 일기장 적는것까진 습관을 들여놔서 (맥 Reminder가 인생을 바꾼느낌) 조금 더 나아가 나쁜 습관부터 없애자는 차원에서 없애고 싶은 습관에 대한 짤막한 보고도 여기에 추가하려고 한다. 일단 첫 목표는 짤막하게 남는 시간에 (특히 밥먹고 난 다음) 유튜브 보면서 너무 시간을 뭉게고 다음 수행을 미루는 습관을 없애고 싶다. 정말 내게 필요한 영상만 보는거면 하루에 30분이면 충분할것 같다. 그래서 목표는 30분 → 일단 오늘 유튜브 1시간 40분   생체배터리( 40% → 15%)   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-19",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  파싱을 할때 단위 테스트를 할때는 문제가 없었는데 여러 마크다운을 섞어 놓았을때 여러 케이스들을 처리하지 못하는 경우가 생겼다. 생각해보니 처음부터 복합적인 마크다운을 복붙해서 테스트를 짜고 함수가 목표하는 변경만 equal assertion하도록 짰으면 되는거였다. 😭 오마이갓   Devops  오늘은 배포하는데 배포환경에 문제가 있었는데 원인을 뭔지 빠르게 찾지 못해서 시간을 많이 썼다. 단순히 앱과 같이 돌아가는 WAS 인스턴스가 살아있냐 정도로는 실질적인 배포를 보장할 수 없다는걸 배웠다. 인스턴스에 충분한 메모리 용량이 확보되었는지 큐가 포화상태가 아닌지. 이해할 수 없는 이유로 배포를 할 수 없는 상태가 될 수 있다는걸 염두에 두고 배포전에 미리 체크를 하도록 스크립트를 준비하고 또 문제가 생겼을때 그 부분을 바로 감지해낼 수 있도록 파이프라인을 미리구성해야한다.   Philosophy  레이달리오의 신작 『변동하는 세계질서』를 매일 조금씩 보고 있다. 옛날부터 가지고 있던 이 세상에 대한 모든 이론을 다 담아놓은 듯한 기분의 책. 유발 하라리의 호모 사피엔스가 인간의 상상력과 커뮤니케이션에 방점을둔 모든것에 대한 이론(theory of everything)이었다면 이 책은 국가와 경제의 운명에 관한 모든 것에 대한 이론이다. 1학년 때 멍청한 수요공급 곡선같은걸 배울시간에 조금은 뇌피셜 같아도 이런 내용을 배웠으면 훨씬 좋았을텐데 😚   Life     움직인 시간: 0.5hr (출근 시간이 너무 짧아졌다. 전엔 최소 하루 1시간이었는데)   습관 일기: Youtube 1시간 42분   생체배터리: 50 % → 30%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-20",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  진득하게 파이썬 사이드 프로젝트 진행했다. regex들이 이걸 고치면 저게 다시 문제를 일으키는며 꼬리를 물다보니 잘 안풀릴때가 많지만 생각대로 다 될거면 넌 실업자가 됐을거란 말을 생각하며 맘을 다독이면서 하는중   OS  /proc/pid/fd 에 소프트 링크가 많이 생기는 문제를 분석중 (많을땐 20만개). 앱에서 동작을 한 후 제대로 자원을 회수 안한 버그 때문인건 확실한데 이걸 관리자 입장에서 수동으로 그리고 안전하게 때어버릴 순 없는지 궁금하다. 비슷한 문제를 가졌던 사람이 있으면 참 좋겠지만 이건 검색해도 잘 없는것 같다.   Philosophy  2장 신용창출 파트를 보는중. 대학시절엔 경제 성장에 있어 금융을 강조하는 학파의 이야기를 보면서 이게 뭔 소린가 했는데 조금은 이해력이 나아진것 같다. 대학 시절엔 아 그냥 자본주의 도입으로 신용이 팽창하면서 네덜란드가 강대국이 됬었구나 정도의 느낌이었는데. 배움에 배움을 더하면서 판단과 통찰의 깊이가 생기는게 참 재미있다. 좀 더 어릴때 알아차렸으면 좋았을텐데   Diary  집중을 해서 정신을 안차리면 아까운 저녁시간이 훌쩍 지나가버린다.   Life     움직인 시간: 1.5hr   습관 일기: Youtube 1시간 25분   생체배터리: 80% → 50%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-21",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  CloudWatch 에서 챗봇을 연동하는 작업, 로그 스트림에 들어오는 정보를 메트릭화하고 그 메트릭으로 알람을 만들어서 알람을 만드는 작업, LogInsgiht를 통해 로그를 가공하여 알람을 생성하는 작업.  Prometheus 컴포넌트의 구조(Retrieval, TSDB, Pushgateway, Alertmanager), PromQL 사용방법(JOIN, GROUP, OPERATION), Metiric 의 타입 (Counter, Gauge, Histogram, Summary), 메트릭의 구성, 샘플 개념, 레인지벡터, Configuration 방법 (command-line flag, file), 캐시를 사용해 부하가 자주 가는 쿼리를 미리 캐싱해놓는 방법, Scrp_config, ServiceDiscovery 등록, Relabeling를 통해 라벨관리하기  옛날 생각이 난다. 예전에 다니던 회사에서 많이 하던 작업이었는데. 그런데 이렇게 좋은 프로그램이 무료라니 다 굶어죽겠다 이 놈들아! 요구성능이 어느정도 되는지 모르겠지만 일단은 내가 알던 엘라스틱서치 기반의 자바프로그램보단 가벼워 보인다. (세상이 변하는걸 잘 캐치해야지)   Philosophy  장기부채사이클에 대한 파트를 꼼꼼하게 읽었다. 많은 화폐들이 안전자산처럼 보였지만 역사의 흐름속에 사라진점. 사이클 끝에 채권자들이 안정적인 자산을 찾아 떠나는 순간까지 뭔가 이게 역사구나.. 그런 커다란 흐름이 머리를 탁..   English  『미국 영어 회화 문법』이란 책을 읽기 시작했다. 어릴때부터 정말정말 궁금했던 점들을 하나하나 설명해주는게 너무 좋다. 관사가 도대체 왜 있는건지 어떤 맥락에서 카테고리가 나눠진건지. 나름 어릴때 영어학원선생님이 알려주려고 노력은 하셨었는데 이제는 막타를 친 느낌이다 .   Dairy  갑작스런 주말 근무에 외출나가 볼일이 많아서 시간이 많이 없었지만 나름 알뜰하게 보넀다. 거의 17시나 되어 집에 앉아 차분히 데브옵스 영상을 보고 있노라니 마음이 그렇게 편할수가 없다.   Life     움직인 시간: 1.5 hr   습관 일기: Youtube 36분   생체배터리: 40% → 20%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-22",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  1) Prometheus 설치 및 설정, Grafana 데이터소스 설정, Node-exporter로 메트릭 노출, kubernetes 환경에 접근 할 수 있도록 인그레스 리소스 설정, Prometheus Metric을 수집하도록 어플리케이션에 설정, Blackbox-exporter설정, 라이브러리로 직접 Metric노출 시키는 방법,   2) 쿠버네티스에서 메트릭을 받아 Grafana에서 대시보드로 표현, Grafana Alertmanager를 이용해 Notify, Component 구조, 매니저를 거치지 않고 매트릭에서 바로 Notify 설정.   3) ELK Stack 레거시 환경에서의 로그감시 프랙티스와 호스트와 앱이 디컬플링된 클라우드 네이티브 환경에서 로그감시 프랙티스, Elasticsearch 설치와 컴포넌트 컨셉, HA, Document, Dynamic mapping, 각 노드의 role 설정, 샤드의 컨셉에 따른 동작절차, Kibana를 통해 인덱스 쿼리, KQL 을 직접 만들거나 GUI로 만들기, Stack Management, Stack Monitoring  (감상) — Elasticsearch에 대충 큰 그림만 알고 옛날에 일을 했었는데 다이나믹 타입이 있다는건 오늘 처음알았다. Kibana같은것도 쓸일이 없었는데 저렇게 광범위한 텍스트를 쿼리할 수 있다니 뭔가 해볼게 정말 많은것 같아서 재밌어보이긴하는데 뭐 어차피 스플렁크랑 비슷할거 같아서 호기심이 확 준다.   Philosophy  변화하는 세계질서    1) 1910년 부터 화폐의 평가절하와 그런 쓰나미로부터 살아남은 부의 저장수단에 대한 이야기. 세계대전의 영향, 왜 어떤 평가절하는 나라를 망하게 하고 어떤 평가절하는 여전히 제국을 유지하게 하는가 구분하는 방법. 그리고 기축통화의 지위를 상실하는 시점(국력이 쇠퇴/중앙은행이 적자를 감당못해 부채를 화폐화할때)   2) 국가 내부질서 사이클의 6단계에 대한 소개 (100년 사이클), 위험신호비율로 본 역사적 내전 발생 가능성 데이터에서 미국은 5년내 17%(!‼)   이 책은 중국 이야기가 많이 나오는데 궁금한게 한둘이 아니라 자주 인터넷 검색을 하게된다. 중국의 철도가 미국보다 훨씬 좋다는 이야기도 봤는데 더 재밌는건 미국의 파일럿들이 몽땅 중국으로 가서 미국의 항공교통이 현재 마비되어 있다는 뉴스였다. 아무래도 수송량이 많다보니 임금도 훨씬 높게 챙겨줄 수 있는건지 중국 항공업계가 무리해서 스카웃해가는건지. 아무리 미국이 좋다고해도 맨날 비행기 타고 있는 기장들 입장에선 나라가 뭔 소용이니 싶거니와 자유로운 노동시장에서 미국이 다른 나라에 인재를 뺏길수도 있다는게 충격적이었다.   Dairy  아침에 일어나서 3시간 동안 요리를 했다. 양파 요리하다 눈이 너무 피곤해서 15분 자고 하루종일 풀로 공부 보람차다. 유튜브에선 27년차 소프트웨어 개발자 분의 인터뷰를 봤는데. 아무리 기술이니 유행이니 해도 일단 마음이 평온하고 외부의 자극을 건강하게 받아들이는게 최고의 기술인것 같다.  Life      움직인 시간: 2.5hr   습관 일기: Youtube 1시간 18분   생체배터리: 90% → 40%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-23",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  Python proejct, 기존에 포크한 서비스의 코드를 읽는 시간을 가졌다. 이미지를 export 하는 과정에서 별도의 처리가 필요해서다. subprocess.call, argparse, rsync   Devops  파이프라인에서 에러가 발생하는데 명확히 이유를 알수 없어서 많이 방황했다. log 모니터링 시스템이라도 잘되어 있으면 아니면 권한이라도 있으면 좋을텐데. 끔-찍. 어떤 empowerment도 없이 오직 문제가 안나는게 중요한 세상에서 살고 있다.   Philosophy  이 책을 읽다가 지속적으로 드는 생각이 미국이 무너진다고? 어떻게 그럴 수 있지? 그런 생각을 한다. 미국이 아무리 부채를 화폐화 한다한들 어떤 누가 뭐라할것이며 미국인들이 미국을 버릴 수 있을까? 미국이 세계의 기술과 산업의 중심지이 아니라면 어떤 나라가 그걸 할것인가? 중국의 구매력이 범 영어권 국가들과 동등해진다해도 누구도 검열받고 인권은 개차반같은 국가에서 살고 싶어하진 않을텐데. 결국은 전쟁인걸까. 소프트파워도 민주적 질서도 전쟁에서 이길때나 가능한 여분이니까. 중국이 미국의 2배의 구매력을 가지고 2배의 국방비를 사용하여 전쟁에 임하는 시나리오를 상상해본다. (가능하겠는데)   Dairy  운동하고 집에서 와서 닭안심 삶다가 밤이 다 지나가버렸다. 😇   Life     움직인 시간: 1.5hr   습관 일기: Youtube 1시간 30분   생체배터리: 60% → 15%  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-24",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  Phase 1 깃허브 마크다운 문법으로 치환하는 작업 막바지 인터그레이션 테스트 중  Dairy  이상하게 아침부터 의욕이 없이 하루종일 집중도 안되고 재미가 없었다. 이유는 잘 모르겠다. 어제 요리 하느라 안좋은 가스를 많이 먹었나. 아침에 닭육수 아깝다고 물대신 육수에 꿀타먹고 육수에 밥 말아먹고 한게 좀 오바였던걸까. 이해 할 수 없는 하루. 가끔 이런날도 있는거겠지. 컨디션이 안좋은 날은 좀 빨리 자야겠다. 습관을 유지하려고 드라이브를 넣다가 하다가 마음만 더 상하는거 같다.  Life     움직인 시간: 0.5hr   습관 일기: Youtube 1시간 29분. 시간 줄이는게 쉽진 않다. 그냥 걸어갈때 출퇴근 시간에 교육 동영상 소리만 켜놓고 들을때도 있고 밥먹을때 틀어놨다가 밥먹고 나서도 자연스레 보는것도 있고 정말 봤어야했나? 기회비용은 뭐였을까 고민해봐야지   생체배터리: 20% → 0%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-25",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Languages  Bear 프로젝트에서 기존 포크한것에서 메인함수 중간 중간에 내가 만든 함수를 넣는것으로 문제를 해결할 수 있으라고 생각한게 아무래도 안될것 같아서 메인함수의 흐름을 고치는 작업을 시작했다.   Finance  6월 CPI가 발표되는날, 갑작스런 나스닥 급락으로 숏포지션을 잡고 있던 내게 희소식. 간만에 빵긋 😇 웃으며 월초 리밸런싱 이후 처음 계좌 확인했다.   Dairy  오늘 오랜만에 브런치에 포스트 한개 쓰긴했는데 운동하고 집안일 좀 하다보니 써 자정이 되어버렸다. 신속하게 움직일 필요가 있는것 같다. 오늘 조금 더 신속하게 움직였다면 30분 정도는 벌 수 있었다. 배터리가 남아있는데 시간은 부족하다면 좀 더 빠릿빠릿하게 움직여도 된다고 본다.   Life     움직인 시간: 2hr   습관 일기: Youtube 1시간 31분. 운동하면서 틀어놓은게 30분은 되다보니 많이 줄인거긴 한데. 양적인 분석만으론 나쁘다 좋다 할 수 없는 부분이 많다. 차라리 히스토리라도 보면서 반성하는게 나을듯.   생체배터리: 50% → 30%  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-26",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  Bear 전체적인 구조를 다 뜯어고치는 중 한번 만들어놓은걸 다시 만들때 너무 재밌다. 참았던 마음의 댐이 폭발하는 느낌.   Devops  AWS IAM 파트 진행중, SCP, Boundary, Session, Resource-based Policy, Endpoint Policy, Assume, Runner 구조의 권한 관리  예전에 할때 기계적으로 하던걸 왜 그렇게 했나 이해가 되는게 나름 재미가 있었다. 특히 Assume같은게 인상적임. 계정별로 Policy가 덕지덕지 관리되는건 비참한 느낌인데 이거 하나면 다 된다.   Dairy  어제완 다르게 이상하게 뭔가 의욕이 싹 가라앉는게 왜 그런지 모르겠다. (의심은 가는건 있다) 전반적으로 요즘 도파민이 레벨이 낮아진걸까? 다른 자극이 당기는게 조금씩 심해지는 중. 너무 당황하지 말고 내일 해답을 찾아보려고 오늘은 TIL 빨리 쓴다.   Life     움직인 시간: 0.5hr   습관 일기: 잘 봤다는 생각이 드는 유튜브 영상 제목들  “소액으로 벤처기업에 투자할 방법은?”  “아저씨~ 따블✌️” 심야 택시 전쟁   생체배터리: 60% → 5%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-27",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  첫째, AWS IAM 보안 관련하여 베스트 프랙티스 내용을 진행하였다. 주요키워드는 root, inline policy, IMDSv2, ttl token, 보안 로직 자동화(with lambda), IRSA (k8s에서 파드가 노드의 권한을 통째로 assume 하지 않도록 처리), EC2를 둘러싼 네트워크 설계, ec2-user 외 원하는 계정의 생성, System Manager(Session Manager), ssh 할때 pem을 호출 하지 않고 aws-cli가 세션매니저를 호출하여 접속하는 방법을 통해 사용자의 경험 개선, EC2 백업 방법 (EBS를 통해, AMI를 만드는 방법을 통해 ), AWS backup, AWS Golden Iamge라는 컨셉과 pakcer로 이를 만드는 절차, Codebuild 임지를 만드는 절차, EC2 inspector v2의 스캔과 작동 수준차이   둘째, 네트워크 관련 서비스들을 보안의 관점에서 다시 복습하고 활용방법을 진행하였다. 주요키워드는 Routing Table의 subnet Association 기능, NAT, Middlebx routing을 활용해 firewall로 플로우를 흘렸다가 dest로 보내기 (반대로 security appliance 노드를 통해서 인터넷으로 내보내기), VPC IPEM, Security Group의 특성 (soft-limit, ENI단위로 설정, chaning-prefixList), SG와는 다른 NACL의 동작특성 그리고 이를 활용한 3TIER Architect, 엔드포인트를 굳이 쓰는 이유, 프라이빗링크 엔드포인트, 컨슈머 엔드포인트(Private Link endpoint, GW endpoint, GWLB endpoint), 프로듀서 엔드포인트, GWLB 엔드포인트가 하는일 (방화벽으로 가는 패킷을 중간에 컨트롤하여 부하 분산, VPC Endpoint service 등록기능)   오늘 별로 한게 없는거 같은데 생각보다 내용을 많이 진행했다. 안토해내고 잘 소화가 될런지. 결국 아침부터 밤까지 이것만 한건가   Philosophy  내부 질서 5단계 부분만 다 읽었다. 영원할것 같은 질서도 결국은 끝나는 순간이 온다니 놀라운 일이다. 우리 모두는 멈춰버린것 같은 역사의 산증인이다.   Life     움직인 시간: 2.5 hr. 격일로 운동을 하고 있는데 1시간은 무산소, 30분은 자전거 인터벌을하는 중. 무아지경에 빠질정도로 열심히 하는거 오랜만에 하니까 재밌다. 무릎에 통증만 없기를 기도하면서 사는 중. 기계가 이상한건지 조금만(?) 열심히 하니까 최대 심박수(182)에 도달한다. 실제 자전거 타면서는 그렇게까지 올리기가 쉽지가 않던데 아무래도 의자에 등을 대고 쥐어짜듯이 움직이기가 용이해서 그런걸까   습관 일기: Youtube 앤드류 테이트라는 전 킥복싱 선수 및 사업가의 영상 환율방어선이 무너졌습니다 드릴헤드 비트 고정방법   생체배터리: 50% → 10%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-28",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  Endpoint 로 연결된 서비스가 죽으면?  그걸 대비해 GWLB를 사용해 트래픽을 여러곳으로 보내도록 한다. GENEVE프로토콜, ANF, Statefull, Stateless Rule, AWS Transit Gateway, Firewall은 피어링을 지원하지 않아서 스포크 형태로 VPC를 엮는다.  AWS WAF, AWS managed rule  marketplace 에서 등록된 룰을 사용하여 워크로드에 적용. 여기서 나오는 로그들을 저장하고 파싱하는 커스터마이징 아키텍트, DDOS 공격을 받는다면? 실시간으로 NACL에 정책을 심는 구조를 고려해볼 수도 있고 실시간으로 디도스를 탐지 및 기록하는 것도 중요하다.  AWS Shield, Advanced 기능, DDOS 에 대한 비용 절감  (어드밴스 사용자가 아니라도 자료를 제출하면 됨), AWS VPC 트래픽 로그를 감시하고 메트릭화하여 운영을 모니터링하기   Philosophy  변동하는 세계질서, 국제 질서 파트를 보고 있는데 이런 말이 있다. All is fair in love and war… 국내 질서 사이클 5단계까지 생산력과 체계의 건전성이 주를 이루었다면 이제는 군사력에 대한 이야기도 첨가되는중. 동시에 생산력이나 군사력이나 종이한장 차이라는 이야기도 나온다.   Dairy  오전에 나갔다가 돌아와서 오후에 창문에 필름을 붙이느라 끙끙앓다가 오후가 지나버렸다. (이거 해달라고 요청하면 50만원이던데) 이제 이사하고 1회성으로 할일들이 점점 다 사라지고 밥 만들고 하는것도 루틴이 점점 사라지고 있어서 이제 효율적으로 일을 할 수 있을 것같다. 도전적인 만남을 만들고 기존에 하고 있는것들엔 속도를 붙여야지.   Life  움직인 시간: 4hr 습관 일기     개발자 망하게 하는 사고방식 😱 (개발팁 5가지)   💀 일본에서 기독교가 절멸한 이유…!! / 💀 일본 전국시대와 에도막부의 종교탄압 생체배터리: 50% → 15%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-29",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  CloudTrail 를 통해 Multi region 상태에서 로그를 중앙관리, 복수의 tenant를 S3로 통합, Organization 을 통해 테넌트에 대한 컨트롤 확보, CloudWatch 에서 elasticsearch 로그 중앙관리 아키텍트, management event, Data event, insight event, userIdentity 종류  GuardDuty 탐색, 인스턴스 침해, 어카운트 침해 형태에 따른 위협을 감지. 로그를 기준으로 동작, security level을 가지고 이를 기준으로 serverity관리, Reputation 정보를 전달해 탐지효율개선, AWS macie의 기능을 일부포함하여 S3 매니지먼트  SecurityHub 멀티어카운트를 지원하며 AWS 및 서드파티 보안서비스를 중앙화해서 관리할 수 있게 해준다. ASFF 포맷, PCI DSS(이렇게까진 보통 할 필요가 없을듯), CIS, Insight, Custom actions를 통해 노이즈 컨트롤   Philosophy     “힘을 존중 할 줄 알아야 한다. 절대 이길 수 없는 전쟁에서 무리하게 맞서는 것은 바보 같은 짓이므로 협상으로 최선의 대안을 찾아야한다. (물론 순교자가 되곘다면 다른 도리가 없다. 이는 전략적으로 현명한 선택이 아니며 어리석은 자존심 싸움에 불과하다)”    이 부분을 보고 있으니 젤렌스키 대통령이 생각났다. 푸틴은 전쟁에 질바에 지구를 멸망시킬 사람이다. 그렇게되면 서방은 젤렌스키 목에 칼을 대서라도 무조건 항복하라고 할것이다. 힘을 존중하지 않는건 누군인가?   다음 내용이 오늘 가장 인상깊었다. ‘인도차이나 공격 뒤 미국은 일본의 자산동결과 파나마 운하 접근 근지, 일본수출입 금지에 따라 수출이 80% 줄게 된다. 그리고 5개월 뒤 진주만이 터진다.’ 나는 지금껏 일본이 정신이 나가서 미국을 선제공격한줄 알았는데 이런 뒷배경이 있었다. 저런 경제보복을 한다는건 일본경제를 먼저 마비시켜놓고 때릴테면 때려보라고 미국이 도발한셈 아닌가. 그런데 도발한 미국의 해군은 왜 기습을 당한걸까(???) 풀리지 않은 미스테리   Dairy  남는 휴가를 어디에 쓸까 고민하다 살면서 가보지 않은 장소에 가서 포토앱의 빈공간을 채우기로 했다.   Life      움직인 시간: 2hr   습관 일기:  이번에 큰 상승이 옵니다. 여기에 투자하세요 (김영익교수 1부)  미국의 침체를 예상하고 중국기업의 부채의 장기간 조정 뒤 안정적 상승을 예상하는 의견  바빌론은 억울하다 / 인류 역사상 첫 메트로폴리스였던 바빌론의 ‘위대한 도시’ 이야기  정말 좋은 내용이다. 도시는 어째서 도시인지. 기독교사를 타고 내려오는 반도시 정서. 내가 수없이 고민해서 얻어낸 결론이 10분안에 담겨있다니 정말 짜증난다. 이런 쓸모있는 인문학서적들이 어째서 요즘에서야 나오는 걸까. 내가 어릴때 도대체 무슨 책들이 나왔던거지. (알랭보통같은 프랑스 철학자들의 잡수다가 떠오른다.)  정신과 상담치료가 소용없는 이유  패기 하나는 엄청난 사람. 정신분석 치료방법에 대한 비판이기 때문에 사실 제목이 틀렸다. 저건 의료보험도 안되는 비싼 접근방법으로 안다. 그건 그렇고 대화를 통한 객관화가 필요없을 정도로 영민한 삶이 가능한걸까? 앤드류 테이트는 당당하게 자기는 할 수 있다고 주장한다.   생체배터리: 50% → 20%  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-30",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  서버운영  앱의 하자로 인해 쌓이는 broken 심볼릭 링크를 임의로 지우려고 했는데 음 왜 그런지 모르겠는데 /proc 디렉토리 내에서는 find . -xtype l 로 검색이 안된다. 가르키는 파일을 검색하는건가? 시간을 두고 연구해보면 되는데 정신이 없어서 체크를 못했다. iNode문제로 인해 no disk 에러발생. 이게 왜 디스크인가 했는데 생각해보니 df 해보면 iNode를 별도로 할당해 놓는다.   데브옵스수강  EKS 개요 부분 진행함. Control Plane의 대신 관리, EKS의 서비스 구성과 Private Link를 통한 통신, VPC CNI, Storage 로서 EBS/EFS 구성, 기본적인 로그 구성 흐름, EKS를 쓸까 말까? (프로비저닝 절약보다 관리비용이 높을것이기 때문에 EKS를 추천하는 강사님)   Philosophy  “빅 사이클로 판단하는 투자” 여긴 좀 읽기 힘들었다. 레이 달리오가 설명하려고 하는 역사의 기계장치는 대충 알겠는데 투자로 들어가면 금융과 실물자산에 관계가 깊게 설명된다. 큰 흐름은 화폐가 평가절하 될때 실물자산의 가치가 뛰어오르고 붕괴된 금융자산이 장기부채 사이클의 평화로운 흐름을 타면 금융자산이 실물자산보다 훨씬 높은 수익률을 기록한다는거. (요즘의 달러 강세 및 골드 약세는 이해가 안된다 이런 흐름에 있어)   8장 “지난 500년의 요약”   1500년 ~ 1900년까지 인류사의 생산성과 자본주의를 결정한 사건들을 나열하면서 이 속에서 어떤 장기 사이클이 있었는지를 보여주는 내용이었다. 예전엔 식량을 기준으로 이 시대의 역사를 분석한 책이 있었는데 이름이 빵의 역사였나. 그 책도 정말 재밌었는데. 따지고 보니 자본의 역사가 훨씬 더 강력한것 같다.   Dairy  영어공부도 Reminder Routine에 편입하기로 했다. 그런데 정말 하루 책 조금 보고 공부도 조금하고 운동도 하고 진득하게 하는 느낌이 안드는게 불만이다. 꾸준한게 답이란 것만 믿어야 하나.   Life     움직인 시간: 0.5hr   습관 일기: 오늘은 유튜브 0분. 대신 커뮤니티 사이트를 살짝살짝 본시간이 합쳐 54분. 원래 커뮤니티는 가지도 않았는데 주말도 없이 주야 공부만 핟보니 최근에 의사소통이 마려워졌다. 조만간 오프라인 모임에 나가는것을 계획하고 있으니 그때까지만 허용.   생체배터리: 50% → 30%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-31",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  regex 로 긴텍스트를 시험하다가 CPU100% 상태에서 계속 되는 증상이 있어서 뭔가 하고 찾아봤더니 ‘Catastrophic backtracking’ 이라고 한다. 이런 증상을 예방하기 위한 작성팁도 있으니 본격적으로 하고 싶다면 꼭 배워야할듯하다. 상용 상태에서 이렇게 되버리면 망한거니까.   Shell  sort | unique -c | sort -nr 자주 쓰는 패턴이 될것 같다.   Philosophy  오늘은 네덜란드 제국과 길더화의 운명까지 종결. 150년 동안 엄청난 수익률을 자랑하다가 어느날 종이조각이 되어버린 동인도회사의 운명이 마치 비트코인을 보는것 같아 흥미로웠다. 그게 평생갈지 안갈지 모르겠지만. 지배적인 패러다임의 등장엔 귀를 쫑긋세워야할것 같다. 화폐경제란건 본질적으로 사랑스럽고 매력적인 거품이며 사람 수명보다 오래가면 경질자산보다 훨씬 좋은 투자 상품이고 오래 못가며 그때서야 사기가 되는것 아니겠는가.   Life     움직인 시간: 2hr, 공기밥을 평소보다 1/2씩 먹어서 그런가 오늘은 평소 드는 무게보다 못들었다. 인터벌도 평소 하던 퍼포먼스에서 15%정도 떨어졌다. 리피드를 운동 2번에 한번씩 해야하나? 야채로 볼륨을 엄청 많이 가져가기 때문에 배는 별로 안고프다. 운동 퍼포먼스를 올리자고 리피드를 하는것도 좀 웃기고. 운동 한 번 할때 800kcal 정도 태우는거 같은데 리피드 하루 하면 450kcal 추가니까. 다이어트 기간을 최대한 짧게 가져가고 싶고 퍼포먼스 좀 떨어져도 일상생활에 지장만 없으면 글리코겐이 떨어진 상태를 최대한 유지하는게 좋아보인다.   습관 일기:  하락장 보다 더 무서운 것이 있습니다  분할매수가 필요한 이유에 대한 납득. 다만 그런 트레이딩을 하기엔 아직 준비가 안된것 같다.  엠버허드 패소, 마냥 기뻐할 수는 없다  백래시에 대한 좀 더 넓은 관점에서의 이해가 재밌었다. 작용과 반작용을 어떤 이념이 전유할 수 없다는 생각. 그리고 역사속에서 그런것들이 항상 있어 왔고 페미니즘 마저도 백래시라는 생각.  유럽의 창에는 왜 방충망이 없을까? 우리와 유럽 건축의 기본적인 차이  유럽도 열대지방이 되어 가는거 같은데 방충망 사업해?   생체배터리: 60% → 10%  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-32",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  Bear 프로젝트, 자체적 통합 테스틀 마치고 이제 편의성과 업로드 부분 개발에 들어갔다. JSON으로 컨픽을 넣고 실행할 수 있게 하면 맥락에 따라 실행할 수 있을것 같아 보인다.   트위터  Carbon 이란 언어가 나왔던데, C++마이그레이션하기 위한 언어라고 하니 특수한 분야에선 굉장히 팔리는 언어가 되지 않을까? 세계 어디선가 죽여달라고 속삭이고 있을 레거시가 되지 못해 헌역인 프로그램을 위하여.   Philosophy  영국제국에 대한 이야기를 읽는 중. 네덜란드와 영국의 주요 발명 비율을 보면 시대를 주도하는 국가들에서 인재들의 중요성이 크게 느껴진다. 어릴때는 한국 기성세대의 교육열에 대해 뭐 그렇게 해외에서 극찬을 하는지 이해가 안갔는데. 이런걸 보면 이해가 간다. 근대적 시스템에서 발명을 하고 공장에서 메뉴얼에 따른 일을 하고 또 공정을 개선하고 식자들이 토론을 통해 수백년을 이어갈 철학적 근거와 과학혁명을 일으키기 위해선 사회 전체의 지적인 총합이 중요한 것이다. 그런 관점에서 보면 정보에 대한 접근이 날이 갈수록 더 균질적이게 된 오늘날에 국가의 교육능력이란 어떤 의미가 있는걸까 그런 고민을 하게 된다. 미국의 학생들도 udemy를 보고 아프리카 학생들도 udemy를 보고. 대학 보다 사회와 기업이 더 빨리 변하기 때문에 대학교는 브랜드를 파는 장소가 되지 않았는가. 부를 창출하는 위대한 혁신의 방정식이 변하고 있다고 느낀다.   Dairy   이전에 이사 온곳에 택배를 받는 바람에 직접 가져오느라. 오늘은 쌩 시간을 많이 날렸다. 이런 허무한 실수는 꼭 따로 기록해놓고 안일어나게 해야지.   Life      움직인 시간: 1hr   습관 일기            이 시대가 남자들에게 천국인 이유       앤드류테이트, 부모님을 잃은 슬픔을 어떻게 견뎌야 할까       세상에서 가장 멋진 아버지가 되는 방법           트위터에 잠시 이야기했지만 앤드류테이트와 같은 방식으로 사고하고 행동하는것에 앎과 행함의 일치에 의한 굉장한 에너지가 있다고 느낀다. 왜냐하면 도덕과 감정을 차치하고 사실에만 근거하면 단순해지니까. 시스템 속에서 적응해서 사는 사람들은 도덕과 감정을 잘 살피는게 일종의 미덕이자 능력인데 그걸 다 깨부숴린다.  예전에 지니어스의 장동민이 생각난다. 그는 김경란처럼 감정과 도덕을 살피지 않지만 결국 가장 많은 동맹을 얻은건 장동민이었다. 팩트에 기반한 파트너십이냐 정의와 감정에 기반하는 커뮤니티냐. 어떻게 이걸 현실에서 조금씩 적용해나갈 수 있을지는 미지수지만 아이디어는 정말 매혹적이다.     생체배터리: 50% → 30%   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-33",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  오늘은 파이선은 적당히 만지고 bash랑 git diff 관련 작업을 했다. 파이선으로도 git을 컨트롤 할 수 있는 라이브러리도 있고 하니 그걸 써서 작업을 할 수도 있는데 그냥 배운거 써먹고 싶어서 bash로 작업. (사실 단순한 작업하는데 라이브러리 쓰는게 싫다) 이제 이 사이드 프로젝트의 중간점은 돌파한것 같다. 조금만 더하면 당장에 내가 써먹을 정도는 동작할것같고 다른 사람이 쓰기엔 20% 정도 부족한 엉성한 무언가가 될것같다.   Philosophy  오늘 읽은 파트는 영국과 네덜란드가 잘 나갈 동안 프랑스는 뭘 했는지. 나름 강점을 가지고 있음에도 왜 실패했는지, 그리고 독일의 부상과 독일의 페이스를 따라잡지 못하고 몰락해가는 영국의 경제상황에 대한 이야기였다. 저자가 국채 금리와 주요 발명품을 제국의 성장과 타락의? 수치로 쓰는게 굉장히 흥미롭게 느껴지는데 과연 현대는 어떻게 되는지 궁금해서 엉덩이가 들썩들썩.   Life     움직인 시간: 2 hr 운동할때 힘이 안들어가~   습관 일기:  놀면뭐하니 주식공부하자 1탄 진짜PER 구하기  → 인터벌 하면서 들었다. 높은 PER에 대해 미리 사놓고 기다리고 기대치보다 오래 걸리면 버린다. 그런 컨셉만 머리에 남았다.   후추는 세계를 어떻게 바꾸었나. 그리고 유럽은 왜 후추에 집착했을까.  → 맛있는걸 먹고 싶다는 욕망이 견인하는 부와 역사. 정말 넥스트 후추는 뭔지 궁금해진다. 원산지 보다 100배 비싸게 팔 수 있는 교역이라.. 한편으론 농업에 대한 측은한 감정도 있다. 프랑스 혁명이 일어나기 위해선 파멸적인 기근이 필요했다고 묘사된다. 과연 그런게 현대에 가능할까? 비축미도 있고 유탕처리한 음식을 1년 2년 3년이고 먹으면서 버티면서 정부가 무너지는 일은 없을 것이라 생각이 되는데. 그럼 농업은 언제 역사적인 리턴을 받게 될까? 주기적으로 거품이 끼는 주식이 6배나 뛸때 정점에서 주가를 파는 CEO마냥 가끔 오는 기근에 저장한 식량을 6배의 가격에 팔 수 있을 때가 한번이라도 와야할거 아냐. 안오면 말고 😇   상남자가 블랙필 남성들에게 하는 조언 #shorts  → 반사회적이고 누군가를 혐오만 한다고 생각할 수 있는 사람들이 사실은 쿨하고 자유로운 이미지를 쫒는 사람들보다 더 따뜻할 수도 있다는걸 보여주는 짧은 영상.   생체배터리: 40% → 10% 지금까지는 생산적인 일만해도 감지덕지 해서 별다른 조치를 취하지 않았는데 해야 할 일의 우선 순위를 둬야 할것같다. stack은 계속 쌓이는데 늦게 퇴근하거나 잡무가 생기면 하지 못한 일들이 너무 많다.  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-34",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  bash 프로그래밍 하는데 디버깅 하는게 쉽지가 않아서 헤매는 중. 내일은 좀 효율적으로 디버깅할 방법을 찾아봐야겠다.   Devops  사람을 행동하게 만들고 문제를 제거 하는건 모두가 원하는것이다. 하지만 동시에 인간을 포함한 만물은 에너지를 절약하고자 하고자 한다. 방정식으로 표현하면 다음과 같이 표현 할 수 있다.   불안의 비용 - 행동의 비용 = 반응앞은 ‘불안’이 될 수도 있고 ‘행동하지 않음의 비용’이 될 수도 있다. 반응이 양수면 사람은 행동하여 불안을 제거한다. 반응이 음수면 사람은 행동하지 않고 불안을 참거나 간과한다. 사람마다 이 변수 반응은 다르다. 신경성이 높은 사람은 불안의 비용이 남들보다 더 크기 때문에 행동을 쉽게 한다. 어떤 이들은 행동의 비용의 싸기 때문에 행동을 한다. 반대로 불안을 거의 느끼지 않는 사람과 행동의 비용이 너무 비싼 사람들은 반응하지 않을것이다.   따라서 우리가 취할 수 있는 전략도 여러가지다. 의사결정에 더 많은 에너지를 쓰도록 불안을 더 높히기 위해 채찍을 든 사람을 옆에 두는 것 방법도 있고. 행동의 비용을 낮추도록 여러가지 편리한 도구를 두는 방법도 있을 것이다. 가까운 헬스장이 최고인 이유도 이 공식과 멀리 있지 않다. 이는 우리의 일에도 적용되어야 하는 원칙이다.   Philosophy  변동하는 세계질서를 읽던 중, 예전엔 불평등에 대해 생각하는게 무슨 의미가 있을까 생각했는데 (적극적으로 구제할 방법을 쓰지도 않을 정치에 지쳐서일까) 역사를 보니 고율의 세금과 화폐를 가치절하하고 토지재분배를 통해 구성원들의 부를 압착하고 새로운 역사의 모멘텀을 열어간 역사가 있는걸 보고 나름 필요한 시선이고 또 잘 동작할 수도 있다는 생각이 들었다. 표면적으로 보기에 자본을 위협하는 조치들 때문에 우파들이 말하는것처럼 나라가 멸망하지도 않는다. 오히려 세상이 멸망할것처럼 불평등과 부패, 부조리를 외면하는게 제국의 멸망의 트리거가 된다. (물론 위협하는 조치를 통해 얻은걸 잘 써야야한다)   Finance  SQQQ 25%라는 끔찍한 손실을 보고 포지션 아웃. 모멘텀용 투자규칙과 마켓타이밍 투자규칙은 다른건데 엉뚱하게 적용하다가 망했다. 뭐 그냥 내가 얼마나 원숭이인지 알려고 얼마 투자안했으니까 다행.  테슬라 추가 매수   Life     움직인 시간: 0.75 hr   습관 일기  치팅? 리피드? //리피드데이 완벽정리! → 다이어트 정체기가 오면 리피드를 하는게 오히려 낫다. 저수준의 에너지를 유지하는게 적응해버리기 때문에. 패턴을 흔들어줘야한다. 이건 학습에도 적용할 수 있는 원칙인듯 하다. 한때는 부유했지만 현재 가난해진 국가들 Top 10  복불복? 지리적 위치가 굉장히 불리하다고 평가 받는 국가 Top 10  증시에 안 알려진 악재 하나가 있습니다 → 다 아는데 도대체 언제 블랙스완이 오는건가. 다 알면서도 없는것 처럼 사는게 금융시장인듯.   생체배터리: 40% → 10% 진짜 너무 배고팠다. 밥 먹어야지..   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-35",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  Bash. 서브쉘에서 글로벌 스코프 변수를 참조하고 값을 쓰더라도 부모 쉘에선 반영되지 않는다. 간단하게 call by value. 대응책은 result=$(func) 뿐이다.   Devops  EKS를 웹콘솔로 생성하는 방법, TF를 통해 생성하는 방법.   English  관사에 대해. 관사를 앞에 붙이는게 예절이나 관습을 존중하는 의미가 아니라 이것도 맥락과 의미를 형성하는 역할을 한다. 이걸 모르고 살았네. 관념적인 발화 구체적인 발화의 맥락을 결정하는데 잘못쓰면 정말 이상하게 들리겠구나.   Dairy  주말 근무날 + 미뤘던 집안일. 이사할때 못했던 청소를 직접 하기 시작했다. 락스랑 베이킹파우더 섞어서 벽에 바르고 난리.. 냄새 때문에 한시간은 어질어질했다. 다음은 조심해야지. 벽에 아날로그 시계를 달았는데 훨씬 객관적인 판단을 하기가 좋아진것 같다.   Life  움직인 시간 2hr   습관일기  신숙주를 통해 본 조선 지식인들의 외국어 공부 방법  → 신숙주가 중요하긴 보다 사용할지도 안할지도 모르는 중국어를 그렇게 열심히 배우던 조상님들의 태도와 말하기를 읽기보다 강조했던 태도가 인상적이었다. 일제가 읽기를 강조했다는 것도 재미있는 포인트. 질서의 주체성은 생산에 있다는 사실을 보여줌.   유럽인들이 소형차와 수동차를 탈 수밖에 없는 사정. 그렇다면 미국은 왜 반대일까?   여자가 남자한테 꽂히면 감옥도 기다려 준다  → 예전에 왜 범죄자들을 좋아하는 여자들이 있을까 챕터로 다룬 책을 읽은적이 있는데.(데이비드 버스 책인가) RIDE or DIE 의 원칙은 리스트 테이킹 할 수 있는 남자를 좋아한다는 건데. 왜냐 모든 동물은 폭력의 후손이니까. 싸움을 거부하는 수컷은 다 맞아죽었다. 🥹 싸움을 거부하는 태도는 도태의 바로미터다.   생체배터리  50% → 15%  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-36",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  EKS 클러스터 활용에 있어 IRSA, Metric Server 구성, External Secret controller를 이용하여 정보매핑, AWS ALB controller 구성.   EKS 구성시 EC2외에도 또 지원하는 Managed Data Plane Fargate 를 이용한 EKS 구성. Fargate profile을 이용한 파드 스케쥴. Fargate를 왜 EC2대신 이용해야하는지 단점은 무엇인지. 베스트프랙티스는?  이걸로 커리큘럼 완주 Devops 마지막까지 완주했다. 구체적인 이야기는 별도의 글에서   Philosophy   미국의 도금시대부터 전쟁 후 자산팽창의 시기. 브레튼우드 체제의 종말. 70년 스태그플레이션에 사태에 대한 화폐관점에서의 해석. 인플레와 고금리가 끝난 이후 80년대의 호황.   Life  움직인 시간     0.5 hr    습관 일기    다음주 마지막 상승장 시험이 있습니다 -  나르시시즘이 남자의 삶에 미치는 영향 - 참으로 별난 사람. 에고라는 적이란 책의 내용이나 리버럴의 멘탈을 정확히 반대로 실천하고 사는 사람이다.  오늘은 유튜브 보는 시간도 별로 없이 정말 집중해서 알차게 시간을 보냈다.    생체배터리    70% → 20%    ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-37",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language   Python 사이드 프로젝트, 릴리즈로 불릴만큼의 동작까지 얼마 남지 않아 기분이 좋았다. 보람찬 하루. 용기도 나고 긍정정 생각이 많이 들어서 정말 좋은 하루였다. 매일이 오늘 같으면 좋겠다. 아니 그렇지 않더라도 오늘 같은 날이 올거란걸 스스로 경험하고 믿기만 한다면 많은결 해결할 수 있으리라 생각.   Philosophy   변동하는 세계질서, 각국 중앙은행의 GDP 대비 자산을 보니 여전히 미국은 다른 나라에 비해 여유가 있다는걸 볼 수 있었다. 일본이나 유럽은 뭐 거의 퇴물. 저자는 미국이 빅사이클의 70±10% 위치에 도달했다고 추측한다. 그리고 그 다음 내용은 대망의 중국 이야기. 중국에 대한 객관적 이야기를 하는걸 두려워하는 사회의 분위기가 느껴지는 도입부와 지식인의 자존심으로 그걸 이겨내려는 비장함이 재밌었다. 중국제국의 흥망성쇠를 보면 그들이 조금이라도 빨리 천하의 중심이 자신이라는 생각을 버리고 객관적인 시선에서 스스로를 개선시키려고 했다면 지구의 역사가 바뀌었을것이란게 보였다. 아무리 중국이 망해도 망해도 제국의 강력함은 청나라 말기가 되기 전까지는 세계구급이었다. 여전히 중국인들과 공산당은 조금의 겸손함도 없는 태도를 가지고 있는건 마찬가지지만 해외로부터 필요한건 배워서 자신을 고치겠다는건 메이지 유신의 성공이 떠오른다. 물론 메이지 유신도 메이지 유신 시대가 지나 그 시대의 가르침을 잊은 세대들이 군국주의에 물들어 패망했단걸 생각하면 지금의 중국의 강함을 있게한 그 무언가가 시대를 지나 옅어진다면 일본과 비슷한 길을 걷게될거란 생각이 든다. 독재가 건강하게 유지되려면 독재자가 올바른 판단을 내려야한다. 민주주의처럼 교정과 감시 시스템이 없으니까. 그런면에서 서방국가들은 시진핑이 망령이 들기를 물떠놓고 기도하고 있겠지?   Dairy   점심도시락에 닭 가슴살을 안넣었다. 근손실 🫢   English   collective nouns 진행. 요즘 밥먹을때나 쉴때 영어더빙 애니를 보는중.   Life   움직인 시간: 2 hr 습관 일기  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-38",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"#### jq, SideProject, IFS, 인덱싱 부하, 덩샤오핑, 낙태는 누구의 잘못?, 제국의 합리 예수의 전위   Language   python SIDE Project, 휴 드디어 처음부터 끝까지 동작하는걸 봤다. 그 동안 메모장에 써놓고 적지 않았던 이슈는 jq를 이용해 json을 쓰는것. is 처럼 파이선에만 있는 비교연산의 규칙(call by value, reference) 다시 복습. Bash에 여러 기능이 있긴 하지만 문자열을 처리하는게 상당히 부담스럽다. 파이선으로 한 줄이면 될 일을 몇 줄 이상 작성해야 될 뿐만 아니라 예외가 생길까봐 조마조마한 파이프라인을 타야한다. 따라서 값을 줄때 IFS를 고려한 순수한 값을 내려주자 . 특히 IFS로 white space를 쓰지 않게! 배려하자   Devops   오늘은 넥서스 정리작업을 했는데 몇 가지 설정을 하고 겨우 10기가 정도 용량이 줄었을 뿐인데 2시간 가량 인덱스 작업 하면서 서버가 상당히 부하를 타는 모습을 보고 조심해야 겠다는 생각이 들었다. PROD에서 이런 일이 벌어졌으면 응답시간이 몇 배는 길어졌을 것이기 때문이다. 예상치 못한 방식의 부작용이 있을 수 있음!   Philosophy   중국 화폐의 흥망성쇄 (경화-&gt;법정화폐 사이클), “국내 부채 문제가 발생했을 때 자본 통제가 적용되는 통화를 보유하고 있다면 얼른 빠져나와야 한다.” 이런 원칙을 제시 했는데 그래서 선진화된 자본시장은 고평가 받아도 이머징 마켓보다 괜찮다고 보는것 같다. 한국은 얼마든지 공매도를 금지할 수 있는 나라란 이미지일테니까. 국유화나 디폴트 선언, 자본규제 모두 자본가 워너비..? 들이 겪을 수 있는 최악의 공포. 어쨌든 오늘은 중국 근현대사 부분을 읽었다. 덩샤오핑의 빛과 어둠, 시진핑이 관리하는 오늘의 중국을 보면 덩샤오핑이 20년만 더 오래 살았으면 중국이 미국을 추월하는 시점이 10년은 빨라지지 않았을까 그런 생각이 든다. 어제도 메이지 유신을 언급하면서 한 이야기인데 한 시대를 성공적으로 이끌었던 정신적 정수를 다음 세대가 이해하지 못함으로서 신흥 강국은 무너진다. 시장개방과 공산주의의 묘한 궁합의 정수를 덩샤오핑은 이해했지만 시진핑은 그러지 못하고 마오쩌둥 같이 정치의지에 몸이 쏠려 현실에서 실책하는 것처럼 보이기 때문이다.   Dairy   마늘을 1kg 통째로 사서 500g을 한번에 볶았는데.. 너무 맛있어 보인다. 내일 아침아 빨리 와라.   English   전치사에 따라 뜻이 달라지는걸 외우지 말고, 동사가 전치사에 의해 완성이 되는 관점에서 보자.   Life      움직인 시간: 0.5 hr   습관 일기  남자들도 사고방식이 바뀌어야 합니다 낙태 이야기다. 권리가 없으면 의무도 없다는 당연한 이야기인데 언제부턴가 그런 생각을 하지 못하게 됐을까. 가장 불쌍한 사람이 가장 고통받는 사람이 가장 목소리를 높힐 수 있다는 (감수성 최대로!) 좌파의 관점에 압도당할때 잊었다는 생각이 든다. 그러고보니 가장 낮은자로 와서 죽었으니 그가 메시아라고 증언하는 마태의 증언, 예수의 서사가 떠오른다. 과연 나(또는 사회)에게 필요한건 제국의 합리인가 예수의 전위인가?   생체배터리: 55% → 15%   ","categories": [],
        "tags": [],
        "url": "/P2-TIL-39",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  js 3년전에 메모해놓은거 보면서 무슨 이야기였는지 돌이켜보는 시간을 가짐. 이전에 메모해놓은걸 하루 10분씩 투자해서 베어노트로 옮길 예정.   Devops  EKS, Prometheus, Argocd, CloudWatch, Elastic Stack 파트 다시 읽어보면서 정리   Philosophy  시진핑 이후 미중관계의 전개. 무역/경제, 기술, 지정학적, 자본, 군사, 문화, 자체적 7가지 분야에서 벌어지는 전쟁의 양상에 대한 소개. 전쟁이 발발하는 시점에 대한 저자의 생각(필수 물자에 대한 경제 제재. 일본군이 미국을 공격하게 된 계기는 석유 수입금지 조치). 5~10년간 벌어질 가장 중요한 현상은 미국과 중국의 경제의 디커플링. 디커플링은 당장 생산의 효율성을 떨어트릴것이고 나아가 중국이 선도국으로부터 기술적으로 독립하는 계기가 될것임. 점차 독립할수록 중국의 경쟁력이 확보된다. **따라서 시간은 중국의 편이다. **미국의 지도자들은 미국의 경쟁력이 점점 떨어지고 있다는 것을 절대로 고백하지 않을 것이고 그 사이 중국은 더 많은 돈과 인력을 기술개발에 쏟아 추월을 가속하게 될거란 의견 (중국의 STEM 졸업생 수는 미국의 3배 80년 이후 미국에서 3차 교육인구가 68% 늘동안 중국은 2272% 늘었다)   English  전치사 이야기   Life  움직인 시간  2.0 hr   습관 일기  다이어트브레이크에 관한 최신 논문(2021)   남미가 발전하지 못했던 진짜 이유 (12분 순삭VER.) #23   미디어는 가짜다2: 유튜버 밍동과 대중의 판타지   한국은 ‘반도체 동맹 참가 여부’를 결정하라 일본과 호주와 중국의 교역이 줄지않은 통계를 봤는데 도대체 뭘 한 걸까. 다들 입으로만 반중을 하면서 돈을 알아서 벌고 한국만 사드의 악몽에 시달리나 보다. 결국 만만한 놈이 약한 연결고리로서 양쪽에서 당하나보다.   764. 인플레이션, 주식 투자의 적   생체배터리  40% → 0%. 오늘 컨디션이 대체로 안 좋았다. 운동 퍼포먼스도 많이 떨어지고 운동 후엔 심하게 의욕이 줄어드는 문제가 생겼다. 찾아보니 크게 속도에 영향을 안준다길래 일주일 정도 다이어트 브레이크 할 예정.   ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-40",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  쓸쓸한 마음에 대한 짤막하게 글 하나 쓰면서 배운 내용을 정리했다. 가진 고민은 사람을 만나서 풀어봐야지. 혼자서 생각하면 안되~~~   Philosophy  오늘은 코드는 쉬고 책을 많이 읽었다. 변화하는 세계질서 3부는 미래에 대한 예측을 하고 있는데 1부 2부에서 해놓은 근거로 양국의 관계를 예측하는 내용이기 때문에 완전히 새로운 지점은 없었다. 다만 다른 나라의 데이터와 비교하는 내용이 많아서 흥미진진했다. 네덜란드나 독일, 한국에 대해 낙관적으로 보는 저자의 시선과 중국의 부상을 굉장히 주목하고 있으면서도 여전히 20년 뒤에도 미국의 기술 주도권은 여전히 지켜질것을 예측하는 자료를 그의 홈페이지에서 보게 되었다. 동시에 3부의 중국과 미국이 서로 레드라인을 넘지 않기를 기도하는 저자의 마음이 간절히 느껴졌다.   한편으론 시간이 중국의 편이라는 그의 해석은 의미심장했다. (미국에 비해 훨씬 많은 투자를 하고 인력도 많으므로) 중국의 부상을 각종 제재로 꺽어놓아야하는건 미국이다. 역사는 그 꺽어놓으려는 시도에서 항상 전쟁이 났다. 저자는 할 수 있다면 미국은 대리전쟁을 하고 싶어한다고 이야기를 하는데. 전쟁을 항상 중국이 하고 싶어한다고 생각했던 나에겐 새로운 시선이었다. 그래서 대만을 둘러싼 정국은 인류의 미래가 걸려있는 문제가 되어버린듯하다.   마지막으로 미국의 내전 가능성을 높게 보는 그의 전망은 여기서 다시 강조되었다. 정치적으로 분열된 1.6 사건이 2024년 대선에선 어떻게 확대될것인가? 바이든이 하는걸 보면 미국은 하루가 다르게 분열되어 가고 있다. 역사적으로 보면 항상 외부의 적과의 전쟁을 통해 마무리되던데 🥲   Dairy  브런치는 테크이야기를 하기에 많이 불편해서 github 블로그 셋팅중. 정적 파일로 하는 점도 맘이 놓이는데 호스팅도 해주니 베리땡큐   English  전치사 관용구 부분 진행. in과 to를 왜 미국인들은 그렇게 쓸까에 대한 심리적 분석.   Life  움직인 시간  0.5 hr   습관일기  그냥 오르는 건 없습니다 파월은 힌트를 줬습니다   생체배터리  : 40% → 10%  ","categories": ["TIL"],
        "tags": ["TIL","Diary"],
        "url": "/til/P2-TIL-41",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "Devops 교육 완강 후기",
        "excerpt":"Devops 는 어떤 미래를 꿈을 꿀 수 있을까?   커리큘럼과 중반까지에 대한 내 감상은 다른 포스트에서 다루었다. → 🔗Devops 교육을 들으며 중간 정리    순수 영상 재생 시간. 실습, 메모, 모르는 개념을 찾는걸 포함 더 많은 시간을 투자했다.   후반부 커리큘럼은 다음과 같다.     도커와 쿠버네티스를 이용한 배포구성 및 운영   Jenkins / AWS Build Series / Github Actions / Circle CI를 이용한 실습   Argo 를 이용한 쿠버네티스 배포구성   Prometheus+Grafana, CloudWatch를 활용한 모니터링 데이터 수집 구성 및 모니터링 라인 구성, SNS 연동   ELK Stack 구성, 데이터 수집 및 시각화   IAM(Assume, IRSA), Session Manager, 골든이미지 구성 파이프라인, Inspector, Endpoint (Produce, Consume),GWLB, ANF, AWS WAF, CloudTrail, GardDuty, Security Hub 등 보안 서비스를 네트워크에 적용하기   커리큘럼에 대한 해제  자세히 보면 똑같은 기능에 대해 여러 가지 툴을 이용해 진행한 내용이 한 것이 많다. 각 툴들의 컨셉을 비교함으로서 차이와 공통점을 몸으로 이해하도록 해놓은 구성이다. 실제로 사용할 때는 더 깊은 기능과 작동 원리와 절차에 대한 더 깊은 이해가 필요할 텐데 그땐 학습자가 문서를 읽어보며서 하면 될 일이라고 본 것 같다. 그리고 나도 그런 점에 공감한다. T자 학습의 구조인데, 여러 가지 워크플로를 몸으로 익히고 생소한 단어와 개념에 익숙해지는 게 커뮤니케이션의 시작이라고 생각하기 때문이다. (일단 팀에 들어가면 아키텍트를 봐야 하니)   쿠버네티스 쇼크  전반부 파트에서 나에게 가장 충격을 준 툴이 Ansible 이었다면 후반부에서 가장 충격을 준건 받은 부분은 kubernetes 였다. 도커만 해도 컨테이너로 관리와 배포를 혁신적으로 할 수 있어서 큰 변화라고 느꼈었고 앤서블도 매니페스트 기반으로 인프라 작업의 Reusable을 획기적으로 개선했는데 쿠버네티스는 거기서 더 나아가 인텔리전트까지 갖추었기 때문이다.   파드를 노드에 배치하고 네트워크와 연결하는 부분은 문서로서 정의해놓으면 나머지는 쿠버네티스가 유연하게 적용함으로써 한 사람이 할 수 있는 작업의 양과 정확도, reusable 이 폭발적으로 증가하게 된다. 테스트 베드나 다른 리전에 서비스를 하고 싶을때도 코드를 복사해 테넌트 이름만 바꾸는 것으로 구성할 수 있는 점도 지적하고 싶다. 거기에 Lens처럼 웬만한 건 다 GUI에서 신속하게 처리할 수 있는 툴까지 합치면 왜 이 툴이 그렇게 주목받는지 이해가 되었다.   SaaS의 엄청난 효율성  그리고 Part8 AWS 보안, EKS 내용을 보면 Devops는 AWS가 만들어놓은 베스트프랙티스 서비스를 SaaS란 이름으로 구매해 회사의 비즈니스 로직과 연결하는 역할로 보일 수도 있다고 생각한다. 10명의 사람들이 직접 만들어서 했어야 할 서비스를 빌려와서 할 수 있는 현실에. 그 한 사람이 되기 위해 무언가 공부를 한다는게 경제적으로 이치는 맞는 말이지만 뭔가 SaaS를 연결하는 게, glue Coding이 직업이라고 단면적으로 해석하면 뭔가 쓸쓸하게 느껴지지 않는다고 하면 거짓말이라고 생각한다.   실제로 일을 하다 보면 결국 거기서도 커뮤니케이션적인 측면과 도구를 사용하는 방법과 정책에 있어 사람과 사람사이엔 결과물의 차이가 생기겠지만 클라우드 SaaS 사업자는 그런 차이를 줄여 균일한 서비스를 체험할 수 있도록 베스트프랙스트를 매일 생산해내고 있다. 예를 들어 EKS는 컨트롤 플레인에 대한 염려를 때어놓을 수 있게 했고. EKS에서도 EC2대신 쓸 수 있는 파게이트는 데이터 노드에 대한 걱정도 때어놓게 만들었다. 그 다음은 무엇이 될까?    다극화니 뭐니 하지만 인터넷 공간은 더 좁아지고 있다. 하나된 미래가 온다   목을 내어놓고 있다는 느낌을 지울 수 없다.  우리는 1년 뒤엔 인도에 있는 24*7 근무 MSP(Managed service provider) 조직에 AWS 계정을 맡기는 CTO를 만나게 될지도 모른다. 그 회사에서 CTO는 비즈니스 로직이 들어간 repository와 개발자들의 사기를 관리하는 일을 보고 남은 시간 동안 다른 CEO들에게 디지털이 주도하는 비즈니스를 어필하는데 자신의 중요성을 어필하는데 집중하게 될 것이다. 그리고 가끔 인도인들이 돈을 헛되게 쓰고 있지 않은지 비용분석 회사의 컨설팅 보고서를 읽는다.   자본주의가 효율적일수록 사람과 사람 사이에 일의 퀄리티에 차이가 없을수록 클라우드 회사들이 열심히 그들의 성공 케이스를 적용할수록 그 미래는 더 빨리 올 것이다. 그때 나를 포함한 전 세계의 데브옵스들은 24*7 근무를 수용한 절박한 인도인과 무슨 차별점을 가지게 될까?   이건 망상이 아니다. 이 추론은 ITO 외주가 일상이었던 지난 업계의 질서의 연장이자 확장이다. 회사가 모든걸 다 하려고 할때는 보다 쪼개고 나누어줄때 더 효과적이었고 동작하는 모델이었다. 적어도 오늘까지는.   (생각해보면 아마존은 그러지 않았다. 아마존은 자신의 ITO 외주를 하는 대신 전 세계의 회사들이 각자 개발하고 있을 인프라 시스템을 세계인이 API로 쓴다는 생각을 실천에 옮겼다. 그리고 후발주자들은 그 아이디어를 카피했다.)   난 이런 욕망을 가진 사람이구나  이런 내 걱정과 싸늘한 감각엔 일을 통해 긍지를 얻고 존중받고 싶다는 욕망, 도저히 내 인생에서 지워낼 수 없는 그 욕망이 근거하고 있다. 이 강의를 들으며 그 감히 두려워 입에 담을 수 없었던 그 욕망을 다시 발굴해낸 점이 이 강의에서 얻어낸 가장 큰 소득이라고 생각한다.   다만 이 생각은 수강을 마무리하는 시점에 묘하게 싸늘한 그 감정을 쏟아낸 것에 불가하다. 나 혼자만의 생각이니 다른 사람들과 토론하고 관련된 사람들의 책을 읽어봄으로써 발전시켜나가야 한다. 성급한 결론은 내리지 않는 것으로 하고 이것으로 마무리한다.   ","categories": ["devlog"],
        "tags": ["devlog","software","devops","career","미래"],
        "url": "/devlog/P2-TIL-%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-Devops-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%99%84%EA%B0%95-%ED%9B%84%EA%B8%B0",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"jekll 설정, 무전치사, 그래도 미국, 일본 부동산  Language  m1 환경에서 루비 설치하느라 한번 뒹굴고 jekyll theme config에 들어갈 검색엔진 등록 등 작업을 하는데 주로 시간을 보냈다. 정적 블로그를 써보는건 처음이라 기능들을 익히느라 정신이 없다. 바이두 가입도 했다. 클라우드 서비스는 한국 전화번호로도 가능하더라. 가격만 싸면 바이두에다 정적 파일들을 올려놓고 쓰는것도 나쁘지 않을듯. 보안이 걱정되면 암호화해서 올리는 방법도 있을테니.  Shell  rev, cut, paste  Philosophy  이 책을 읽으면 은근히 중국에 대해 관대하게 평가하는것 처럼 느껴지면서도 그렇다고 미국에 당장 넘어가는 시나리오까지는 가지 않는 모습을 수치적으론 예상한다. 그가 웹에 공개한 20년 뒤 제국수치를 볼때 여전히 미국이 앞서고 있는게 그렇다. 말은 중국의 리드를 말하면서도 수치로는 그렇지 않게 말하는 건데. 작가는 중국을 너무 무시하는 서구와 그 동맹국 독자에게 경고를 하면서도 객관적으론 공산당이 미국에 이기지 못할거란 생각을 하는 것일수도 있겠다.  English  무전치사 파트를 읽었다. 이 책이 참 좋다. 예전엔 이런 시선으로 영어를 생각해본적이 없었는데.. 그냥 경험이 쌓이고 쌓여 아마 그런건가 했던 부분을 개념적으로 설명해준다.  Life     움직인 시간: 0.5 hr 오늘 야근이 있어서 운동을 못했다.   습관 일기 우리나라 집은 비싼걸까?  화폐를 알고 나니 뭔가 다르게 느껴진다. 공부 좀 빨리할걸 우씨   생체배터리: 40% → 15%  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-42",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"golnag, ADA, Labview, 자본주의, 고피자, 멘탈포인트오브오리진  Language  golang 관련 3년 전에 써놓은 메모 보면서 그때의 내가 주의깊게 본 내용과 내가 지금 중요하다고 느끼는 점을 비교해보았다. 헌데 영양가 있는 의미소는 되지 못한거 같다. 언어를 공부하는데 있어 뭔가 길게 메모를 남기는건 쓸모가 없을지도 모르겠다. 필요하면 그때 잘 정리된 곳을 찾으면되지. 차라리 포스트를 쓰는게 남는 장사다. 영어 공부와 언어도 다르지 않다. 결국 지식이 Acqusition이 되는건 사용하고 러닝되고 고통을 느낄때다. 아름답게 내가 모르는것만을 적는것은 아무런 의미가 없다. 정말 중요한 내용인것같다. 메모를 하고 싶다면 정말 철저히 키워드 중심으로. 회고만을 위한 용도로.  Devops  전장사업에서 사용하는 언어체계가 궁금해서 찾아봤다. RTOS 기반으로 ADA, C++이 자주 쓰인다고 한다. Labview 라는 도구가 하드웨어 테스트 분야에서 우월한 지위를 가지고 있어 미래를 좋게 보는 사람도 있었다. 하드웨어 분야에 대한 회의적인 이야기도 많았다. 다만 IOT 시대가 되면서 아날로그와 디지털의 혼합 (디지털 트윈)의 필요성이 증가함에 따라 기회는 얼마든지 있다는 의견도 읽었다. (난 알리프레스에 있는 수 많은 IOT제품을 보면서 느낀 두려움이 생각난다)  Philosophy  변화하는 세계질서 드디어 다 읽었다. 자본주의에 구조에 대한 이해, 국가에 대한 큰 그림을 이해하고 나니 두려움이라는게 사라지는 기분이다. 알지못해서 오는 공포가 진짜 공포하고 했던가. 이제는 좀더 낙관적으로 경제현상을 바라볼 수 있게 되었다. 꼭 읽어야할 책이다.  Diary  밤에 코딩을 하면 잠도 안올때가 많은데 자기 직전에 영어 공부를 하려니 뭔가 졸린다. 아침에 영어 공부를 하도록 스케쥴을 잡아야겠다.   Life     움직인 시간: 2.0hr 락스로 화장실 청소를 했는데 정말 틈새 곰팡이가 사라지는거 볼때 마다 기분이 좋아진다. 청소 중독되겠어   습관 일기            기승전 치킨집 대한민국 이 영상은 별 볼일 없는데 중간에 고피자 이야기가 나와서 인터뷰를 보니 정말 21세기엔 저렇게 살아야한다는게 농축된 인터뷰였다. 추천.       How The Economic Machine Works by Ray Dalio 살면서 본 영상중에 자본주의를 가장 잘 설명한 영상인듯하다. 아직 한국어 자막이 없던데 내가 입혀볼까?       ElliQ at CES 2019 (CNET): ElliQ is a Robot Helper for the Elderly 뉴욕에서 노인들에게 제공하는 로봇이라고 한다. 이렇게 가정용 로봇이 하나하나 도입되고 있다.       Mental Point of Origin이란? 그 사람을 움직이는 원천적 동기가 무엇이냐? 대한 답이다. 댓글 중에 삶에 대해선 별로 알아야할게 없다. 라는 의견이 있었는데 뭔가 퍽하고 맞는 기분이 들었다. 매순간의 자신을 알필요는 있다. 하지만 자신의 삶에 대해 알아야할것은 간단해해도 된다. RTOS처럼 자신의 삶의 OS는 가볍게 짜고 세상을 좀더 해석하고 움직여야하는것이다. 삶의 OS를 자바EE처럼 만들면 안된다. (미국 민주당이 생각나네)           생체배터리: 60% → 15%  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-43",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Github Markdown, re:inven, CKA, 부정사, 좋은 메모의 조건  Language  Python: BEAR 사이드 프로젝트, Github 블로그를 쓰고 있으니 결국 깃허브 포맷의 마크다운에 적응하는게 편할것 같아서 코드를 뜯어고쳤다. 베어에서는 깃허브용(?)까진 아니지만 호환용 마크다운 옵션을 제공한다. 그래서 그걸 켜고 내가 만들어놓은 함수들 중에 몇개는 작동 중단하도록 고쳤다. Go: 예전 메모를 옮기면서 무슨 내용이 있었는지 다시 읽어봄.  Devops  AWS 2021 re:inven 영상에서 AI/ML, 인프라, 관리도구 영상을 봤다. 어떤 생각을 하고 사는지 1-2년 사이에 큰 패러다임의 변화가 있었는지 체크하는 용도로. 구체적으론 AWS Rekognition 을 활용한 영상블러 작업이나 추천시스템에 대한 소개 영상봤다. 굳이 회사에서 하나하나 다시 만들지 않아도 AWS에서 만들어놓은 ML의 결과와 학습도구들을 사용할 수 있는 모습을 보면 혁신의 속도가 어디까지 빨라질 수 있을지 무섭다. 모든 비효율을 다 삼켜버릴때까지 이 질주는 멈추지 않을것이다. 공산주의가 멀지않았나? 그것 말고도 쿠버네티스 자격증 시험에 대한 영상 1시간 정도 봤다. CKA와 AWS Associate를 딸 예정이다.  ENGLISH  Gerunds (부정사) INIFINITIVES(동명사)에 대한 내용을 읽었다. 예전엔 왜 이런식으로 나한테 선생님들이 가르치지 않았을까. 정말 뭔가 혈이 뚫리는 내용이 많았다. 굳  Diary  3년전 메모를 한시간 정도 정리 했는데 별로 감흥이 없는 메모를 보면서 메모를 다시 찾아서 참고하겠다는 용도로 쓰는건 정말 별로 인것 같다. 일주일 뒤에 다시 읽었을때 감탄이 없는 내용은 쓰지도 않고 잊지 말아야할 키워드만 남겨놓는게 최선인것 같다.  Life     움직인 시간: 0.5hr 원래 오늘 밖에 나가서 사진 좀 찍어볼려고 했는데 공부하는데 불이 붙어서 그냥 더 있기로 헀다. 질릴때가 오면 가면 되겠지.   습관 일기            일본 부동산 버블이 붕괴된 이유 2부 미국의 음모       Amazon Rekognition Video로 동영상의 얼굴을 자동으로 흐리게 만드는 솔루션 구축하기 나보고 모델을 만들라고 하면 못하겠지만 만들어놓은 서비스 붙이는건 할 수 있을것 같은데.. 내가 잘 몰라도 할수 있는게 많아지고 있다. 고도로 발달한 과학은 마법이라고 했던가. 예전엔 이런 서비스 하나 만들면 회사가 하나 만들어졌던거 같은데. 아니면 유튜브 편집자한테 건당 돈을 맡기던가.           생체배터리: 50% → 10%  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-44",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"jerky, Disk100%, trap, 배신, 진주목걸이, 해로운 남성성, 현대사회  Language  jerky 공식 문서 읽고 어썸 아이콘 동작안되는 문제 확인. 오늘은 많이 공부를 못했다.  Devops  SVN이 이상하게 로그를 많이 찍어서 디스크 100%가 되는 문제가 생겼다. 로그를 찍도록 요청을 하는 원인파악과 해결은 했지만 정확히 어떤 원리로 인해 그렇게 프로세스가 동작하고 있는지는 jstack 덤프 결과를 읽어봐야 할 것 같다. 실전이 최고의 약.  Shell  trap과 kill sig를 활용한 트릭이 인상깊었다. 쉘이지만 인터렉티브하게 쓸 수 있는 구조.  Finance  어느세 벌써 리밸런싱할 날이 왔구나. 차트는 잘 안봐서 몰랐는데 테슬라가 많이 올랐다고 한다. (시즌 1호 빅수익?)  Diary  오늘날 많은 인터렉티브가 익명이라곤 하지만 사람들에 대해 기대를 하면서 살아가지 않는가. 그리고 또 익명이라도 동질성을 확보한 공간을 각자 찾아가니까 더 기대를 하게 되는데. 그렇게 찾아간곳도 편협하고 닫혀있고 자신의 결백함을 순진하게 믿으며 권위적으로 사상검증을 하며 사람들을 대할때 현타가 온다. 이 민주주의라는것이 얼마나 빈약한 믿음인지. 😞 그럴때면 나도 상황이 안좋아지면 그렇게 대하진 않을까. 우리 모두 잰척 하고 있지만 최후의 순간엔 자신 안의 원시인에게 주도권을 주게 되는게 결말 아닐까. 난 어리석은 저항을 하고 있는건 아닐까. 그런 생각을 하게 된다. 고민이 깊지만 이 격언만은 영원히 진실이다. “돼지에게 진주목걸이를 주지마라” 사소한 일에 무너지지말고 힘내자.  Life     움직인 시간: 2hours   습관 일기            알파 메일’에 대한 사람들의 착각 - 뻔한 이야기지만 해로운 남성성에 대한 솔직한 이야기. 주류가 될 수 없는 담론을 믿는다는건 최후엔 그 사실을 숨기거나 두들겨 맞는 엔딩 밖에 없다. 또한 자신이 믿음이 사회적으로 용인되어야 한다고 생각한다면 그건 약한 생각이기도 하다. 사회가 승인한것만 나도 믿겠다는 태도니까. 결국 마음의 오리진이 나에게 있느냐 사회에 있느냐의 문제다. 우리 인생의 OS는 자신에 맞게 자신의 욕망에 맞게 고쳐쓰는 수 밖에 없다. 포기할 수 없는 부분은 포기안하면 되고 별로 중요하지 않은 부분은 좀더 편리하고 사회친화적으로 고쳐쓰면 되지.       남자를 정 떨어지게 만드는 여자들의 말 - 이 사람은 정말 중세시대 영주를 했으면 정말 유럽대륙을 통일 했을 정도의 마인드. 현대사회가 그를 영주로 만들어주지 않는건 좋은 일일까? (일론머스크는 영주처럼 살던데) 나쁜 일일까? 현대사회가 그를 영주로 인정하지 않는다면 또는 그를 바라보는 사람들이 모두 영주가 될 수 없다면 우리사회에 남녀관계의 이상점은 뭘까?           생체배터리: 60% -&gt; 5%  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-45",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"기술서적의 ROI, 리눅스 쉘 사전 완독, 무직전생  Shell  조금씩 읽었던 『리눅스 쉘 스크립트 예제 사전』 오늘 끝까지 다 읽었다. 처음엔 너무 모른다고 생각하고 꼼꼼하게 읽었는데 실제로 어느정도 쓰고 다시 메모를 읽어볼 일을 만들고 하다보니 ROI가 나오려면 너무 자세히 읽는것은 도움이 안된다는 결론에 이르렀다. 그래서 핵심이 되는 부분만 읽고 그걸 말로 풀어서 기록해서 메모를 읽었을때 그렇게 있었지! 정도로만 상기할 수 있을 정도만 메모를 남겼다. 자세한 메모는  앞으로 기술서적 읽을때 이 원칙을 모두 적용할 필요가 있을것 같다. 대충 읽고 어디에 그 지식이 있는지만 적던가, 모두가 읽을 수 있는 정돈된 포맷으로 포스트를 쓰던가.  주요 키워드: seq, id -nu, loop with read, time, vmstat, declare  bash 전용 키워드, 브레이스 확장, 산술확장, 프로세스 치환, PIPESTATUS, select, /dev/pts/1  Philosophy  내일 부터는 『거대한 전환』 을 읽을 예정  ENGLISH  오늘 Mushoku Tensei 란 애니를 영어더빙/영어자막으로 14편 정도 봤다. 중간중간 멈추면서 영어단어 찾으면서 보는중, 이런거 보다보면 도대체 어디서 한번 검색해서 찾아놓고 한 5년 10년 만에 다시 보는 단어들이 많을때 현타가 온다. 모든게 다 들리진 않지만 진심으로 궁금할때 전력으로 해석할 때 보람이 있다. “감정이 있는 곳에 학습이 있다.” 이런 말이 생각난다.  Diary  요즘 기분이 하강기에 들어간것 같아 원인을 찾고 있다. 가설을 세우고 행동해서 전후를 비교해봐야지.  Life     움직인 시간: 0 hours, 오늘은 재택근무를 했는데 밖에 나갈일도 없어서 정말 꼼짝도 안했다.   습관 일기            한국은행이 금리를 제대로 올리지 못하는 이유           생체배터리: 40% -&gt; 5%  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-46",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":" Language  jekyll 셋팅하면서 이것저것 건들여봤다. 리액트 없이 자바스크립트와 마크다운을 이렇게 혼합해서 동적인 컨텐츠를 만들 수 있다는게 신기하다. 일단 빌드가 되고 나면 DOM은 순수한 상태이므로 CSS커스터마이징이나 자바스크립트로 컨트롤 할 수 있는 자유도도 높다. 요즘은 서버사이드 렌더링이 유행한다던데. 역시 정적 서비스가 짱이지  Shell  표준출력으로 연결해도 되는 것과 xargs로 해야하는것 점차 편하게 구분되는것 같다. 예전에 비교할 수 없이 자신있게 명령어를 쓰고 있다. 표준입출력에 대한 이해는 일반 언어 배울때는 매번 똑같은 걸음이었던거 같은데. 맨날 수학책 1장만 공부하는 느낌. 배시로 하니까 맥이 뚫리는 기분이다.  ENGLISH  무직전생 24화 까지 다 봤다. 여성 주인공이 남자에 대한 존중심을 이렇게 적극적으로 보여주면서도 낮간지럽지 않은 작품은 처음인것 같다. 스스로를 검열하고 무시당하는 판국에도 존중받기를 갈망하는 요즘 남자들에게 위로를 주는 영리한 캐릭터 구조의 이야기라고 생각한다.   왜 영리하냐? 심야애니의 pathetic한 냄새가 이 작품엔 없기 떄문이다. 루디스는 이기적인 두 파트너를 조율하는 리더로서의 역할을 묵묵히 해냈고 끝없이 자신을 발전시키며 에리스의 상황을 컨트롤 할 수 있음을 증명해낸다. 이것이 에리스가 루디스에게 보내는 존중과 사랑의 근거다.   동시에 에리스는 남자를 존중하며 무능력하게 보호를 기대하는 애처로운 전통적 히로인(ex. 클라나드)이 아니라 남주인공를 돕기위해 스스로 발전하고자하며 자신의 비교적 단순한 머리로 남자에게 할 일을 많이 만들어준다.(너무 다능하면 나눌 일이 없다) 보통의 모에 애니메이션엔 이런게 없기 때문에 심야애니메이션은 pathetic한 오타쿠들의 문화라는 느낌을 언받는데 (그런 코드가 없으면 보통 오버그라운드 작품 즉 인싸픽이 된다.) 이 작품은 그런 느낌이 들지 않도록 캐릭터들의 권력역학을 잘 설정한것 같다. 다만 혐오스러운 캐릭터 설정 때문에 그렇게까지 유행을 할것 같진 않다. 그런 측면에서 보면 건강한 맛 에반게리온 느낌이네.  Life     움직인 시간: 2hours   습관 일기            해결돼야만 하는 둔촌 주공아파트 재건축 사태 그놈의 소유권. 그냥 일괄적으로 소유권과 토지를 건설사에 전매한 다음 증권을 가지고 입주권과 추가수익을 나눠가지는 모델로 사업을 하면 안되나? 왜 자본주의를 민주주의와 결합해놓고 이런 말도 안되는게 작동될때까지 스스로 셀프 고문을 하는걸 생산방법이라고 주장하는걸까.        지구 온난화의 주범은 ‘인간’일까 ‘태양’일까? 과학적 팩트로 알아보는 기후 위기의 핵심 나는 옛날부터 원자력 발전을 지지했는데 세상은 피를 봐야 정신을 차리나보다. 그런 점에서 누군가가 사람들이 올바른 패러다임을 예측하고 주장하더라도 다음 페이즈로 가기 위해선 다수가 기존의 틀린 패러다임을 끝까지 밀어붙여 버블을 붕괴시킬떄까지 잘못된 실행이 누적되어야 한다는 이야기가 떠오른다.           생체배터리: 40% -&gt; 30%    ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-47",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Today I learned &amp; Diary  Language  오늘도 Liquid 공식 DOC 보면서 블로그에 사용할 템플릿들 정리했다. 그리고 지금 테마를 정말 잘쓰시는 깃허브 블로그 참조해서 볼만하게 고쳐놨다. 색감은 Bear app - ‘Panic’과 Iterm app - ‘Dracula’를 참조했다. 오랜만에 CSS 고치는게 재밌어서 밥먹고 하루종일 책상에 앉아서 이것만했다. (살짝 후회되네)   그것 말고도 오늘 ‘DALLE’ 서비스 사용허가? 나와서 사진을 찍어냈는데. 언어를 통해서 창조를 해내는 경험이 재미있었다. 그런데 하루만에 크레딧이 바닥이 났다. 😢   DALLE 한테 처음으로 짤을 선물받았다. 예쁘다.. pic.twitter.com/5UXzbnrVnt &mdash; Hibike_Quantum (@Hibike_Quantum) August 4, 2022   Life     움직인 시간: 0.5 hours   습관일기            인생의 주도권을 상실한 경우       카산드라 신드롬과 에코이스트에 대하여.           두 영상다 인생을 살면서 공격을 할때와 방어를 하는 방법에 대한 이야기다. 영리하게 이걸 해내지 못하면 아무리 뛰어나도 인정받지도 스스로 만족할 수도 없다. be smart~!     생체배터리: 40% -&gt; 10%  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-48",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Today I learned &amp; Diary  Language  Python 사이드 프로젝트 2단계 돌입. 사용성을 높힐 수 있는 옵션과 추가 될 기능들의 엔드포인트를 작성해서 머지. 메모에 있는 문자열 데이터를 분석할 오픈소스 한글 분석 패키지, 데이터의 변화를 인터렉티브한 SVG로 출력할 라이브러리로 bokeh를 채택했다.  Shell  프로그램을 bash로 하느냐 파이선으로 짜느냐 고민이 많다. bash로 하는게 더 재밌긴한데 개인적으론 시간이 오래걸리니  Philosophy  칼 폴라니. 거대한 전환 1일차 진행. 100년이 다 되어 가는 책이 생명력을 가지고 있다는걸 보면 세상의 이치는 시간이 흘러도 변하지 않는 다는점을 보여주는것 같아서 마음 한편으로 안심된다. 우리가 그 원리를 파악 할 수만 있다면, 영원히 파악할 수 없을 것만 같은 시장의 진화 속에서도 인간 존재를 유지하기 위한 조건들을 충족시킬 수 있을 것이기 때문이다. 한편으론 이 발문을 쓰는 사람들이 시장의 자기 조정에 대해 너무 비판적인게 뭔가 옛날에 좌파들을 생각나게 해서 조금은 반감이 들기도 한다.  Finance  주말은 좀 공부를 해서 월요일에 리밸런스 해야지. 사실 벌써 퀀트를 해서 기계적으로 하겠다는 규칙은 스스로 깨트려버린지 오래다. 깬덕에 다행히 벌어서 다행이지만.. 앞으로 계속 이렇게 할 수 있을까. 내가 보는 시장은 너무 빠르게 변하는데 10년 단위로 지속되는 사이클에 맞춰 최적화된 퀀트의 규칙은 마음에 안든다. (그래서 퀀트들이 지난 7개월 동안 다 박살났다. 새로 보는 패턴이라) 무제한 양적완화 완화 같은 이상한 짓이나 그걸 또 긴축하겠다고 떠벌이는 이벤트, 대규모 정책경제 등의 이벤트에 대해 전혀 퀀트는 적응할 준비가 되어 있지 않다. 역사가 짧은 근본없는 ETF의 최적화란 느낌을 지울 수가 없다. 다만 그들이 만들어놓은 매매의 규칙은 시장이 예측 가능한 사이클로 돌아왔을땐 적용할만하다고 본다.  ENGLISH  to 전치사의 활용 방법에 대한 부분 진행 중  Life     움직인 시간: 2 hours   습관일기            임용한 박사가 알려주는 투자와 투기의 차이점 ➡️ 전쟁사에서 보는 훌륭한 행동양식을 발굴하고 그걸 투자로 연결시켜보는 컨텐츠. 가장 치열한 인간 역사의 정점에 있는 전쟁에서 빗어지는 지혜를 보면 평소에 지혜를 발굴하려면 어떤 환경에 나를 놓는게 좋을까. 고민하게 된다.       대부분의 남자들이 모르는 여자들의 역설 ➡️ 성전략의 전제 때문에 스스로 자빠지는건 특정 성에 국한된 이야기가 아니란 이야기. 확장하면 우리가 어떤 프레임으로 세상을 바라보고 그것이 동작할때 그것이 동작하는 이유로 인해 무너질때가 온다는 이야기다. 그래서 유연하게 가장 이해하기 쉬운 전략인 좌랑 우를 왔다갔다하고 더 나아가 균형을 설명할 수 있는 현상의 원리를 찾아내야하는 이유.           생체배터리: 50% -&gt; 25%: 직접 코딩을 하고 커밋 할때 너무 뿌듯하다. 하루가 활기찬 기분. 책 읽은 내용이나 메모를 정리한다거나 Glue작업 할 때와는 차원이 다르다.      ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-49",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Today I learned &amp; Diary  Philosophy  거대한 전환, 서문이 도대체 몇 개나 되는건지 오늘도 서문만 읽다가 끝났다. 저자의 경제를 민주주의에 복속시키려는 원대한 플랜을 스웨덴이 실현시켰다는 이야기를 보고 스웨덴 경제에 대해 찾아봤는데 나름 잘해나가고 있는 국가처럼 보인다. 경제신문에서 스웨덴을 자원이 풍부한 나라로 포함시켜서 뭔가 있는줄 알았는데 원유생산량도 별 의미 없어보이고 불모지가 넓어 경작지가 넓은 나라도 아니었다. 임업과 철광에서 기반한 제조업이 자원에 기댄 산업들이었다. 폴라니가 꿈꿨던 모델이 정말 잘 동작할 수 있는지 책을 읽어보면 대충 알 수 있을것 같다. 지금 시점에서 추정하건데 그의 논지는 아마도 세계를 단 하나의 경제적 프레임에 복속시키려는 세계화에 반대하고 각 사회 제도에 있는 특수성을 잘 녹여내는 의사결정 체계를 만들어 내는것인듯하다. 다행인지 불행인지 세계화는 벌써 하루가 다르게 후퇴중이다.  Finance  리튬 선물 투자가 어떨까 알아보는 중. 공급과 소비, 가격을 둘러싼 요인들에 대한 장기적 이해를 충분히 한다면 선물도 괜찮을것 같다. 주식은 정부의 조정이나 이벤트 등 너무 공부할게 많다.  ENGLISH  원형부정사 진행. 외국어 학습에 대한 이론들도 책 중간에 있는데 재밌다. 모든 학습에 적용시킬만한 이론들임. Comprehensible Input, Interactional modification  Diary  여의도의사당, 더현대, IFC몰 여행을 다녀왔다. 원래는 저녁까지 계속 돌아다닐려고 했는데 생각보다 너무 지루해서 금방 집에 왔다. 진짜 여행 재미없다. 빨리 집에와서 독서나 코딩이나 하는게 더 재밌을것 같다는 생각이 불쑥불쑥드는게. 난 정말 자본주의가 제시하는 물질적 환상에 너무 관심이 없는것 같다. 이래서 투자를 어떻게 관찰력있게 할 수 있을런지.. 아무래도 상품을 다루는 회사는 하면 안될것같다. 그나마 관심을 가지고 지켜보는건 데이터, 농업 산업일까.  Life     움직인 시간: 6hr   습관 일기            770. 나라면 이런거 사겠다 - 동적자산배분(2022.8) 경제 동향을 보건데 중간선거까지 주식을 들고 있을 이유가 충분한것 같다. 월요일에 매수해야지.       일본 와 문화가 만들어낸 일본의 노포들 결과에 대해 원인을 분석하는 방법에 원래 그렇다라는 설명은 집어치워야한다. 이 영상을 보고나서 우리가 일본인을 바라보는 시선이 얼마나 편협했는지 깨닫게 되었다. 이 역사 깊은 사회의 규칙에 따라 만들어진 ‘와’를 겨우 일본인들은 장인이야~ 라고 설명하다니. 얕은 해석은 실질적으로도 그렇지 않고 그게 도움이 되지도 않는다. 제대로 알아야 한다.           생체배터리: 60% -&gt; 20%   일일 메모장 커밋  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-50",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Today I learned &amp; Diary  Language  오늘은 medium exported 된 html파일을 md양식으로 바꿔주는 프로그램을 사용해 medium 블로그를 옮겼다. 닉네임을 바꾼덕에 gist 링크가 깨지고 이미지에 넣은 캡션도 다 깨지는등 문제가 많지만 그냥 내용들을 읽으면서 복습도 하고 무슨 생각을 했는지 반성 중이다. 주된 내용은 팀 프로젝트에 대한 회고나 javascript에 대한 개념들.  Finance  운동하면서 favorite 해놓은 자산들 전부 둘러봤는데 그 동안 많이 조정받은 성장형 우량주는 10% 가량. 완성형 우량주는 오히려 떨어졌다. (IBM, 월마트). DBC는 제자리 걸음. 국내 주식중엔 좋은 뉴스를 받은 경기주(배터리)의 경우 15% 이상의 수익이 났고 가장 흥미로운건 카카오게임과 넵튠. 넵튠은 30% 뛰었고 카카오는 단기간이 17%가 뛰었는데. 언젠가 오를 주식인데 그게 언제인지는 모르는 주식의 전형이다 이둘은. 결국 불투명하게 (하지만 이해관계자 주변 사람들에겐 투명한) 운영되는 주식시장에서 이런 주식에 투자하는건 무리수인것 같다. 우마무스메가 분명 수익이 좋을것이라고 나는 생각했으나 그게 게임 릴리즈 직전에 반영되고 바로 조정받는 패턴을 예상했으나 그렇게 움직이지 않았다. 넵튠은 원래 내가 유일하게 장기보유를 생각해본 주식인데 정말 장기투자 주식이라 매번 매크로 이벤트에 주가가 쓸려내려간다. 아직 캐시플로도 좋지 않은걸로 기억한다. 그래서 언젠가 내가 엿본 잠재력이 발동된다면 주식이 튀어오르긴 하겠으나 그게 언제인지는 모를 주식. 그때까지 무한 우하향 하겠지. 정말 이런 투자를 해도되는걸까. (?) 시나리오를 짜서 우량주 투자를 했을때랑 리턴 비교를 해봐야겠다.  Life     움직인 시간: 2hours   습관 일기            https://www.youtube.com/watch?v=4SAhu7LN0Hk       [요즘 북한은] 산림 황폐 심각한 북한…백만 그루 나무 심기           생체배터리: 70% -&gt; 30%       ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-51",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  오늘은 jekll 플러그인 설치하고 설치하는 동안 문제를 커트하고, 오픈소스로 받은 루비 소스가 잘 실행이 안되길래 디버그 해보다가 시간을 많이 보냈다. import 하다가 실패한 부분들 직접 입력해주고. CSS가 마음에 안드는 녀석들은 계속 수정하면서 하는 중이다. 뭔가 시간 낭비인듯 하면서도 포기하기 싫다. 다 끝나면 이제 프로젝트성 포스트를 써야지  Devop  Jira Workflow 쪽 기능을 한참 연구를 했다. 다른 쪽은 그렇게 커스터 마이징에 대한 배려가 없는듯 했는데 워크플로우 하나만은 transition 동작 하나하나에 굉장히 많은 일을 할 수 있게 edit 기능이 굉장히 광범하게 지원된다. 매번 일을 유연하게 한다면 이런 기능들이 별 의미가 없을수도 있겠지만 귓동냥으로 듣는 외국계 회사의 분위기 (업무의 시간의 절반을 사규에 맞냐 안맞냐. 근거가 있냐 없냐를 따지고 있다) 그런 분위기라면 이런 기능들을 참 잘쓰겠다는 생각이 들었다.  Diary  요즘 자는 시간이 자꾸 늦어지고 있다. 블로그 이전 작업이 딱히 큰 피곤함을 유발하지 않다보니 저녁에 힘이 남아서 그런듯하다. 내일부터는 빨리 자야지.  Life     움직인 시간: 0.5hours   습관 일기: 오늘 밥먹으면서 본 UFC 말고 특별히 본 유튜브가 없다. 처음!   생체배터리: 70% -&gt; 40%   🔗일일메모장 커밋        ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-52",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Devops  Jekll 블로그 Import 작업마치고 사이드 카테고리와 Navi바 쪽의 조정작업을 했다. 이제 왠만한건 다 손봤기 때문에 이제 글만 쓰면 된다.   ENGLISH  현재분사, 과거분사를 진행했다. 이걸 보고 있으니 너무 쉬운 책을 고른것 같기도하고. 사전형 문법책을 하나 구비해야할지도 모르겠다는 생각이 든다.   Life  움직인 시간 2hours 1) 살이 빠질수록 운동하고 나면 몸이 확확 변하는게 보이는게 참 기분이 좋다. 2) 인터벌을 너무 빨리 하면 퍼포먼스의 총량이 떨어진다. 몸풀기로 5분은 차분히 힘을 아끼면 전체적으로 더 많이 운동할 수 있다. 습관 일기   [자막뉴스] 한강에 ‘세계 최대 규모’ 대관람차 세운다…오세훈의 꿈 / YTN - 뭔가 감동을 느낀걸 바로 해볼 수 있는 위치에 있는건 참 부럽다. 용과같이7에서 선출직이 되고 싶어한 악당의 마음이 이해가간다.  느슨해진 백엔드씬에 긴장감을 주는 FastAPI 프레임워크 - 운동하면서 본 내용. 뭐 플라스크도 이거랑 비슷할 만큼 짧은 코드로 된것 같은데, 성능은 훨씬 좋다고 하니 공부해볼만 할지도 모르겠다.  3천만원으로 창업해서 200억에 매각한 치킨 프렌차이즈 대표 - 아웃스탠드 메일링으로 알게된 영상. 열심히 잘하는 사람은 성공할 수 밖에 없다는 생각이 든다. 중요한건 잘하는거겠지.. 😢 어떻게 잘 할 수 있을까 영상에 계신분처럼 몸이 박살나기 전에 잘해야 할텐데   생체배터리 70% -&gt; 30% 🔗일일 메모장 커밋  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-53",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":" Still life   Devops  Nexus repository 동작. 2.x 버전은 그냥 os 상에서 파일을 지우고 리인덱스하는 방법을 권하는 사람도 있다. UI가 그렇게 편하지 않아서 그렇게한다. 3.x 버전부터는 logrotate처럼 Policy기반으로 스마트하게 관리해주는 기능이 들어가고 검색을 통해 지우는 방법도 등장함에 따라 이런 불만이 종식되었다. 파일용량이 큰것과 관련이 있는지 모르겠지만 10-20G 정도의 파일을 지웠음에도 1시간 가량 인덱스 작업이 길게 이어진다.   Finance  거대한 전환, 도입부 마치고 본문 진행. 작가가 완고한 도덕주의자였고 사회주의는 그 이상을 위한 꿈이었단 부인의 증언에 살짝 갸우뚱.   ENGLISH  수동태 파트 진행 중   Diary  오늘은 낮에 포스트를 쓰느라 시간을 많이 썼다. 노트한 내용을 다시 정리하면서 쓰느라 시간을 많이 썼다. 시간이 아깝기도 하고 결국 그래서 이 메모로 인해 내가 뭘 얻었을까. 하는 생각도 드는게 기록에 대한 철학을 좀 더 손봐야겠다. 뿐만 아니라 독서행위에 대해서도 점검이 필요하다. 입력에 비해 너무 출력이 안나오는 기분. 요즘 같은 내 마음엔 프랑스 사람이 쓴것 같은 책은 다 맘에 안든다.   Life     움직인 시간: 0.5H   습관 일기: First World Problem - 우리가 문제라고 정의하는게 얼마나 웃긴지 다시 한번 생각해보고 강건한 삶을 살아야겠다고 생각하지만 결국 시간이 지나 선진국이 열심히 하고 있다는 첨단의 비즈니스도 FWP에 부응하는 것이란 생각을 하니 이게 바로 현실의 압축아닌가. 지구엔 심각한 문제 가진 사람은 지불능력이 없고 사소한 불편을 가진 사람일수록 지불능력이 더 크다.   생체배터리: 60% -&gt; 30%  🔗일일메모장 커밋  ","categories": ["TIL"],
        "tags": ["TIL","DAIRY"],
        "url": "/til/P2-TIL-54",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  AutoPubish 사이드 프로젝트 진행을 했다. 키워드를 추출하고 통계데이터를 SVG파일로 추축하는 내용을 진행할 예정이다. 🔗GitHubIssue gitpython 패키지가 익숙하지가 않고 공식 DOC도 너무 불친절해서 이리저리 헤매면서 헤딩 중   Finance  트레이드뷰, 알파스퀘어 같은 서비스를 써봤다. 이전엔 야후 파이낸스, 구글 파이낸스, 인베스팅을 봤었는데 이게 훨씬 편하고 좋다.   ENGLISH  영어회화 1권을 땠다. 영어 학습에 대한 이론은 한번도 접해본적이 없는데 책 중간중간에 소개가 되어있다. 배움 시스템, 습득 시스템, 모니터링, 학습이 되는 문법 요소의 순서, Interactional modification 이론에 따라 적용해볼 수 있는 학습방법이 많아 보인다.   Diary  목요일 저녁부터 금토일 휴가를 보내는 동안 그냥 맘 푹놓고 쉬었다. 해리포터 소설을 틈틈히 읽었는데 정말 재밌었다. 소설을 본지 15년도 되어서 이제 내용이 기억 안나는게 더 좋았다. 이렇게 좋은 작가가 왜 지금은.. 😇 아 한산 영화도 봤는데 뭐 특별히 말할게 없는 평범한 영화였다. 왜군은 화포도 없으면서 왜 그렇게 나대는지 의문만 남는 영화. (바다의 벽이고 자시고 그냥 화력에 다 녹았잖소 양반아) 추가로 역시 국군의 화력에 대한 집착은 종특인걸까.   Life     움직인 시간: 2hours  3일 동안 운동을 쉬는 동안 세상이 멸망하는줄 알았다. 운동하고 나서 기진맥진하게 밥먹고 샤워하고 의자에 앉으면 기분 너무 좋아.   습관 일기:  위 수식이 틀린 이유를 설명해보십쇼 (개발면접타임) 한국은행이 하는 일 운동하는 시간에 역사팟캐스트를 듣기로 했다. 흘러가는 가요는 집중할 요소가 없어서 간혹 흐름이 끊기는것보다 지속적인 텍스트가 나오는 팟캐스트를 들으니 적당히 집중력을 유지할 수 있어서 좋았다. 파트는 프랑스 역사. 최근에 영국 네덜란드 독일은 지겹게 들었으니 프랑스로 선택. 예전에 유로파4 할때 생각이 난다.   생체배터리: 50% -&gt; 20%   🔗일일메모장 커밋  ","categories": ["TIL"],
        "tags": ["TIL,DAIRY"],
        "url": "/til/P2-TIL-55",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  파이선 사이드 프로젝트 진행. 익숙하지 않은 패키지에 고전 중. 그냥 쉘이 짱이다.   Devops  『데브옵스 핸드북』 서문까지 읽었다. 무슨 책인지 아직 전혀~ 모르겠지만 소프트웨어를 전달하는게 현대 기업의 가장 중요한 활동이라는 것을 데브옵스가 선언된 11년도에 인식했다는 이야기는 인상깊었다. 미래를 보고 미래가 실현되는 것을 지켜보고 또 자신이 그 속에서 무엇을 할수 있는지 실현하는 과정이 얼마나 두근거렸을까.   Finance  내일은 통장을 더 만들어서 월급 통장과 지출 통장, 비상금 통장을 쪼개볼 예정이다.   ENGLISH  책 2권을 시작했다. Action Verb, STATE Verb (동작 동사, 상태 동사) 문법 공부를 한지 참 오래되서 이런게 있었나..? 그런 생각만 가득   Diary  저녁에 방청소하고 양파랑 향신료에 대한 연구를 좀 하느라 30분 정도 시간을 보냈다. 세상에 궁금한건 너무 많은데 우선순위가 높은건 더 많다. 이번 주말엔 근처에 어디갈까 지도를 보는데 박물관이 이렇게 세상에 많은줄은 상상도 못했다. 할게 많아   Life     움직인 시간: 0.5H   습관 일기:  요즘은 유튜브를 보는 시간이 거의 없다. 그냥 영어를 열심히 읽어야 하는 턴에이 건담 애니메이션 보는중…   생체배터리: 60% -&gt; 15%   🔗일일메모장 커밋  ","categories": ["TIL"],
        "tags": ["TIL,DAIRY"],
        "url": "/til/P2-TIL-56",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "TIL & Diary",
        "excerpt":"Language  커밋 별로 변화된 글자를 konlpy로 분석하여 csv로 쓰는데까지 작업완료. 내일은 PR하고 비쥬얼라이즈 작업해야지   Finance  오늘 통장을 여러개 만들었다. ISA도 만들고 카카오뱅크 통장도 만들고. 한 7개 정도 통장을 구분해서 쓸것 같다. 월급, 생활비, 비상금, 해외가치투자, 해외퀀트, 국내자산   ENGLISH  상태와 동작을 구분하는 동사에 대해 공부   Diary  어떤 메모를 하고 어떤 기록을 남겨야 좋은 삶이 될지 고민이 깊다 😠   Life     움직인 시간: 2H   습관 일기:  변동성이 두려우신 분들은 이 영상 보시면 완치됩니다 (라방요약3)  779. 20년 전 2022년 주식시장 바닥을 예측한 책! - 이거 보면서 로또 숫자 분석하는 사람이랑 무슨차이인지 고민을 했다. 차라리 거품 붕괴를 기준으로 리셋하면서 8년 사이클이 동작하는지 보는게 더 영양가 있을듯.   생체배터리: 40% -&gt; 10% 블라인드를 사야겠다. 아침에 일어나는 시간이 너무 불규칙하다..   🔗일일메모장 커밋  ","categories": ["TIL"],
        "tags": ["TIL,DAIRY"],
        "url": "/til/P2-TIL-57",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2022.08.18 TIL & Diary",
        "excerpt":" 시간   Language  신규 기능을 만들기전에 테스트 케이스를 만들다가 이상하게 동작이 안해서 많이 해맸다. unittest 프레임워크가 특이한 네이밍 규칙을 요구하는 점이나 unittest discover 명령어를 실행할때 import 단계에서 문제를 일으키는 등. 뭐 잘못쓰는거야 그럴 수 있는데, 정확히 뭘 고쳐야하는지 알 수 없는 exception이 나와서 굉장히 혼란스러웠다. 잘 알지 못하는 상태에서 응용단계로 바로 넘어간 대가를 뒤 늦게 받는거라 생각한다.   Devops  OOM이 발생하는데 미리 발생하기 전에 조치를 하면 좋았을텐데. 좀더 스크립트를 짜서 예방을 해야하나?   Diary  오늘은 전반적으로 해야할일을 많이 처리하지 못했다. 골고루 하지 못하고 오랫동안 그냥 코드를 잡고 있거나 밤시간에 좀 멍하게 보냈다. 뭐 아주 논건 아니지만.. 의욕을 꺽이는 원인은 대충 알것같다. 전투적인 태도를 잃지 않도록 나쁜 습관을 다시 잡아가야지.   Life     움직인 시간: 0.45H   습관 일기:  나쁜 습관 없애기 Phase 2 - 1일차  책을 읽는다고 정말 똑똑해 질까요? - 이 사람이  극단적인 사람이라 전방위적으로 적용하긴 힘들긴 하지만 아주 틀린말은 아니다. 소설의 역사는 인쇄술의 전파와 함께 시작했다. 왕족들이 호화로운 파티와 예술을 즐길때 저렴한 미디어는 불만족스러운 인생에 대한 대중의 마취제였다. 폐인킬러는 언제나 잘 팔리니까. 오늘날이라고 다를까. 역사는 폐인킬러가 더 빠르고 더 쉽게 우리 손으로 들어오는 흐름이다. 반면에 진정으로 필요한 지식은 언제나 접근하기 힘들다. 어떤 지식이 보급되면 그 독점적 가치는 희석된다. 가치는 흩어진다. 그리고 보급되지 못한 지식의 가치는 평가절상된다. 조중동으로 대표되는 뻥구독자 신문이 지배하던 시대를 넘어 유료구독 뉴스레터가 팔리는 시대가 말해준다. 정보를 많이 봐주는 사람이 있는걸 기반으로 광고 수익을 내려던 패러다임 대신 비교적 흔하지 않은 정보를 구해다가 특이하게 편집하고 유료로 팔아서 그 가치가 희석 되는걸 방지한다.   생체배터리: 50% -&gt; 20%  ","categories": ["TIL"],
        "tags": ["TIL,DAIRY"],
        "url": "/til/P2-TIL-58",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      },{
        "title": "2022.08.19 TIL & Diary",
        "excerpt":" 시간   Language  bokeh API DOC 읽으면서 천천히 진행중. 요즘 정말로 내가 집중해야할게 뭔가 생각을 많이 한다. 굳이 에너지를 여기저기 쓰는게 맞나 생각이든다.   Devops  환경변수 주입에 실패한 케이스에 의한 버그 발견. 뭐든 잘못 동작하는게 스노우볼이 구르지 않도록 바로바로 에러를 던지는게 상책이다. (그래서 타입이 있는게 좋다.)   Finance  나름 종목을 공부해본다고 게임 주식들을 살펴봤는데 중국게임 퍼블리셔들이 많이 상장되있는 모습들이 뭔가 낯설었다. 지금 당장 사고 싶은건 넵튠. 넵튠은 밴드지표의 아랫단에 올때마다 사는건 나쁘지 않다고 본다. (회사 CEO가 바보는 아닌듯함) 나머지 생각이 있는 CEO를 가진 회사들은 다들 자기기업 가치에 맞는 가격을 가지고 있는듯함. 생각보다 온라인 노름판의 정체성을 가진 기업(넷마블, 엔씨)들이 죽을 쓰는거 보고 게임산업도 뭔가 이제 게이머 정신의 본질을 찾아가는건가.. 하고 조금 기뻤다. 가치주를 본다면 중국 게임 기업에 투자해야 한다는게 내 결론 (CWEB으로 간다) 아편의 종가집에다 훨씬 생산성이 좋은 주식들이 많다.   Diary  에너지를 잘 모아서 쓸곳에 써야한다. 그런 강단있는 행동력도 있으면서 유연하게 반응도 해야함. 이런 이슈에 여러가지 고민이 많다. 요즘   Life     움직인 시간: 2H. 4월 부터 운동해서 몸이 변한건 잘 모르고 살다가 거울 앞에서 뽀빠이 자세를 해보니 뭔가 우왁하고 튀어나오는게 깜짝놀랐다. 다리야 로드바이크 탈때부터 아 운동하면 이런 느낌이지! 하고 알고 있었으니 놀라진 않는데. 평생 상체 근육이 허약하게 살았으니 조금만 운동해도 변화가 느껴지는게 재밌다. 이런 맛에 웨이트 트레이닝하는거였구나.   습관 일기:  나쁜 습관 없애기 Phase 2 - 2일차   브릭스가 왜 무서운지 알아보자 이란과 사우디의 관계에 대해 적어놓은 댓글을 보고 많이 배웠다. 아직도 종교에 의해 국가의 대사가 정해지는 곳이 있다는걸 모르고 살았다는 생각에 부끄러워졌다.   생체배터리: 40% -&gt; 20%  ","categories": ["TIL"],
        "tags": ["TIL,DAIRY"],
        "url": "/til/P2-TIL-59",
        "teaser": "/assets/images/HibikeQauntumSymbol_500x300_version_waifu.jpeg"
      }]
